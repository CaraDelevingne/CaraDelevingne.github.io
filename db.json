{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/config.png","path":"img/config.png","modified":1,"renderable":0},{"_id":"source/img/event-loop.gif","path":"img/event-loop.gif","modified":1,"renderable":0},{"_id":"source/img/Promise执行过程.png","path":"img/Promise执行过程.png","modified":1,"renderable":0},{"_id":"source/img/dns.jpg","path":"img/dns.jpg","modified":1,"renderable":0},{"_id":"source/img/http.jpg","path":"img/http.jpg","modified":1,"renderable":0},{"_id":"source/img/tcp.jpg","path":"img/tcp.jpg","modified":1,"renderable":0},{"_id":"themes/anatole/source/css/blog_basic.css","path":"css/blog_basic.css","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/anatole/source/images/favicon.png","path":"images/favicon.png","modified":1,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/anatole/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/anatole/source/images/logo@2x.png","path":"images/logo@2x.png","modified":1,"renderable":1},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":1,"renderable":1},{"_id":"themes/anatole/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":1,"renderable":1},{"_id":"source/img/ip.jpg","path":"img/ip.jpg","modified":1,"renderable":0},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"source/img/HTTP_IP_TCP_DNS.jpg","path":"img/HTTP_IP_TCP_DNS.jpg","modified":1,"renderable":0},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/anatole/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/anatole/LICENSE","hash":"359cb81298c1fdbccf531548fc097466b0151be4","modified":1525512183717},{"_id":"themes/anatole/.gitignore","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1525513322066},{"_id":"themes/anatole/README.md","hash":"75a3829b8a316249ec0b4fd8eae2d371de879494","modified":1525512183719},{"_id":"themes/anatole/_config.sample.yml","hash":"2710ebe717d210bc93ca228c54cef6e52e04d161","modified":1525512183720},{"_id":"themes/anatole/_config.yml","hash":"063738b226c712b7716975910baa3a2db3e16a0c","modified":1525513322067},{"_id":"themes/anatole/package.json","hash":"cf731a3ebf3913747fccb6c4c6615eba7d7e88a4","modified":1525512183739},{"_id":"source/_posts/3D-Tags.md","hash":"93e05dc09e0b1a5ca10b2e5d3d6a74a14b07451e","modified":1525512183649},{"_id":"source/_posts/Babel.md","hash":"949befdaf57d93fb841865b10a9723ca537fbb12","modified":1525512183650},{"_id":"source/_posts/CSS-垂直水平居中大整合.md","hash":"7cff088ce3e84478e20bebee3f03b01f3b17dadd","modified":1525512183653},{"_id":"source/_posts/Flex-弹性盒子.md","hash":"6e8b09d795f12d3b41b2c8e4acf84bcc0f8b4171","modified":1525512183654},{"_id":"source/_posts/HTTP-上.md","hash":"18ed070998c3ec3346c70bba976242cde24b3df1","modified":1525512183655},{"_id":"source/_posts/Inheritance-继承.md","hash":"df45f4be28c84449a796614704744ba09f9c1268","modified":1525512183657},{"_id":"source/_posts/JavaScript-关于运算的小技巧.md","hash":"ba84011153394c8d7288d8e89635fdf4ff18e782","modified":1525512183658},{"_id":"source/_posts/JavaScript-方法集.md","hash":"1838716d9e2983e6a94f2b58d4ad66bf9c9d7d8f","modified":1525512183659},{"_id":"source/_posts/JavaScript-模块化.md","hash":"6e45bba0e5aedfef57b84b4590d47fbafa3aad5e","modified":1525512183660},{"_id":"source/_posts/JavaScript-深浅拷贝.md","hash":"2258c36dbadafff3688414e6ff18ade6b1494762","modified":1525512183661},{"_id":"source/_posts/Promise-分析及实现.md","hash":"97f236d58dbf3c467411c6a4e6954afde0c2ff38","modified":1525512183663},{"_id":"source/_posts/Quick-Sort.md","hash":"3970dc470664fca4b6eff1d066a7a857d611fc37","modified":1525512183664},{"_id":"source/_posts/base64-转-blob.md","hash":"8fa3cf7977f55b4586c7c11ed0128bef2ec367f1","modified":1525512183665},{"_id":"source/_posts/cookie-localStorage-and-sessionStorage.md","hash":"cfbe6192c357372f52fd6ba29a70ae2257d2ba75","modified":1525512183667},{"_id":"source/_posts/iisNode.md","hash":"ed01a41b14b4159340b611362f1e2b20ce336596","modified":1525512183670},{"_id":"source/_posts/this-call-and-apply.md","hash":"e076e4af3d3274f7dea90f1282c46dbe716e6a80","modified":1525512183671},{"_id":"source/_posts/事件代理-委托.md","hash":"19bc39a1b1e710a115363120a4763c5b1042f8c0","modified":1525512183673},{"_id":"source/_posts/位运算符.md","hash":"4478b42ea8f1b9e5e611a9870e2e707923898f63","modified":1525512183674},{"_id":"source/_posts/关于移植-HEXO.md","hash":"e025895d531e3ca24575974c618d08f7360b1fdb","modified":1525512183676},{"_id":"source/_posts/声明提升.md","hash":"2a22e1bcbf765522c5abbce718cfa5394b59381e","modified":1525512183678},{"_id":"source/_posts/盒模型.md","hash":"8dfa73bc87c4e09919834a6bb2e300a6394983e2","modified":1525512183679},{"_id":"source/_posts/跨域.md","hash":"3ffd9aa73982d3f69eb7c32dd2564aca099f4230","modified":1525512183681},{"_id":"source/_posts/网络摄像机直播.md","hash":"1ac51081268269710e56c09a3e801b2354f8c769","modified":1525608104018},{"_id":"source/_posts/闭包和高阶函数.md","hash":"af05e3fa890f4698b6f056e0688ee3a2cf9c7d16","modified":1525512183683},{"_id":"source/about/index.md","hash":"6c074b4613923a2c3019789467da442f0544d445","modified":1525512183690},{"_id":"source/img/config.png","hash":"30a30132362032ae1458b8f721fb8099c71e0273","modified":1525510810003},{"_id":"source/img/event-loop.gif","hash":"2bfdd4ce07a220efcf7c731a664b63425bb444bf","modified":1525512183703},{"_id":"source/links/index.md","hash":"ee37d42b60b8aaffcb71233484447b3795e81607","modified":1525512183715},{"_id":"themes/anatole/languages/zh-cn.yml","hash":"dab1823e036f4adb3b7ae9efe95a37a15e47bec2","modified":1525512183721},{"_id":"themes/anatole/layout/archive.jade","hash":"1a161404966000b25a84762f08da3ca60af146bc","modified":1525512183722},{"_id":"themes/anatole/layout/category.jade","hash":"ae894ef4baee4a0c7c8e66641166061e789f1fa7","modified":1525512183723},{"_id":"themes/anatole/layout/index.jade","hash":"53da3cfd498951148acb33de1574df80ae282dc5","modified":1525512183724},{"_id":"themes/anatole/layout/mixins.jade","hash":"bc9961b2ea6ecbd9f994b2aeebb3c8ee2e3cc968","modified":1525512183726},{"_id":"themes/anatole/layout/page.jade","hash":"15142c94e5c2247aba8efb64cffd695b3f133670","modified":1525512183727},{"_id":"themes/anatole/layout/post.jade","hash":"2f2b91b98d8f72d105211cdbf312d44ea3b1b145","modified":1525512183736},{"_id":"themes/anatole/layout/tag.jade","hash":"7017a8bae4f4a412dafb556772bdcf2cfddeb79f","modified":1525512183738},{"_id":"source/img/Promise执行过程.png","hash":"242190bdf9af47738db5b6e8f9ab831c3f3306af","modified":1525512183698},{"_id":"source/img/dns.jpg","hash":"c571ab5c508eec11612312d617d3f3563eca743d","modified":1525512183700},{"_id":"source/img/http.jpg","hash":"87501cb87dcf30a9d4964f79280a4b4d302ac140","modified":1525512183707},{"_id":"source/img/tcp.jpg","hash":"4b633b76046e204df6d9aa5eb4a50910f656cf4b","modified":1525512183713},{"_id":"themes/anatole/layout/partial/comments.jade","hash":"6d749e695e30ecfc0a2de2b443fd361f5f2a5cff","modified":1525512183729},{"_id":"themes/anatole/layout/partial/footer.jade","hash":"e709cebfc5dd5b449878496389a98c6221a9a4d2","modified":1525512183730},{"_id":"themes/anatole/layout/partial/head.jade","hash":"3d6126d0b53a889a46ad61eb8cc0ab1b35446c49","modified":1525512183732},{"_id":"themes/anatole/layout/partial/layout.jade","hash":"174050fa9ee919f5bcb2c5426224ec1968db672c","modified":1525512183733},{"_id":"themes/anatole/layout/partial/nav.jade","hash":"1542c32f633c09eb3fa05b828e2051c878e8606a","modified":1525512183734},{"_id":"themes/anatole/layout/partial/sidebar.jade","hash":"a08398d523b76c446ec52e0debab89588eb1ef4f","modified":1525512183736},{"_id":"themes/anatole/source/css/blog_basic.css","hash":"7db88f0873e858b21a4c981c8481708ad9117478","modified":1525512183741},{"_id":"themes/anatole/source/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1525512183742},{"_id":"themes/anatole/source/css/style.css","hash":"871a5c940cbc0ce5488a670f2285f2c3015cf71c","modified":1525512183743},{"_id":"themes/anatole/source/css/style.scss","hash":"175c9237798207f705c62777b5f51509adec6d0a","modified":1525512183745},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1525512183747},{"_id":"themes/anatole/source/images/favicon.png","hash":"d659236704308954da9d64b101c4f54cc3f3255c","modified":1525512183757},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1525512183756},{"_id":"themes/anatole/source/images/logo.png","hash":"41bdf2ebd8cc193ad82a211758af827d891b1a90","modified":1525512183759},{"_id":"themes/anatole/source/images/logo@2x.png","hash":"49c3fa97724abf53861bf11356ea9ba5bcb11576","modified":1525512183761},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1525512183763},{"_id":"themes/anatole/source/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1525512183764},{"_id":"source/img/ip.jpg","hash":"735428d2890f00ad0382dc4cf936db34f7c1ae53","modified":1525512183711},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1525512183754},{"_id":"source/img/HTTP_IP_TCP_DNS.jpg","hash":"10cdf7d1e760877625f6377e7e179db9a01190dd","modified":1525512183695},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1525512183751},{"_id":"themes/anatole/source/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1525512183767},{"_id":"public/about/index.html","hash":"617ac8d56a0085e0b68d2268d0a423e008091422","modified":1525608119407},{"_id":"public/links/index.html","hash":"3bb825f5dc3556e131000de50fed3311cc356af9","modified":1525608119407},{"_id":"public/2018/01/03/HTTP-上/index.html","hash":"60b71bc788f31cc92562d592bfb22b7549e632ef","modified":1525608119407},{"_id":"public/2017/12/20/声明提升/index.html","hash":"49ed34f2d60e08e3027c83092b57b731a2c03a40","modified":1525608119407},{"_id":"public/2017/10/22/base64-转-blob/index.html","hash":"6d30a726f162488ef524197b55a98085bf6957d3","modified":1525608119407},{"_id":"public/2017/10/21/盒模型/index.html","hash":"3d6e2772fe0916c6374ac794b4bcf910892db6b5","modified":1525608119407},{"_id":"public/2017/10/18/位运算符/index.html","hash":"7bf40ff68ccc5bda091a8c1cd5fa32575309a249","modified":1525608119407},{"_id":"public/2017/10/17/JavaScript-关于运算的小技巧/index.html","hash":"0d4574412e60cec522d964cbf2914af3e203ba09","modified":1525608119408},{"_id":"public/2017/10/17/JavaScript-模块化/index.html","hash":"9a3c240d359c105bc04a499fd8169a1298e3e61f","modified":1525608119408},{"_id":"public/2017/10/17/Quick-Sort/index.html","hash":"68f686f2b9fe125c8401b2388b6362a6cc7cf295","modified":1525608119408},{"_id":"public/2017/10/14/关于移植-HEXO/index.html","hash":"a55f7190624c031624296b445325585caea3effa","modified":1525608119408},{"_id":"public/2017/06/11/cookie-localStorage-and-sessionStorage/index.html","hash":"67e556df4650e6875ea062e3b8833addd531e749","modified":1525608119408},{"_id":"public/archives/index.html","hash":"0af31307527c77ae629004c5f1d3e478afca63a8","modified":1525608119408},{"_id":"public/2017/05/28/iisNode/index.html","hash":"25d9485487317add7a3169b96875dcdebf76b925","modified":1525608119408},{"_id":"public/categories/笔记📒/index.html","hash":"e1b39ca5d340a66961513b0e675da12085ffb887","modified":1525608119408},{"_id":"public/categories/笔记📒/page/2/index.html","hash":"525b590043a4575e23425642377e09c4671eeedb","modified":1525608119408},{"_id":"public/categories/复习/index.html","hash":"86549e6a61eb93d1ea6d4ca85d665661b5e7d79e","modified":1525608119408},{"_id":"public/categories/笔记📒/复习/index.html","hash":"31b70adcb1038bbe4351ea6d72c7bc19b6b11b0a","modified":1525608119408},{"_id":"public/categories/复习/笔记📒/index.html","hash":"9990a4c6da15612d847fa2275c6288cf556b87d5","modified":1525608119408},{"_id":"public/categories/笔记📒/JavaScript设计模式/index.html","hash":"e586ca2a051c7e28dcaa27b97dc1f579dc19670f","modified":1525608119409},{"_id":"public/index.html","hash":"3ca616314a38ce2d55ad8380c9ed78b62c71e1d3","modified":1525608119409},{"_id":"public/page/2/index.html","hash":"cbb82b7786ecdffcac2a03686917eca2e6d9c7f8","modified":1525608119409},{"_id":"public/page/3/index.html","hash":"98ace427afed2d2d7491c1f049cb3b35f3954edd","modified":1525608119409},{"_id":"public/tags/JavaScript/index.html","hash":"c02c566b10724149af2bf5218db90db3232a26dd","modified":1525608119409},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"5971d163ba1bf486928389cb4696e98f80ae0aab","modified":1525608119409},{"_id":"public/tags/Babel/index.html","hash":"e16068bb42d8339a0b4b002f06df96a37e230910","modified":1525608119409},{"_id":"public/tags/CSS/index.html","hash":"2e9f7cad8bbac89ee5611f891be207875b1b7715","modified":1525608119409},{"_id":"public/tags/HTTP/index.html","hash":"a08aba0d220aec344a3de0506a4c8c4aa8b622ab","modified":1525608119409},{"_id":"public/tags/Node-js/index.html","hash":"d9c019e98e0ee097535ead336f729a3b8564579e","modified":1525608119409},{"_id":"public/tags/hexo/index.html","hash":"a6890e23770386b9a75135d6401ac4bc852a5f32","modified":1525608119409},{"_id":"public/tags/FFmpeg/index.html","hash":"3f28bc57a1b73e2a899ac4698c47787309fe8c12","modified":1525608119409},{"_id":"public/2018/05/06/网络摄像机直播/index.html","hash":"99bd7576aadbcd7dcd1188c32e8acd96a2950467","modified":1525608119409},{"_id":"public/2018/04/09/Babel/index.html","hash":"a8aa897770ca1c6bab5a0e81434123a7a2703c18","modified":1525608119410},{"_id":"public/2018/04/02/跨域/index.html","hash":"e24e4ce6cc2e08e6b6a13328fe69ed5c4cc47363","modified":1525608119410},{"_id":"public/2018/01/04/Promise-分析及实现/index.html","hash":"1bf100fb2d803b55ae3d1d3150a4e9b5fc641833","modified":1525608119410},{"_id":"public/2017/12/10/事件代理-委托/index.html","hash":"2462937e61c47664cf5eb82854465472305e5e96","modified":1525608119410},{"_id":"public/2017/11/23/Flex-弹性盒子/index.html","hash":"e5c5c77f574005bace2604b1735845f8cd26e41a","modified":1525608119410},{"_id":"public/2017/10/26/闭包和高阶函数/index.html","hash":"b8901fad6ff32287e0a689c2daf4f83b892cf0c2","modified":1525608119410},{"_id":"public/2017/10/17/this-call-and-apply/index.html","hash":"047223e0f95766e3dd361a8a556e60d5bb14c3c2","modified":1525608119410},{"_id":"public/2017/10/16/Inheritance-继承/index.html","hash":"a9aeddfda85ddf9bd6885733d79798a945ebe8f9","modified":1525608119410},{"_id":"public/2017/10/16/JavaScript-方法集/index.html","hash":"0141c9677ff3b3f63412562333d1fe1dcdc552ff","modified":1525608119410},{"_id":"public/2017/10/16/JavaScript-深浅拷贝/index.html","hash":"61109942e2c90d4fe5a291aa955d45f6728ba240","modified":1525608119410},{"_id":"public/2017/10/15/3D-Tags/index.html","hash":"ebd3dd15c1fb3161879ebfbb3c508694226e866f","modified":1525608119410},{"_id":"public/2017/10/14/CSS-垂直水平居中大整合/index.html","hash":"bfec164627c7720026cfdd20acf84f8dc0788f32","modified":1525608119411},{"_id":"public/img/config.png","hash":"30a30132362032ae1458b8f721fb8099c71e0273","modified":1525608119420},{"_id":"public/img/event-loop.gif","hash":"2bfdd4ce07a220efcf7c731a664b63425bb444bf","modified":1525608119420},{"_id":"public/css/style.scss","hash":"175c9237798207f705c62777b5f51509adec6d0a","modified":1525608119420},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1525608119420},{"_id":"public/images/favicon.png","hash":"d659236704308954da9d64b101c4f54cc3f3255c","modified":1525608119420},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1525608119420},{"_id":"public/images/logo.png","hash":"41bdf2ebd8cc193ad82a211758af827d891b1a90","modified":1525608119420},{"_id":"public/images/logo@2x.png","hash":"49c3fa97724abf53861bf11356ea9ba5bcb11576","modified":1525608119421},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1525608119424},{"_id":"public/css/blog_basic.css","hash":"7db88f0873e858b21a4c981c8481708ad9117478","modified":1525608119433},{"_id":"public/css/style.css","hash":"871a5c940cbc0ce5488a670f2285f2c3015cf71c","modified":1525608119433},{"_id":"public/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1525608119433},{"_id":"public/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1525608119433},{"_id":"public/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1525608119433},{"_id":"public/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1525608119433},{"_id":"public/img/Promise执行过程.png","hash":"242190bdf9af47738db5b6e8f9ab831c3f3306af","modified":1525608119433},{"_id":"public/img/dns.jpg","hash":"c571ab5c508eec11612312d617d3f3563eca743d","modified":1525608119433},{"_id":"public/img/http.jpg","hash":"87501cb87dcf30a9d4964f79280a4b4d302ac140","modified":1525608119433},{"_id":"public/img/tcp.jpg","hash":"4b633b76046e204df6d9aa5eb4a50910f656cf4b","modified":1525608119433},{"_id":"public/img/ip.jpg","hash":"735428d2890f00ad0382dc4cf936db34f7c1ae53","modified":1525608119437},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1525608119439},{"_id":"public/img/HTTP_IP_TCP_DNS.jpg","hash":"10cdf7d1e760877625f6377e7e179db9a01190dd","modified":1525608119441}],"Category":[{"name":"笔记📒","_id":"cjgurols40003klu02o1j9n49"},{"name":"复习","_id":"cjgurols90008klu0z44o06zl"},{"name":"复习","parent":"cjgurols40003klu02o1j9n49","_id":"cjgurolsi000lklu0kn8vukl0"},{"name":"笔记📒","parent":"cjgurols90008klu0z44o06zl","_id":"cjgurolsp0010klu0ba4jc3og"},{"name":"JavaScript设计模式","parent":"cjgurols40003klu02o1j9n49","_id":"cjgurolsv001hklu0d8gvjlqo"}],"Data":[],"Page":[{"title":"about","date":"2017-10-14T13:52:34.000Z","_content":"\n一个坐标成都的小小前端开发者🙂\n\n#### Concat\nEmail: enp4eGNjbGxvb3BwQGxpdmUuY29t\n\nGitHub: [Caraws](https://github.com/Caraws)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-10-14 21:52:34\n---\n\n一个坐标成都的小小前端开发者🙂\n\n#### Concat\nEmail: enp4eGNjbGxvb3BwQGxpdmUuY29t\n\nGitHub: [Caraws](https://github.com/Caraws)\n","updated":"2018-05-05T09:23:03.690Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjgurols10001klu0c2bhwd1a","content":"<p>一个坐标成都的小小前端开发者🙂</p>\n<h4 id=\"Concat\"><a href=\"#Concat\" class=\"headerlink\" title=\"Concat\"></a>Concat</h4><p>Email: enp4eGNjbGxvb3BwQGxpdmUuY29t</p>\n<p>GitHub: <a href=\"https://github.com/Caraws\" target=\"_blank\" rel=\"noopener\">Caraws</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个坐标成都的小小前端开发者🙂</p>\n<h4 id=\"Concat\"><a href=\"#Concat\" class=\"headerlink\" title=\"Concat\"></a>Concat</h4><p>Email: enp4eGNjbGxvb3BwQGxpdmUuY29t</p>\n<p>GitHub: <a href=\"https://github.com/Caraws\" target=\"_blank\" rel=\"noopener\">Caraws</a></p>\n"},{"title":"links","date":"2017-10-14T14:22:15.000Z","_content":"\n小伙伴们:\n\n[阿科](https://fairfarren.github.io/)\n[大佬](https://blog.iihaiku.com/)\n","source":"links/index.md","raw":"---\ntitle: links\ndate: 2017-10-14 22:22:15\n---\n\n小伙伴们:\n\n[阿科](https://fairfarren.github.io/)\n[大佬](https://blog.iihaiku.com/)\n","updated":"2018-05-05T09:23:03.715Z","path":"links/index.html","comments":1,"layout":"page","_id":"cjgurom6z002oklu002qbu9nj","content":"<p>小伙伴们:</p>\n<p><a href=\"https://fairfarren.github.io/\" target=\"_blank\" rel=\"noopener\">阿科</a><br><a href=\"https://blog.iihaiku.com/\" target=\"_blank\" rel=\"noopener\">大佬</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>小伙伴们:</p>\n<p><a href=\"https://fairfarren.github.io/\" target=\"_blank\" rel=\"noopener\">阿科</a><br><a href=\"https://blog.iihaiku.com/\" target=\"_blank\" rel=\"noopener\">大佬</a></p>\n"}],"Post":[{"title":"3D-Tags","date":"2017-10-15T10:25:44.000Z","_content":"3D 标签云\n练习canvas的3D效果,  球体算法, 正好IFE 的项目有就记录一下咯.\n\n### 大概思路\n首先3D云其实就是一个球体, 在这个球体上平均分布各个点, 再把这些点\n的坐标赋给标签,计算一下 z 轴的大小, 最后通过改变字体的大小/ 透明度\n就可以模拟出立体的效果啦.\n\n### 相关的一些公式及说明\n\n1. 球体 x/ y/ z 轴的坐标点 \n已知半径 R 和球心, 方便起见一般都以坐标轴的原点作为球心. 有如下三个方程式:\n```javascript\nx = R * sinθ * cosø\ny = R * sinθ * sinø\nz = R * cosθ\n```\n\n其中θ 和 ø 可以去随机数, 来获取圆上的随机点坐标. 但是3D 云的坐标点是需要均匀分配的坐标点, 所以光是去随机点是不够的. 所以又有了下面的公式:\n\n```javascript\n// index 为当前索引, length 为标签长度\n// 这段我也不懂原理是什么, 在别人的代码里看见的...\nθ = acos((2 * (index + 1) - 1) / length - 1)\n// n 取 Math.PI\nø = θ * sqrt(length * n)\n```\n\n#### 关键代码\n```javascript\nconst setBall = _ => {\n\t// 标签\n\tlet tagLabel = document.querySelector('.tag');\n\tfor (let i =0, len = tagLabel.length; i < len; i++) {\n\t\tlet k = (2 * (i + 1) - 1) / len - 1,\n\t\t\ta = acos(k), // 上述θ \n\t\t\tb = a * sqrt(len * Math.PI), // 上述ø\n\t\t\tx = radius * Math.sin(a) * Math.cos(b), \n\t\t\ty = radius * Math.sin(a) * Math.sin(b),\n\t\t\tz = radius * Math.cos(a);\n\t\t// 让球体动起来, 我们先把方法放在这儿\n\t\tlet t = new tag(tagLabel[i], x, y, z);\n\t\t\ttags.push(t);\n\t\t\tt.move()\n\t}\n}\n```\n\n以上就可以取得球体所需的平均坐标点, 接下来我们就需要去操作 DOM 每个标签了.\n\n2. 标签字体及透明度计算\n```javascript\n// fallLength 为焦距\nlet scale = fallLength/ (fallLength - this.z),\n\t  opa = (this.z + radius) / (2 * radius);\n// 每个标签添加样式\nthis.element.style.cssText = `color: rgb(\n\t${parseInt(Math.random() * 255)}, \n\t${parseInt(Math.random() * 255)}, \n\t${parseInt(Math.random() * 255)});\n\tfont-size: ${parseInt(15 * scale)}px;\n\topacity: ${opa + 0.5};\n\tz-index: ${parseInt(scale * 100)};\n\tleft: ${this.x + CX - this.element.offsetWidth / 2}px;\n\ttop: ${this.y + CY - this.element.offsetHeight / 2}px`;\n```\n\nfallLength 是焦距, 也是一个常量, scale 和 opacity 都要通过 z 轴来调整的. 这里也是从别人的代码里看到的, 应该也是公式吧; 后面就是调整字体大小/ 透明度, 标签位置的操作了. 以上计算就是`move()`函数中的内容. 现在球体已经出来了, 那么就该让他动起来了.\n\n3. 旋转算法\n为了让球体动起来, 我们需要知道下面这三个公式: \n\n![旋转公式](http://orf90agxq.bkt.clouddn.com/3d_tags/rotate.png)\n\n然后我们需要两个函数, x 轴选择和 y 轴旋转, 关键代码如下:\n```javascript\nconst rotateX = _ => {\n\t// angleX 是事先定义好的角度值\n\tlet sin = Math.sin(angleX),\n\t\tcos = Math.cos(angleX);\n\ttags.forEach(function () {\n\t\tlet y1 = this.y * cos - this.z * sin,\n\t\t\tz1 = this.z * cos + this.y * sin;\n\t\tthis.y = y1;\n\t\tthis.z = z1;\n\t})\n}\n\nconst rotateY = _ =>{\n\t// angleY 是事先定义好的角度值\n\tlet cos = Math.cos(angleY),\n     \tsin = Math.sin(angleY);\n\ttags.forEach(function () {\n\t\tlet x1 = this.x * cos - this.z * sin,\n\t\t\tz1 = this.z * cos + this.x * sin;\n\t\tthis.x = x1;\n\t\tthis.z = z1;\n\t})\n}\n```\n这里 angleX 和 angleY 为角度值, 用来控制标签云的旋转方向和速度. 角度的正负值控制旋转方向; 大小控制旋转速度.\n\n4. 鼠标控制\n这里就是最后一步了, 通过鼠标改变球体的旋转方向. 这里我做了一点点扩展几个输入框, 可以让用户自由填写云内容/ 数量及旋转速度, 下面直接看代码吧.\n\n```javascript\n// 来个事件监听\nconst addEvent = function (element, event, fn) {\n\t\tif (element.addEventListener) {\n\t\t\telement.addEventListener(event, fn, false)\n\t\t}else if (element.attachEvent) {\n\t\t\telement.attachEvent('on' + event, fn)\n\t\t}else {\n\t\t\telement['on' + event] = fn\n\t\t}\n\t};\n\n// 获取用户输入标签\naddEvent(content, 'blur', function () {\n\tif (!!this.value) {\n\t\tconsole.log(typeof this.value)\n\t\tdata = this.value.split(',');\n\t\tcreateLabel(data, num);\n\t\tlet item = document.querySelectorAll('.tag');\n\t\tsetBall(item)\n\t}\n});\n\n// 获取用户输入数量\naddEvent(numberLabel, 'blur', function () {\n\tif (+this.value < 0 || +this.value > 200) {\n\t\talert('请填写11 - 200之间的数值')\n\t}else {\n\t\tnum = +this.value;\n\t\tcreateLabel(data, num);\n\t\tlet item = document.querySelectorAll('.tag');\n\t\tsetBall(item)\n\t}\n})\n\n// 获取转速\naddEvent(speedLabel, 'blur', function () {\n\tif (+this.value < 0) {\n\t\talert('请输入大于0的数值')\n\t}else {\n\t\tspeed = +this.value;\n\t\tclearInterval(interval)\n\t\tanimate()\n\t}\n})\n\n// 鼠标移动\naddEvent(container, \"mousemove\", function (e) {\n\t// EX: 宽度的一半; CX: 左边距\n\t// EY: 高度的一半; CY: 上边距\n\tvar x = e.clientX - EX - CX;\n  \tvar y = e.clientY - EY - CY;\n  \tangleX = y * 0.0001;\n  \tangleY = x * 0.0001;\n});\n```\n到这里3D 云的流程差不多就走完了, 下面放一个完整的 js 部分代码吧.\n\n```javascript\n(function (global) {\n\tlet speedLabel = document.getElementById('speed'),\n\t\tnumberLabel = document.getElementById('number'),\n\t\tdata = [\"JavaScript\", \"Node.Js\", \"HTML\", \"CSS\", \"vue\", \"react\"\n\t\t\t\t, \"JQuery\", \"Webpack\", \"Babel\", \"ES6\", \"WebSocket\"],\n\t\tcontainer = document.querySelector('.container'),\n\t\tcontent = document.getElementById('content'),\n\t\tinterval,\n\t\tspeed = 100,\n\t\tnum = 120,\n\t\tradius = 300,\n\t\tfallLength = 500,\n\t\tangleX = Math.PI / 500,\n\t\tangleY = Math.PI / 500,\n\t\tCX = container.offsetWidth / 2,\n\t\tCY = container.offsetHeight / 2,\n\t\tEX = container.offsetLeft,\n\t\tEY = container.offsetTop;\n\n\n\t// 创建标签\n\tconst createLabel = (data, num) => {\n\t\tlet html = '', index;\n\t\tfor (let i = 0; i < num; i++) {\n\t\t\tindex = Math.floor(Math.random() * data.length);\n\t\t\thtml += `<label class='tag'>${data[index]}</label>`;\n\t\t}\n\t\tcontainer.innerHTML = html;\n\t};\n\n\t// 事件监听\n\tconst addEvent = function (element, event, fn) {\n\t\tif (element.addEventListener) {\n\t\t\telement.addEventListener(event, fn, false)\n\t\t}else if (element.attachEvent) {\n\t\t\telement.attachEvent('on' + event, fn)\n\t\t}else {\n\t\t\telement['on' + event] = fn\n\t\t}\n\t};\n\n\t// 获取用户输入标签\n\taddEvent(content, 'blur', function () {\n\t\tif (!!this.value) {\n\t\t\tconsole.log(typeof this.value)\n\t\t\tdata = this.value.split(',');\n\t\t\tcreateLabel(data, num);\n\t\t\tlet item = document.querySelectorAll('.tag');\n\t\t\tsetBall(item)\n\t\t}\n\t});\n\n\t// 获取用户输入数量\n\taddEvent(numberLabel, 'blur', function () {\n\t\tif (+this.value < 0 || +this.value > 200) {\n\t\t\talert('请填写11 - 200之间的数值')\n\t\t}else {\n\t\t\tnum = +this.value;\n\t\t\tcreateLabel(data, num);\n\t\t\tlet item = document.querySelectorAll('.tag');\n\t\t\tsetBall(item)\n\t\t}\n\t})\n\n\t// 获取转速\n\taddEvent(speedLabel, 'blur', function () {\n\t\tif (+this.value < 0) {\n\t\t\talert('请输入大于0的数值')\n\t\t}else {\n\t\t\tspeed = +this.value;\n\t\t\tclearInterval(interval)\n\t\t\tanimate()\n\t\t}\n\t})\n\n\tlet tags = [];\n\n\t// setBall\n\tconst setBall = _ => {\n\t\tlet tagLabel = document.querySelectorAll('.tag');\n\t\tfor (let i = 0; i < tagLabel.length; i++) {\n\t\t\tlet k = (2 * (i + 1) - 1) / tagLabel.length - 1,\n\t\t\t\ta = Math.acos(k), // 反余弦\n\t\t\t\tb = a * Math.sqrt(tagLabel.length * Math.PI), // 平方根\n\t\t\t\tx = radius * Math.sin(a) * Math.cos(b),\n\t\t\t\ty = radius * Math.sin(a) * Math.sin(b),\n\t\t\t\tz = radius * Math.cos(a);\n\n\t\t\tlet t = new tag(tagLabel[i], x, y, z);\n\t\t\ttags.push(t);\n\t\t\tt.move()\n\t\t}\n\t};\n\n\tArray.prototype.forEach = function (callback) {\n        for(let i = 0; i < this.length; i++) {\n            callback.call(this[i]);\n        }\n    }\n\n\n\n\tfunction tag (el, x, y, z) {\n\n\t\tthis.element = el;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t}\n\n\ttag.prototype = {\n\t\tmove: function () {\n\t\t\tlet scale = fallLength/ (fallLength - this.z),\n\t\t\t\topa = (this.z + radius) / (2 * radius);\n\t\t\tthis.element.style.cssText = `color: rgb(${parseInt(Math.random() * 255)}, \n\t\t\t\t${parseInt(Math.random() * 255)}, ${parseInt(Math.random() * 255)});\n\t\t\t\tfont-size: ${parseInt(15 * scale)}px;\n\t\t\t\topacity: ${opa + 0.5};\n\t\t\t\tz-index: ${parseInt(scale * 100)};\n\t\t\t\tleft: ${this.x + CX - this.element.offsetWidth / 2}px;\n\t\t\t\ttop: ${this.y + CY - this.element.offsetHeight / 2}px`;\n\t\t}\n\t}\n\n\tconst animate = _ => {\n\t\tinterval = setInterval(function () {\n\t\t\trotateX();\n\t\t\trotateY();\n\t\t\ttags.forEach(function () {\n\t\t\t\tthis.move()\n\t\t\t})\n\t\t}, speed)\n\t};\n\n\tconst rotateX = _ => {\n\t\tlet sin = Math.sin(angleX),\n\t\t\tcos = Math.cos(angleX);\n\t\ttags.forEach(function () {\n\t\t\tlet y1 = this.y * cos - this.z * sin,\n\t\t\t\tz1 = this.z * cos + this.y * sin;\n\t\t\tthis.y = y1;\n\t\t\tthis.z = z1;\n\t\t})\n\t}\n\n\tconst rotateY = _ =>{\n\t\tvar cos = Math.cos(angleY),\n        \tsin = Math.sin(angleY);\n        tags.forEach(function () {\n            var x1 = this.x * cos - this.z * sin;\n            var z1 = this.z * cos + this.x * sin;\n            this.x = x1;\n            this.z = z1;\n        })\n\t}\n\n\t// 鼠标移动\n\taddEvent(container, \"mousemove\", function (e) {\n        var x = e.clientX - EX - CX;\n        var y = e.clientY - EY - CY;\n        angleX = y * 0.0001;\n        angleY = x * 0.0001;\n    });\n\n\t// 初始化\n\tcreateLabel(data, num);\n\tvar tagLabel = document.querySelectorAll('.tag');\n\tsetBall(tagLabel);\n\tanimate()\n})(window)\n```\n\nCreated on 17-10-8 by Cara\n[在线预览 demo](https://caraws.github.io/IFE/IFE2017/3d-tags/index.html)\n","source":"_posts/3D-Tags.md","raw":"---\ntitle: 3D-Tags\ndate: 2017-10-15 18:25:44\ncategories:\n- 笔记📒\ntags:\n- JavaScript\n---\n3D 标签云\n练习canvas的3D效果,  球体算法, 正好IFE 的项目有就记录一下咯.\n\n### 大概思路\n首先3D云其实就是一个球体, 在这个球体上平均分布各个点, 再把这些点\n的坐标赋给标签,计算一下 z 轴的大小, 最后通过改变字体的大小/ 透明度\n就可以模拟出立体的效果啦.\n\n### 相关的一些公式及说明\n\n1. 球体 x/ y/ z 轴的坐标点 \n已知半径 R 和球心, 方便起见一般都以坐标轴的原点作为球心. 有如下三个方程式:\n```javascript\nx = R * sinθ * cosø\ny = R * sinθ * sinø\nz = R * cosθ\n```\n\n其中θ 和 ø 可以去随机数, 来获取圆上的随机点坐标. 但是3D 云的坐标点是需要均匀分配的坐标点, 所以光是去随机点是不够的. 所以又有了下面的公式:\n\n```javascript\n// index 为当前索引, length 为标签长度\n// 这段我也不懂原理是什么, 在别人的代码里看见的...\nθ = acos((2 * (index + 1) - 1) / length - 1)\n// n 取 Math.PI\nø = θ * sqrt(length * n)\n```\n\n#### 关键代码\n```javascript\nconst setBall = _ => {\n\t// 标签\n\tlet tagLabel = document.querySelector('.tag');\n\tfor (let i =0, len = tagLabel.length; i < len; i++) {\n\t\tlet k = (2 * (i + 1) - 1) / len - 1,\n\t\t\ta = acos(k), // 上述θ \n\t\t\tb = a * sqrt(len * Math.PI), // 上述ø\n\t\t\tx = radius * Math.sin(a) * Math.cos(b), \n\t\t\ty = radius * Math.sin(a) * Math.sin(b),\n\t\t\tz = radius * Math.cos(a);\n\t\t// 让球体动起来, 我们先把方法放在这儿\n\t\tlet t = new tag(tagLabel[i], x, y, z);\n\t\t\ttags.push(t);\n\t\t\tt.move()\n\t}\n}\n```\n\n以上就可以取得球体所需的平均坐标点, 接下来我们就需要去操作 DOM 每个标签了.\n\n2. 标签字体及透明度计算\n```javascript\n// fallLength 为焦距\nlet scale = fallLength/ (fallLength - this.z),\n\t  opa = (this.z + radius) / (2 * radius);\n// 每个标签添加样式\nthis.element.style.cssText = `color: rgb(\n\t${parseInt(Math.random() * 255)}, \n\t${parseInt(Math.random() * 255)}, \n\t${parseInt(Math.random() * 255)});\n\tfont-size: ${parseInt(15 * scale)}px;\n\topacity: ${opa + 0.5};\n\tz-index: ${parseInt(scale * 100)};\n\tleft: ${this.x + CX - this.element.offsetWidth / 2}px;\n\ttop: ${this.y + CY - this.element.offsetHeight / 2}px`;\n```\n\nfallLength 是焦距, 也是一个常量, scale 和 opacity 都要通过 z 轴来调整的. 这里也是从别人的代码里看到的, 应该也是公式吧; 后面就是调整字体大小/ 透明度, 标签位置的操作了. 以上计算就是`move()`函数中的内容. 现在球体已经出来了, 那么就该让他动起来了.\n\n3. 旋转算法\n为了让球体动起来, 我们需要知道下面这三个公式: \n\n![旋转公式](http://orf90agxq.bkt.clouddn.com/3d_tags/rotate.png)\n\n然后我们需要两个函数, x 轴选择和 y 轴旋转, 关键代码如下:\n```javascript\nconst rotateX = _ => {\n\t// angleX 是事先定义好的角度值\n\tlet sin = Math.sin(angleX),\n\t\tcos = Math.cos(angleX);\n\ttags.forEach(function () {\n\t\tlet y1 = this.y * cos - this.z * sin,\n\t\t\tz1 = this.z * cos + this.y * sin;\n\t\tthis.y = y1;\n\t\tthis.z = z1;\n\t})\n}\n\nconst rotateY = _ =>{\n\t// angleY 是事先定义好的角度值\n\tlet cos = Math.cos(angleY),\n     \tsin = Math.sin(angleY);\n\ttags.forEach(function () {\n\t\tlet x1 = this.x * cos - this.z * sin,\n\t\t\tz1 = this.z * cos + this.x * sin;\n\t\tthis.x = x1;\n\t\tthis.z = z1;\n\t})\n}\n```\n这里 angleX 和 angleY 为角度值, 用来控制标签云的旋转方向和速度. 角度的正负值控制旋转方向; 大小控制旋转速度.\n\n4. 鼠标控制\n这里就是最后一步了, 通过鼠标改变球体的旋转方向. 这里我做了一点点扩展几个输入框, 可以让用户自由填写云内容/ 数量及旋转速度, 下面直接看代码吧.\n\n```javascript\n// 来个事件监听\nconst addEvent = function (element, event, fn) {\n\t\tif (element.addEventListener) {\n\t\t\telement.addEventListener(event, fn, false)\n\t\t}else if (element.attachEvent) {\n\t\t\telement.attachEvent('on' + event, fn)\n\t\t}else {\n\t\t\telement['on' + event] = fn\n\t\t}\n\t};\n\n// 获取用户输入标签\naddEvent(content, 'blur', function () {\n\tif (!!this.value) {\n\t\tconsole.log(typeof this.value)\n\t\tdata = this.value.split(',');\n\t\tcreateLabel(data, num);\n\t\tlet item = document.querySelectorAll('.tag');\n\t\tsetBall(item)\n\t}\n});\n\n// 获取用户输入数量\naddEvent(numberLabel, 'blur', function () {\n\tif (+this.value < 0 || +this.value > 200) {\n\t\talert('请填写11 - 200之间的数值')\n\t}else {\n\t\tnum = +this.value;\n\t\tcreateLabel(data, num);\n\t\tlet item = document.querySelectorAll('.tag');\n\t\tsetBall(item)\n\t}\n})\n\n// 获取转速\naddEvent(speedLabel, 'blur', function () {\n\tif (+this.value < 0) {\n\t\talert('请输入大于0的数值')\n\t}else {\n\t\tspeed = +this.value;\n\t\tclearInterval(interval)\n\t\tanimate()\n\t}\n})\n\n// 鼠标移动\naddEvent(container, \"mousemove\", function (e) {\n\t// EX: 宽度的一半; CX: 左边距\n\t// EY: 高度的一半; CY: 上边距\n\tvar x = e.clientX - EX - CX;\n  \tvar y = e.clientY - EY - CY;\n  \tangleX = y * 0.0001;\n  \tangleY = x * 0.0001;\n});\n```\n到这里3D 云的流程差不多就走完了, 下面放一个完整的 js 部分代码吧.\n\n```javascript\n(function (global) {\n\tlet speedLabel = document.getElementById('speed'),\n\t\tnumberLabel = document.getElementById('number'),\n\t\tdata = [\"JavaScript\", \"Node.Js\", \"HTML\", \"CSS\", \"vue\", \"react\"\n\t\t\t\t, \"JQuery\", \"Webpack\", \"Babel\", \"ES6\", \"WebSocket\"],\n\t\tcontainer = document.querySelector('.container'),\n\t\tcontent = document.getElementById('content'),\n\t\tinterval,\n\t\tspeed = 100,\n\t\tnum = 120,\n\t\tradius = 300,\n\t\tfallLength = 500,\n\t\tangleX = Math.PI / 500,\n\t\tangleY = Math.PI / 500,\n\t\tCX = container.offsetWidth / 2,\n\t\tCY = container.offsetHeight / 2,\n\t\tEX = container.offsetLeft,\n\t\tEY = container.offsetTop;\n\n\n\t// 创建标签\n\tconst createLabel = (data, num) => {\n\t\tlet html = '', index;\n\t\tfor (let i = 0; i < num; i++) {\n\t\t\tindex = Math.floor(Math.random() * data.length);\n\t\t\thtml += `<label class='tag'>${data[index]}</label>`;\n\t\t}\n\t\tcontainer.innerHTML = html;\n\t};\n\n\t// 事件监听\n\tconst addEvent = function (element, event, fn) {\n\t\tif (element.addEventListener) {\n\t\t\telement.addEventListener(event, fn, false)\n\t\t}else if (element.attachEvent) {\n\t\t\telement.attachEvent('on' + event, fn)\n\t\t}else {\n\t\t\telement['on' + event] = fn\n\t\t}\n\t};\n\n\t// 获取用户输入标签\n\taddEvent(content, 'blur', function () {\n\t\tif (!!this.value) {\n\t\t\tconsole.log(typeof this.value)\n\t\t\tdata = this.value.split(',');\n\t\t\tcreateLabel(data, num);\n\t\t\tlet item = document.querySelectorAll('.tag');\n\t\t\tsetBall(item)\n\t\t}\n\t});\n\n\t// 获取用户输入数量\n\taddEvent(numberLabel, 'blur', function () {\n\t\tif (+this.value < 0 || +this.value > 200) {\n\t\t\talert('请填写11 - 200之间的数值')\n\t\t}else {\n\t\t\tnum = +this.value;\n\t\t\tcreateLabel(data, num);\n\t\t\tlet item = document.querySelectorAll('.tag');\n\t\t\tsetBall(item)\n\t\t}\n\t})\n\n\t// 获取转速\n\taddEvent(speedLabel, 'blur', function () {\n\t\tif (+this.value < 0) {\n\t\t\talert('请输入大于0的数值')\n\t\t}else {\n\t\t\tspeed = +this.value;\n\t\t\tclearInterval(interval)\n\t\t\tanimate()\n\t\t}\n\t})\n\n\tlet tags = [];\n\n\t// setBall\n\tconst setBall = _ => {\n\t\tlet tagLabel = document.querySelectorAll('.tag');\n\t\tfor (let i = 0; i < tagLabel.length; i++) {\n\t\t\tlet k = (2 * (i + 1) - 1) / tagLabel.length - 1,\n\t\t\t\ta = Math.acos(k), // 反余弦\n\t\t\t\tb = a * Math.sqrt(tagLabel.length * Math.PI), // 平方根\n\t\t\t\tx = radius * Math.sin(a) * Math.cos(b),\n\t\t\t\ty = radius * Math.sin(a) * Math.sin(b),\n\t\t\t\tz = radius * Math.cos(a);\n\n\t\t\tlet t = new tag(tagLabel[i], x, y, z);\n\t\t\ttags.push(t);\n\t\t\tt.move()\n\t\t}\n\t};\n\n\tArray.prototype.forEach = function (callback) {\n        for(let i = 0; i < this.length; i++) {\n            callback.call(this[i]);\n        }\n    }\n\n\n\n\tfunction tag (el, x, y, z) {\n\n\t\tthis.element = el;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t}\n\n\ttag.prototype = {\n\t\tmove: function () {\n\t\t\tlet scale = fallLength/ (fallLength - this.z),\n\t\t\t\topa = (this.z + radius) / (2 * radius);\n\t\t\tthis.element.style.cssText = `color: rgb(${parseInt(Math.random() * 255)}, \n\t\t\t\t${parseInt(Math.random() * 255)}, ${parseInt(Math.random() * 255)});\n\t\t\t\tfont-size: ${parseInt(15 * scale)}px;\n\t\t\t\topacity: ${opa + 0.5};\n\t\t\t\tz-index: ${parseInt(scale * 100)};\n\t\t\t\tleft: ${this.x + CX - this.element.offsetWidth / 2}px;\n\t\t\t\ttop: ${this.y + CY - this.element.offsetHeight / 2}px`;\n\t\t}\n\t}\n\n\tconst animate = _ => {\n\t\tinterval = setInterval(function () {\n\t\t\trotateX();\n\t\t\trotateY();\n\t\t\ttags.forEach(function () {\n\t\t\t\tthis.move()\n\t\t\t})\n\t\t}, speed)\n\t};\n\n\tconst rotateX = _ => {\n\t\tlet sin = Math.sin(angleX),\n\t\t\tcos = Math.cos(angleX);\n\t\ttags.forEach(function () {\n\t\t\tlet y1 = this.y * cos - this.z * sin,\n\t\t\t\tz1 = this.z * cos + this.y * sin;\n\t\t\tthis.y = y1;\n\t\t\tthis.z = z1;\n\t\t})\n\t}\n\n\tconst rotateY = _ =>{\n\t\tvar cos = Math.cos(angleY),\n        \tsin = Math.sin(angleY);\n        tags.forEach(function () {\n            var x1 = this.x * cos - this.z * sin;\n            var z1 = this.z * cos + this.x * sin;\n            this.x = x1;\n            this.z = z1;\n        })\n\t}\n\n\t// 鼠标移动\n\taddEvent(container, \"mousemove\", function (e) {\n        var x = e.clientX - EX - CX;\n        var y = e.clientY - EY - CY;\n        angleX = y * 0.0001;\n        angleY = x * 0.0001;\n    });\n\n\t// 初始化\n\tcreateLabel(data, num);\n\tvar tagLabel = document.querySelectorAll('.tag');\n\tsetBall(tagLabel);\n\tanimate()\n})(window)\n```\n\nCreated on 17-10-8 by Cara\n[在线预览 demo](https://caraws.github.io/IFE/IFE2017/3d-tags/index.html)\n","slug":"3D-Tags","published":1,"updated":"2018-05-05T09:23:03.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolrx0000klu0j8v00hdr","content":"<p>3D 标签云<br>练习canvas的3D效果,  球体算法, 正好IFE 的项目有就记录一下咯.</p>\n<h3 id=\"大概思路\"><a href=\"#大概思路\" class=\"headerlink\" title=\"大概思路\"></a>大概思路</h3><p>首先3D云其实就是一个球体, 在这个球体上平均分布各个点, 再把这些点<br>的坐标赋给标签,计算一下 z 轴的大小, 最后通过改变字体的大小/ 透明度<br>就可以模拟出立体的效果啦.</p>\n<h3 id=\"相关的一些公式及说明\"><a href=\"#相关的一些公式及说明\" class=\"headerlink\" title=\"相关的一些公式及说明\"></a>相关的一些公式及说明</h3><ol>\n<li>球体 x/ y/ z 轴的坐标点<br>已知半径 R 和球心, 方便起见一般都以坐标轴的原点作为球心. 有如下三个方程式:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = R * sinθ * cosø</span><br><span class=\"line\">y = R * sinθ * sinø</span><br><span class=\"line\">z = R * cosθ</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其中θ 和 ø 可以去随机数, 来获取圆上的随机点坐标. 但是3D 云的坐标点是需要均匀分配的坐标点, 所以光是去随机点是不够的. 所以又有了下面的公式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index 为当前索引, length 为标签长度</span></span><br><span class=\"line\"><span class=\"comment\">// 这段我也不懂原理是什么, 在别人的代码里看见的...</span></span><br><span class=\"line\">θ = acos((<span class=\"number\">2</span> * (index + <span class=\"number\">1</span>) - <span class=\"number\">1</span>) / length - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// n 取 Math.PI</span></span><br><span class=\"line\">ø = θ * sqrt(length * n)</span><br></pre></td></tr></table></figure>\n<h4 id=\"关键代码\"><a href=\"#关键代码\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setBall = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 标签</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> tagLabel = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.tag'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>, len = tagLabel.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> k = (<span class=\"number\">2</span> * (i + <span class=\"number\">1</span>) - <span class=\"number\">1</span>) / len - <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\ta = acos(k), <span class=\"comment\">// 上述θ </span></span><br><span class=\"line\">\t\t\tb = a * sqrt(len * <span class=\"built_in\">Math</span>.PI), <span class=\"comment\">// 上述ø</span></span><br><span class=\"line\">\t\t\tx = radius * <span class=\"built_in\">Math</span>.sin(a) * <span class=\"built_in\">Math</span>.cos(b), </span><br><span class=\"line\">\t\t\ty = radius * <span class=\"built_in\">Math</span>.sin(a) * <span class=\"built_in\">Math</span>.sin(b),</span><br><span class=\"line\">\t\t\tz = radius * <span class=\"built_in\">Math</span>.cos(a);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 让球体动起来, 我们先把方法放在这儿</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> t = <span class=\"keyword\">new</span> tag(tagLabel[i], x, y, z);</span><br><span class=\"line\">\t\t\ttags.push(t);</span><br><span class=\"line\">\t\t\tt.move()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就可以取得球体所需的平均坐标点, 接下来我们就需要去操作 DOM 每个标签了.</p>\n<ol start=\"2\">\n<li>标签字体及透明度计算<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fallLength 为焦距</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> scale = fallLength/ (fallLength - <span class=\"keyword\">this</span>.z),</span><br><span class=\"line\">\t  opa = (<span class=\"keyword\">this</span>.z + radius) / (<span class=\"number\">2</span> * radius);</span><br><span class=\"line\"><span class=\"comment\">// 每个标签添加样式</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.element.style.cssText = <span class=\"string\">`color: rgb(</span></span><br><span class=\"line\"><span class=\"string\">\t<span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">255</span>)&#125;</span>, </span></span><br><span class=\"line\"><span class=\"string\">\t<span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">255</span>)&#125;</span>, </span></span><br><span class=\"line\"><span class=\"string\">\t<span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">255</span>)&#125;</span>);</span></span><br><span class=\"line\"><span class=\"string\">\tfont-size: <span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"number\">15</span> * scale)&#125;</span>px;</span></span><br><span class=\"line\"><span class=\"string\">\topacity: <span class=\"subst\">$&#123;opa + <span class=\"number\">0.5</span>&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">\tz-index: <span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(scale * <span class=\"number\">100</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">\tleft: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.x + CX - <span class=\"keyword\">this</span>.element.offsetWidth <span class=\"regexp\">/ 2&#125;px;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">\ttop: $&#123;this.y + CY - this.element.offsetHeight /</span> <span class=\"number\">2</span>&#125;</span>px`</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>fallLength 是焦距, 也是一个常量, scale 和 opacity 都要通过 z 轴来调整的. 这里也是从别人的代码里看到的, 应该也是公式吧; 后面就是调整字体大小/ 透明度, 标签位置的操作了. 以上计算就是<code>move()</code>函数中的内容. 现在球体已经出来了, 那么就该让他动起来了.</p>\n<ol start=\"3\">\n<li>旋转算法<br>为了让球体动起来, 我们需要知道下面这三个公式: </li>\n</ol>\n<p><img src=\"http://orf90agxq.bkt.clouddn.com/3d_tags/rotate.png\" alt=\"旋转公式\"></p>\n<p>然后我们需要两个函数, x 轴选择和 y 轴旋转, 关键代码如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rotateX = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// angleX 是事先定义好的角度值</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sin = <span class=\"built_in\">Math</span>.sin(angleX),</span><br><span class=\"line\">\t\tcos = <span class=\"built_in\">Math</span>.cos(angleX);</span><br><span class=\"line\">\ttags.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> y1 = <span class=\"keyword\">this</span>.y * cos - <span class=\"keyword\">this</span>.z * sin,</span><br><span class=\"line\">\t\t\tz1 = <span class=\"keyword\">this</span>.z * cos + <span class=\"keyword\">this</span>.y * sin;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.z = z1;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rotateY = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// angleY 是事先定义好的角度值</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> cos = <span class=\"built_in\">Math</span>.cos(angleY),</span><br><span class=\"line\">     \tsin = <span class=\"built_in\">Math</span>.sin(angleY);</span><br><span class=\"line\">\ttags.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> x1 = <span class=\"keyword\">this</span>.x * cos - <span class=\"keyword\">this</span>.z * sin,</span><br><span class=\"line\">\t\t\tz1 = <span class=\"keyword\">this</span>.z * cos + <span class=\"keyword\">this</span>.x * sin;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.z = z1;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里 angleX 和 angleY 为角度值, 用来控制标签云的旋转方向和速度. 角度的正负值控制旋转方向; 大小控制旋转速度.</p>\n<ol start=\"4\">\n<li>鼠标控制<br>这里就是最后一步了, 通过鼠标改变球体的旋转方向. 这里我做了一点点扩展几个输入框, 可以让用户自由填写云内容/ 数量及旋转速度, 下面直接看代码吧.</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 来个事件监听</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, event, fn</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">\t\t\telement.addEventListener(event, fn, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">\t\t\telement.attachEvent(<span class=\"string\">'on'</span> + event, fn)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\telement[<span class=\"string\">'on'</span> + event] = fn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取用户输入标签</span></span><br><span class=\"line\">addEvent(content, <span class=\"string\">'blur'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!!<span class=\"keyword\">this</span>.value) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">\t\tdata = <span class=\"keyword\">this</span>.value.split(<span class=\"string\">','</span>);</span><br><span class=\"line\">\t\tcreateLabel(data, num);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> item = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.tag'</span>);</span><br><span class=\"line\">\t\tsetBall(item)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取用户输入数量</span></span><br><span class=\"line\">addEvent(numberLabel, <span class=\"string\">'blur'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (+<span class=\"keyword\">this</span>.value &lt; <span class=\"number\">0</span> || +<span class=\"keyword\">this</span>.value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">'请填写11 - 200之间的数值'</span>)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tnum = +<span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">\t\tcreateLabel(data, num);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> item = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.tag'</span>);</span><br><span class=\"line\">\t\tsetBall(item)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取转速</span></span><br><span class=\"line\">addEvent(speedLabel, <span class=\"string\">'blur'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (+<span class=\"keyword\">this</span>.value &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">'请输入大于0的数值'</span>)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tspeed = +<span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">\t\tclearInterval(interval)</span><br><span class=\"line\">\t\tanimate()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 鼠标移动</span></span><br><span class=\"line\">addEvent(container, <span class=\"string\">\"mousemove\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// EX: 宽度的一半; CX: 左边距</span></span><br><span class=\"line\">\t<span class=\"comment\">// EY: 高度的一半; CY: 上边距</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = e.clientX - EX - CX;</span><br><span class=\"line\">  \t<span class=\"keyword\">var</span> y = e.clientY - EY - CY;</span><br><span class=\"line\">  \tangleX = y * <span class=\"number\">0.0001</span>;</span><br><span class=\"line\">  \tangleY = x * <span class=\"number\">0.0001</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>到这里3D 云的流程差不多就走完了, 下面放一个完整的 js 部分代码吧.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">global</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> speedLabel = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'speed'</span>),</span><br><span class=\"line\">\t\tnumberLabel = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'number'</span>),</span><br><span class=\"line\">\t\tdata = [<span class=\"string\">\"JavaScript\"</span>, <span class=\"string\">\"Node.Js\"</span>, <span class=\"string\">\"HTML\"</span>, <span class=\"string\">\"CSS\"</span>, <span class=\"string\">\"vue\"</span>, <span class=\"string\">\"react\"</span></span><br><span class=\"line\">\t\t\t\t, <span class=\"string\">\"JQuery\"</span>, <span class=\"string\">\"Webpack\"</span>, <span class=\"string\">\"Babel\"</span>, <span class=\"string\">\"ES6\"</span>, <span class=\"string\">\"WebSocket\"</span>],</span><br><span class=\"line\">\t\tcontainer = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container'</span>),</span><br><span class=\"line\">\t\tcontent = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'content'</span>),</span><br><span class=\"line\">\t\tinterval,</span><br><span class=\"line\">\t\tspeed = <span class=\"number\">100</span>,</span><br><span class=\"line\">\t\tnum = <span class=\"number\">120</span>,</span><br><span class=\"line\">\t\tradius = <span class=\"number\">300</span>,</span><br><span class=\"line\">\t\tfallLength = <span class=\"number\">500</span>,</span><br><span class=\"line\">\t\tangleX = <span class=\"built_in\">Math</span>.PI / <span class=\"number\">500</span>,</span><br><span class=\"line\">\t\tangleY = <span class=\"built_in\">Math</span>.PI / <span class=\"number\">500</span>,</span><br><span class=\"line\">\t\tCX = container.offsetWidth / <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\tCY = container.offsetHeight / <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\tEX = container.offsetLeft,</span><br><span class=\"line\">\t\tEY = container.offsetTop;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建标签</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> createLabel = <span class=\"function\">(<span class=\"params\">data, num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> html = <span class=\"string\">''</span>, index;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">\t\t\tindex = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * data.length);</span><br><span class=\"line\">\t\t\thtml += <span class=\"string\">`&lt;label class='tag'&gt;<span class=\"subst\">$&#123;data[index]&#125;</span>&lt;/label&gt;`</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcontainer.innerHTML = html;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 事件监听</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, event, fn</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">\t\t\telement.addEventListener(event, fn, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">\t\t\telement.attachEvent(<span class=\"string\">'on'</span> + event, fn)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\telement[<span class=\"string\">'on'</span> + event] = fn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取用户输入标签</span></span><br><span class=\"line\">\taddEvent(content, <span class=\"string\">'blur'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!!<span class=\"keyword\">this</span>.value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">\t\t\tdata = <span class=\"keyword\">this</span>.value.split(<span class=\"string\">','</span>);</span><br><span class=\"line\">\t\t\tcreateLabel(data, num);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> item = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.tag'</span>);</span><br><span class=\"line\">\t\t\tsetBall(item)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取用户输入数量</span></span><br><span class=\"line\">\taddEvent(numberLabel, <span class=\"string\">'blur'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (+<span class=\"keyword\">this</span>.value &lt; <span class=\"number\">0</span> || +<span class=\"keyword\">this</span>.value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">'请填写11 - 200之间的数值'</span>)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tnum = +<span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">\t\t\tcreateLabel(data, num);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> item = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.tag'</span>);</span><br><span class=\"line\">\t\t\tsetBall(item)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取转速</span></span><br><span class=\"line\">\taddEvent(speedLabel, <span class=\"string\">'blur'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (+<span class=\"keyword\">this</span>.value &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">'请输入大于0的数值'</span>)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tspeed = +<span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">\t\t\tclearInterval(interval)</span><br><span class=\"line\">\t\t\tanimate()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> tags = [];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// setBall</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> setBall = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> tagLabel = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.tag'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; tagLabel.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> k = (<span class=\"number\">2</span> * (i + <span class=\"number\">1</span>) - <span class=\"number\">1</span>) / tagLabel.length - <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\ta = <span class=\"built_in\">Math</span>.acos(k), <span class=\"comment\">// 反余弦</span></span><br><span class=\"line\">\t\t\t\tb = a * <span class=\"built_in\">Math</span>.sqrt(tagLabel.length * <span class=\"built_in\">Math</span>.PI), <span class=\"comment\">// 平方根</span></span><br><span class=\"line\">\t\t\t\tx = radius * <span class=\"built_in\">Math</span>.sin(a) * <span class=\"built_in\">Math</span>.cos(b),</span><br><span class=\"line\">\t\t\t\ty = radius * <span class=\"built_in\">Math</span>.sin(a) * <span class=\"built_in\">Math</span>.sin(b),</span><br><span class=\"line\">\t\t\t\tz = radius * <span class=\"built_in\">Math</span>.cos(a);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> t = <span class=\"keyword\">new</span> tag(tagLabel[i], x, y, z);</span><br><span class=\"line\">\t\t\ttags.push(t);</span><br><span class=\"line\">\t\t\tt.move()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Array</span>.prototype.forEach = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">            callback.call(<span class=\"keyword\">this</span>[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tag</span> (<span class=\"params\">el, x, y, z</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.element = el;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.z = z;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttag.prototype = &#123;</span><br><span class=\"line\">\t\tmove: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> scale = fallLength/ (fallLength - <span class=\"keyword\">this</span>.z),</span><br><span class=\"line\">\t\t\t\topa = (<span class=\"keyword\">this</span>.z + radius) / (<span class=\"number\">2</span> * radius);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.element.style.cssText = <span class=\"string\">`color: rgb(<span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">255</span>)&#125;</span>, </span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t<span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">255</span>)&#125;</span>, <span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">255</span>)&#125;</span>);</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\tfont-size: <span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"number\">15</span> * scale)&#125;</span>px;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\topacity: <span class=\"subst\">$&#123;opa + <span class=\"number\">0.5</span>&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\tz-index: <span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(scale * <span class=\"number\">100</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\tleft: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.x + CX - <span class=\"keyword\">this</span>.element.offsetWidth <span class=\"regexp\">/ 2&#125;px;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">\t\t\t\ttop: $&#123;this.y + CY - this.element.offsetHeight /</span> <span class=\"number\">2</span>&#125;</span>px`</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> animate = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\tinterval = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\trotateX();</span><br><span class=\"line\">\t\t\trotateY();</span><br><span class=\"line\">\t\t\ttags.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.move()</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;, speed)</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> rotateX = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> sin = <span class=\"built_in\">Math</span>.sin(angleX),</span><br><span class=\"line\">\t\t\tcos = <span class=\"built_in\">Math</span>.cos(angleX);</span><br><span class=\"line\">\t\ttags.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> y1 = <span class=\"keyword\">this</span>.y * cos - <span class=\"keyword\">this</span>.z * sin,</span><br><span class=\"line\">\t\t\t\tz1 = <span class=\"keyword\">this</span>.z * cos + <span class=\"keyword\">this</span>.y * sin;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.y = y1;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.z = z1;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> rotateY = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> cos = <span class=\"built_in\">Math</span>.cos(angleY),</span><br><span class=\"line\">        \tsin = <span class=\"built_in\">Math</span>.sin(angleY);</span><br><span class=\"line\">        tags.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x1 = <span class=\"keyword\">this</span>.x * cos - <span class=\"keyword\">this</span>.z * sin;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> z1 = <span class=\"keyword\">this</span>.z * cos + <span class=\"keyword\">this</span>.x * sin;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.x = x1;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.z = z1;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 鼠标移动</span></span><br><span class=\"line\">\taddEvent(container, <span class=\"string\">\"mousemove\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> x = e.clientX - EX - CX;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> y = e.clientY - EY - CY;</span><br><span class=\"line\">        angleX = y * <span class=\"number\">0.0001</span>;</span><br><span class=\"line\">        angleY = x * <span class=\"number\">0.0001</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化</span></span><br><span class=\"line\">\tcreateLabel(data, num);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> tagLabel = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.tag'</span>);</span><br><span class=\"line\">\tsetBall(tagLabel);</span><br><span class=\"line\">\tanimate()</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>)</span><br></pre></td></tr></table></figure>\n<p>Created on 17-10-8 by Cara<br><a href=\"https://caraws.github.io/IFE/IFE2017/3d-tags/index.html\" target=\"_blank\" rel=\"noopener\">在线预览 demo</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>3D 标签云<br>练习canvas的3D效果,  球体算法, 正好IFE 的项目有就记录一下咯.</p>\n<h3 id=\"大概思路\"><a href=\"#大概思路\" class=\"headerlink\" title=\"大概思路\"></a>大概思路</h3><p>首先3D云其实就是一个球体, 在这个球体上平均分布各个点, 再把这些点<br>的坐标赋给标签,计算一下 z 轴的大小, 最后通过改变字体的大小/ 透明度<br>就可以模拟出立体的效果啦.</p>\n<h3 id=\"相关的一些公式及说明\"><a href=\"#相关的一些公式及说明\" class=\"headerlink\" title=\"相关的一些公式及说明\"></a>相关的一些公式及说明</h3><ol>\n<li>球体 x/ y/ z 轴的坐标点<br>已知半径 R 和球心, 方便起见一般都以坐标轴的原点作为球心. 有如下三个方程式:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = R * sinθ * cosø</span><br><span class=\"line\">y = R * sinθ * sinø</span><br><span class=\"line\">z = R * cosθ</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其中θ 和 ø 可以去随机数, 来获取圆上的随机点坐标. 但是3D 云的坐标点是需要均匀分配的坐标点, 所以光是去随机点是不够的. 所以又有了下面的公式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index 为当前索引, length 为标签长度</span></span><br><span class=\"line\"><span class=\"comment\">// 这段我也不懂原理是什么, 在别人的代码里看见的...</span></span><br><span class=\"line\">θ = acos((<span class=\"number\">2</span> * (index + <span class=\"number\">1</span>) - <span class=\"number\">1</span>) / length - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// n 取 Math.PI</span></span><br><span class=\"line\">ø = θ * sqrt(length * n)</span><br></pre></td></tr></table></figure>\n<h4 id=\"关键代码\"><a href=\"#关键代码\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setBall = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 标签</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> tagLabel = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.tag'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>, len = tagLabel.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> k = (<span class=\"number\">2</span> * (i + <span class=\"number\">1</span>) - <span class=\"number\">1</span>) / len - <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\ta = acos(k), <span class=\"comment\">// 上述θ </span></span><br><span class=\"line\">\t\t\tb = a * sqrt(len * <span class=\"built_in\">Math</span>.PI), <span class=\"comment\">// 上述ø</span></span><br><span class=\"line\">\t\t\tx = radius * <span class=\"built_in\">Math</span>.sin(a) * <span class=\"built_in\">Math</span>.cos(b), </span><br><span class=\"line\">\t\t\ty = radius * <span class=\"built_in\">Math</span>.sin(a) * <span class=\"built_in\">Math</span>.sin(b),</span><br><span class=\"line\">\t\t\tz = radius * <span class=\"built_in\">Math</span>.cos(a);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 让球体动起来, 我们先把方法放在这儿</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> t = <span class=\"keyword\">new</span> tag(tagLabel[i], x, y, z);</span><br><span class=\"line\">\t\t\ttags.push(t);</span><br><span class=\"line\">\t\t\tt.move()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就可以取得球体所需的平均坐标点, 接下来我们就需要去操作 DOM 每个标签了.</p>\n<ol start=\"2\">\n<li>标签字体及透明度计算<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fallLength 为焦距</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> scale = fallLength/ (fallLength - <span class=\"keyword\">this</span>.z),</span><br><span class=\"line\">\t  opa = (<span class=\"keyword\">this</span>.z + radius) / (<span class=\"number\">2</span> * radius);</span><br><span class=\"line\"><span class=\"comment\">// 每个标签添加样式</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.element.style.cssText = <span class=\"string\">`color: rgb(</span></span><br><span class=\"line\"><span class=\"string\">\t<span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">255</span>)&#125;</span>, </span></span><br><span class=\"line\"><span class=\"string\">\t<span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">255</span>)&#125;</span>, </span></span><br><span class=\"line\"><span class=\"string\">\t<span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">255</span>)&#125;</span>);</span></span><br><span class=\"line\"><span class=\"string\">\tfont-size: <span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"number\">15</span> * scale)&#125;</span>px;</span></span><br><span class=\"line\"><span class=\"string\">\topacity: <span class=\"subst\">$&#123;opa + <span class=\"number\">0.5</span>&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">\tz-index: <span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(scale * <span class=\"number\">100</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">\tleft: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.x + CX - <span class=\"keyword\">this</span>.element.offsetWidth <span class=\"regexp\">/ 2&#125;px;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">\ttop: $&#123;this.y + CY - this.element.offsetHeight /</span> <span class=\"number\">2</span>&#125;</span>px`</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>fallLength 是焦距, 也是一个常量, scale 和 opacity 都要通过 z 轴来调整的. 这里也是从别人的代码里看到的, 应该也是公式吧; 后面就是调整字体大小/ 透明度, 标签位置的操作了. 以上计算就是<code>move()</code>函数中的内容. 现在球体已经出来了, 那么就该让他动起来了.</p>\n<ol start=\"3\">\n<li>旋转算法<br>为了让球体动起来, 我们需要知道下面这三个公式: </li>\n</ol>\n<p><img src=\"http://orf90agxq.bkt.clouddn.com/3d_tags/rotate.png\" alt=\"旋转公式\"></p>\n<p>然后我们需要两个函数, x 轴选择和 y 轴旋转, 关键代码如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rotateX = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// angleX 是事先定义好的角度值</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sin = <span class=\"built_in\">Math</span>.sin(angleX),</span><br><span class=\"line\">\t\tcos = <span class=\"built_in\">Math</span>.cos(angleX);</span><br><span class=\"line\">\ttags.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> y1 = <span class=\"keyword\">this</span>.y * cos - <span class=\"keyword\">this</span>.z * sin,</span><br><span class=\"line\">\t\t\tz1 = <span class=\"keyword\">this</span>.z * cos + <span class=\"keyword\">this</span>.y * sin;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.z = z1;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rotateY = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// angleY 是事先定义好的角度值</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> cos = <span class=\"built_in\">Math</span>.cos(angleY),</span><br><span class=\"line\">     \tsin = <span class=\"built_in\">Math</span>.sin(angleY);</span><br><span class=\"line\">\ttags.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> x1 = <span class=\"keyword\">this</span>.x * cos - <span class=\"keyword\">this</span>.z * sin,</span><br><span class=\"line\">\t\t\tz1 = <span class=\"keyword\">this</span>.z * cos + <span class=\"keyword\">this</span>.x * sin;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.z = z1;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里 angleX 和 angleY 为角度值, 用来控制标签云的旋转方向和速度. 角度的正负值控制旋转方向; 大小控制旋转速度.</p>\n<ol start=\"4\">\n<li>鼠标控制<br>这里就是最后一步了, 通过鼠标改变球体的旋转方向. 这里我做了一点点扩展几个输入框, 可以让用户自由填写云内容/ 数量及旋转速度, 下面直接看代码吧.</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 来个事件监听</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, event, fn</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">\t\t\telement.addEventListener(event, fn, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">\t\t\telement.attachEvent(<span class=\"string\">'on'</span> + event, fn)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\telement[<span class=\"string\">'on'</span> + event] = fn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取用户输入标签</span></span><br><span class=\"line\">addEvent(content, <span class=\"string\">'blur'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!!<span class=\"keyword\">this</span>.value) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">\t\tdata = <span class=\"keyword\">this</span>.value.split(<span class=\"string\">','</span>);</span><br><span class=\"line\">\t\tcreateLabel(data, num);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> item = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.tag'</span>);</span><br><span class=\"line\">\t\tsetBall(item)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取用户输入数量</span></span><br><span class=\"line\">addEvent(numberLabel, <span class=\"string\">'blur'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (+<span class=\"keyword\">this</span>.value &lt; <span class=\"number\">0</span> || +<span class=\"keyword\">this</span>.value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">'请填写11 - 200之间的数值'</span>)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tnum = +<span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">\t\tcreateLabel(data, num);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> item = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.tag'</span>);</span><br><span class=\"line\">\t\tsetBall(item)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取转速</span></span><br><span class=\"line\">addEvent(speedLabel, <span class=\"string\">'blur'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (+<span class=\"keyword\">this</span>.value &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">'请输入大于0的数值'</span>)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tspeed = +<span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">\t\tclearInterval(interval)</span><br><span class=\"line\">\t\tanimate()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 鼠标移动</span></span><br><span class=\"line\">addEvent(container, <span class=\"string\">\"mousemove\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// EX: 宽度的一半; CX: 左边距</span></span><br><span class=\"line\">\t<span class=\"comment\">// EY: 高度的一半; CY: 上边距</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = e.clientX - EX - CX;</span><br><span class=\"line\">  \t<span class=\"keyword\">var</span> y = e.clientY - EY - CY;</span><br><span class=\"line\">  \tangleX = y * <span class=\"number\">0.0001</span>;</span><br><span class=\"line\">  \tangleY = x * <span class=\"number\">0.0001</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>到这里3D 云的流程差不多就走完了, 下面放一个完整的 js 部分代码吧.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">global</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> speedLabel = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'speed'</span>),</span><br><span class=\"line\">\t\tnumberLabel = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'number'</span>),</span><br><span class=\"line\">\t\tdata = [<span class=\"string\">\"JavaScript\"</span>, <span class=\"string\">\"Node.Js\"</span>, <span class=\"string\">\"HTML\"</span>, <span class=\"string\">\"CSS\"</span>, <span class=\"string\">\"vue\"</span>, <span class=\"string\">\"react\"</span></span><br><span class=\"line\">\t\t\t\t, <span class=\"string\">\"JQuery\"</span>, <span class=\"string\">\"Webpack\"</span>, <span class=\"string\">\"Babel\"</span>, <span class=\"string\">\"ES6\"</span>, <span class=\"string\">\"WebSocket\"</span>],</span><br><span class=\"line\">\t\tcontainer = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container'</span>),</span><br><span class=\"line\">\t\tcontent = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'content'</span>),</span><br><span class=\"line\">\t\tinterval,</span><br><span class=\"line\">\t\tspeed = <span class=\"number\">100</span>,</span><br><span class=\"line\">\t\tnum = <span class=\"number\">120</span>,</span><br><span class=\"line\">\t\tradius = <span class=\"number\">300</span>,</span><br><span class=\"line\">\t\tfallLength = <span class=\"number\">500</span>,</span><br><span class=\"line\">\t\tangleX = <span class=\"built_in\">Math</span>.PI / <span class=\"number\">500</span>,</span><br><span class=\"line\">\t\tangleY = <span class=\"built_in\">Math</span>.PI / <span class=\"number\">500</span>,</span><br><span class=\"line\">\t\tCX = container.offsetWidth / <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\tCY = container.offsetHeight / <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\tEX = container.offsetLeft,</span><br><span class=\"line\">\t\tEY = container.offsetTop;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建标签</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> createLabel = <span class=\"function\">(<span class=\"params\">data, num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> html = <span class=\"string\">''</span>, index;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">\t\t\tindex = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * data.length);</span><br><span class=\"line\">\t\t\thtml += <span class=\"string\">`&lt;label class='tag'&gt;<span class=\"subst\">$&#123;data[index]&#125;</span>&lt;/label&gt;`</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcontainer.innerHTML = html;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 事件监听</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, event, fn</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">\t\t\telement.addEventListener(event, fn, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">\t\t\telement.attachEvent(<span class=\"string\">'on'</span> + event, fn)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\telement[<span class=\"string\">'on'</span> + event] = fn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取用户输入标签</span></span><br><span class=\"line\">\taddEvent(content, <span class=\"string\">'blur'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!!<span class=\"keyword\">this</span>.value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">\t\t\tdata = <span class=\"keyword\">this</span>.value.split(<span class=\"string\">','</span>);</span><br><span class=\"line\">\t\t\tcreateLabel(data, num);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> item = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.tag'</span>);</span><br><span class=\"line\">\t\t\tsetBall(item)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取用户输入数量</span></span><br><span class=\"line\">\taddEvent(numberLabel, <span class=\"string\">'blur'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (+<span class=\"keyword\">this</span>.value &lt; <span class=\"number\">0</span> || +<span class=\"keyword\">this</span>.value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">'请填写11 - 200之间的数值'</span>)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tnum = +<span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">\t\t\tcreateLabel(data, num);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> item = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.tag'</span>);</span><br><span class=\"line\">\t\t\tsetBall(item)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取转速</span></span><br><span class=\"line\">\taddEvent(speedLabel, <span class=\"string\">'blur'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (+<span class=\"keyword\">this</span>.value &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">'请输入大于0的数值'</span>)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tspeed = +<span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">\t\t\tclearInterval(interval)</span><br><span class=\"line\">\t\t\tanimate()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> tags = [];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// setBall</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> setBall = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> tagLabel = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.tag'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; tagLabel.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> k = (<span class=\"number\">2</span> * (i + <span class=\"number\">1</span>) - <span class=\"number\">1</span>) / tagLabel.length - <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\ta = <span class=\"built_in\">Math</span>.acos(k), <span class=\"comment\">// 反余弦</span></span><br><span class=\"line\">\t\t\t\tb = a * <span class=\"built_in\">Math</span>.sqrt(tagLabel.length * <span class=\"built_in\">Math</span>.PI), <span class=\"comment\">// 平方根</span></span><br><span class=\"line\">\t\t\t\tx = radius * <span class=\"built_in\">Math</span>.sin(a) * <span class=\"built_in\">Math</span>.cos(b),</span><br><span class=\"line\">\t\t\t\ty = radius * <span class=\"built_in\">Math</span>.sin(a) * <span class=\"built_in\">Math</span>.sin(b),</span><br><span class=\"line\">\t\t\t\tz = radius * <span class=\"built_in\">Math</span>.cos(a);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> t = <span class=\"keyword\">new</span> tag(tagLabel[i], x, y, z);</span><br><span class=\"line\">\t\t\ttags.push(t);</span><br><span class=\"line\">\t\t\tt.move()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Array</span>.prototype.forEach = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">            callback.call(<span class=\"keyword\">this</span>[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tag</span> (<span class=\"params\">el, x, y, z</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.element = el;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.z = z;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttag.prototype = &#123;</span><br><span class=\"line\">\t\tmove: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> scale = fallLength/ (fallLength - <span class=\"keyword\">this</span>.z),</span><br><span class=\"line\">\t\t\t\topa = (<span class=\"keyword\">this</span>.z + radius) / (<span class=\"number\">2</span> * radius);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.element.style.cssText = <span class=\"string\">`color: rgb(<span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">255</span>)&#125;</span>, </span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t<span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">255</span>)&#125;</span>, <span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">255</span>)&#125;</span>);</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\tfont-size: <span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"number\">15</span> * scale)&#125;</span>px;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\topacity: <span class=\"subst\">$&#123;opa + <span class=\"number\">0.5</span>&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\tz-index: <span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(scale * <span class=\"number\">100</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\tleft: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.x + CX - <span class=\"keyword\">this</span>.element.offsetWidth <span class=\"regexp\">/ 2&#125;px;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">\t\t\t\ttop: $&#123;this.y + CY - this.element.offsetHeight /</span> <span class=\"number\">2</span>&#125;</span>px`</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> animate = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\tinterval = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\trotateX();</span><br><span class=\"line\">\t\t\trotateY();</span><br><span class=\"line\">\t\t\ttags.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.move()</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;, speed)</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> rotateX = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> sin = <span class=\"built_in\">Math</span>.sin(angleX),</span><br><span class=\"line\">\t\t\tcos = <span class=\"built_in\">Math</span>.cos(angleX);</span><br><span class=\"line\">\t\ttags.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> y1 = <span class=\"keyword\">this</span>.y * cos - <span class=\"keyword\">this</span>.z * sin,</span><br><span class=\"line\">\t\t\t\tz1 = <span class=\"keyword\">this</span>.z * cos + <span class=\"keyword\">this</span>.y * sin;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.y = y1;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.z = z1;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> rotateY = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> cos = <span class=\"built_in\">Math</span>.cos(angleY),</span><br><span class=\"line\">        \tsin = <span class=\"built_in\">Math</span>.sin(angleY);</span><br><span class=\"line\">        tags.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x1 = <span class=\"keyword\">this</span>.x * cos - <span class=\"keyword\">this</span>.z * sin;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> z1 = <span class=\"keyword\">this</span>.z * cos + <span class=\"keyword\">this</span>.x * sin;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.x = x1;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.z = z1;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 鼠标移动</span></span><br><span class=\"line\">\taddEvent(container, <span class=\"string\">\"mousemove\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> x = e.clientX - EX - CX;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> y = e.clientY - EY - CY;</span><br><span class=\"line\">        angleX = y * <span class=\"number\">0.0001</span>;</span><br><span class=\"line\">        angleY = x * <span class=\"number\">0.0001</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化</span></span><br><span class=\"line\">\tcreateLabel(data, num);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> tagLabel = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.tag'</span>);</span><br><span class=\"line\">\tsetBall(tagLabel);</span><br><span class=\"line\">\tanimate()</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>)</span><br></pre></td></tr></table></figure>\n<p>Created on 17-10-8 by Cara<br><a href=\"https://caraws.github.io/IFE/IFE2017/3d-tags/index.html\" target=\"_blank\" rel=\"noopener\">在线预览 demo</a></p>\n"},{"title":"Babel生态","date":"2018-04-09T09:55:20.000Z","categorles":["笔记📒"],"_content":"对于 babel 的使用, 一直停留在与 webpack 结合使用, 以及在 Vue 开发环境下脚手架又是开箱即用. 导致很多 babel 的包, 我都不清楚他们是干什么的. 比如 babel-register/ babel-runtime/ helpers/ 各种 presets 以及 transform-runtime 和 babel-polyfill 的区别, 所以总结一下.\n\n### babel-cli\n我理解为 babel 的 command 全家桶, 用于在命令行操作的. 里面包含了 `babel`/ `babel-external-helpers`/ `babel-node` 3个命令\n\n- babel: 用于编译代码\n- babel-external-helpers: 用于生成一些 halper 函数, 包含 babel 所有的 hepler 函数 (如: toArray 函数, jsx 转化函数). 这些函数实在 babel transform 的时候用, 都放在 `babel-helpers` 这个包中, 当这些 helpers 被用到就会被放置在生成代码的顶部. 但是当多个文件都用到了 helpers 函数就会产生冗余代码, 所以 babel 提供这个命令生成一个包含所有 helpers 的 js 文件用于直接引用.(然后可以通过 plugin 去检查全局时候存在这个模块, 存在就不定义)\n- babel-node: 主要是实现在 node 中写代码和执行脚本的能力, 可以直接运行 ES6代码. 比如直接在 node 中写 jsx, 通过这个就可以执行. 但是要把它编译成可执行的脚本还需要 `babel-register`\n\n安装\n`npm install --global babel-cli`\n\n用法\n```shell\nbabel example.js\n\n# 转码结果写入文件\nbabel example.js -o result.js\n\n# 整个目录转码\nbabel src -d lib\n\n# 生成 source map 文件\nbabel src -d lib -s\n```\n\n全局环境下 babel 无法支持不同版本的 babel, 所以安全的做法还是把 babel 装在项目中\n```shell\nnpm install --save-dev babel-cli\n```\n\npackage.json 改成:\n```json\n{\n  \"script\": \"babel src -d lib\"\n}\n```\n\n**babel-register**\n它的特点就是实时编译, 不会输出文件, 用来改写 `require` 命令为它加上钩子. `require` 进来的文件就会被转码, 但是它不会转码当前文件中的代码.\n\n安装\n```js\nnpm install --save-dev babel-register\n```\n\n使用\n```js\n// 必须先加载 register\nrequire('babel-register')\n// 然后 register 就会对 test.js 文件转码\nrequire('test.js')\n```\n\n> 由于 `babel-register` 是即时转码, 所以只适用于开发环境使用.\n\n### babel-core\n`babel-core` 可以说是 babel 最为核心的一个包, 可以把它看成一个编译器, babel 核心的 API 都在里面. 比如: transform 处理转码, 因为 ES6 的语法跟老语法不同, 所以先将我们的代码转换为 AST(抽象语法树), 然后分别做处理转化为 ES5. webpack 的 babel-loader 就是调用这些 API 完成转译的. [这里是详细的 API](https://babeljs.cn/docs/usage/api/)\n\n> 这里需要注意的是: `babel-core` 仅关注 code transform, 也就是说它只做语法上的转换, 比如箭头函数. 所以并不是什么都能用 babel 来转换的, 如果涉及到新的 API 就需要你用 polyfill 来转译, 比如 `Promise`.\n\n```js\n// 整块引入\nvar babel = require('babel-core')\n// 也可以选择某个 API 单独使用\nimport { transform } from 'babel-core'\n```\n\n主要的 API:\n\n**babel.transform(code: string, options?: Object)**\n将传入的 code 做转换, 返回值为一个对象, 参数为: 生成的对象, source map 和 AST\n\n```js\nvar result = babel.transform(\"code();\", options);\nresult.code\nresult.map\nresult.ast\n```\n\n**babel.transformFile(filename: string, options?: Object, callback: Function)**\n异步转译文件中的所有内容\n\n```js\nbabel.transformFile('filename.js', options, function (err, result) {\n  result // { code, map, ast }\n})\n```\n\n**babel.transformFileSync(filename: string, options?: Object)**\n`babel.transformFile` 的同步版本, 返回值为 `filename` 文件中转译后的代码\n\n```js\nbabel.transformFileSync(filename, options) // { code, map, ast }\n```\n\n**babel.transformFromAst(ast: Object, code?: string, options?: Object)**\n反转译, 给一个 AST 转为 code\n\n```js\nconst code = 'if (true) return'\nconst ast = babylon.parse(code, { allowReturnOutsideFunction: true })\nconst { code, map, ast } = babel.transformFormAst(ast, code, options)\n```\n\n### babel-runtime\n[`babel-runtime`](https://babeljs.cn/docs/plugins/transform-runtime/) 这个包其实就是把 core-js 和 regenerator 组合起来供使用, 它和 `babel-polyfill` 的都是为了模拟 ES6 环境. 之前提到的 `babel-core` 只对语法进行转换, 但不支持 Promise, Set, Map, array.reduce, Array.form, genertor, async 这些新 API 的编译, 所以才会用到这两个东西.\n\n**core-js**: 主要实现了 Promise, Symbols, ES7提案等等的 polyfill, 包含了大部分的 JavaScript 最新标准的垫片.\n```js\n// 需要单个引用后再使用\nrequire('core-js/array/reduce')\n```\n\n**regenerator**: 主要实现 generator/yeild, async/await (不知道为啥 core-js 不把这两个一起实现了...)\n\n**helpers**: `babel-runtime` 里也有 helpers, 它里面的 helpers 相当于之前提到的 `babel-external-helpers` 生成的 helpers.js, 只不过把每个 helpers 函数都单独放到一个文件夹里而已. 这样配合 transform 的时候, 需要用到 helpers 函数就可以直接从 `babel-runtime` 中引用了.\n```js\nconst _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator')\n```\n\n区别: \n\n- [babel-polyfill](https://babeljs.cn/docs/usage/polyfill): 是通过全局对象和内置对象的 prototype 上添加方法来达到目的, 所以一旦引入 `babel-polyfill` 就会污染全局环境.\n- babel-runtime: `babel-runtime` 是一个模块, 所以它不会污染全局环境和内置对象的原型. 它的做法引入需要的 helper 函数(类似: `const Promise = require('babel-runtime/core-js/promise')` 来引入 Promise).\n\n优缺点:\n\n- babel-poly-fill: 引入一劳永逸, 但是污染环境.\n- babel-runtime: \n    1. 手动引入不方便\n    2. 直接在代码中引入 helper 函数意味着不能共享, 最终打包出来会有很多冗余代码(引入的都是全量的 polyfill). \n    \n所以要配合 `babel-plugin-transform-runtime` (很多地方都是把 `babel-runtime` 和 `babel-plugin-transform-runtime` 统称为 transform-runtime, 因为它俩得合在一起才好用) 来达到按需引入 helper 避免重复打包和手动引入的痛苦, 它主要是做一层映射: 将 `babel-runtime` 内引用到的 core-js 或 regenerator.js 映射到具体对应的 helper. \n\n> 注意: `babel-runtime` 无法转码实例方法, 即内置对象原型上的方法, 只能通过 `babel-polyfill` 来转码. 比如:\n```js\nArray.prototype.find()\n'hello'.includes('h')\n```\n\n另外, 关于为什么 `babel-runtime` 是 dependencies 依赖, 因为他只是集合了 polyfill 的一个 library, 对应需要的 polyfill 都是要引入项目中, 并跟项目代码一起打包的.\n\n### babel-preset-env\n它能根据当前的运行环境, 自动确定你需要的 plugins 和 polyfills, babel 的配置官方推荐是写到 `.babelrc` 文件中, 以 `Vue-cli` 的 babel 配置为例.[详细参数设置及说明](https://babeljs.cn/docs/plugins/preset-env/)\n\n```json\n{\n  \"presets\": [\n    [\"env\", \n      { \n        \"modules\": false // 设置 ES6 模块转译的模式, 默认是 commonjs\n      }\n    ],\n    // 需要支持到哪个阶段的 JavaScript 版本\n    \"stage-2\"\n  ],\n  // 需要的插件\n  \"plugins\": [\n    \"transform-runtime\", // 虽然这里没有写 babel-runtime, 但是 transform-runtime 依赖于它, 所以还是要安装\n    \"transform-vue-jsx\"\n  ],\n  // 编译过程是否保留注释\n  \"comments\": false,\n  \"env\": {\n    \"test\": {\n      \"presets\": [\"env\", \"stage-2\"],\n      \"plugins\": [ \"istanbul\"]\n    }\n  }\n}\n```\n\n本来 `babel-preset-env` 中有一个 useBuiltIns 选项(默认值是 false), 就是它实现的根据运行环境并判断需要什么 polyfill, 达到按需引入而不是整个引入, 对于 `import 'babel-polyfill'` 就很棒了. 但是可以看到 vue-template 并没有使用这个选项, 这是因为   <a href='javascript:' title='我消不掉这个超链接😑'>babel-preset-env@1.x</a> 的版本没有办法很好消除未使用的 polyfill, 在2.x 版本下可以用 `usebuiltIns: 'usage'`达到目的.\n\n### 其他\nbabel 还有很多相关的东西没说到, 只挑了几个最重要的来说, 具体的 helpers/ plugins 都可以到[官方仓库](https://github.com/babel/babel/tree/master/packages)查看\n\n- [badylon](https://github.com/babel/babel/tree/master/packages/babylon): 词法解析器\n- [babel-traverse](https://github.com/babel/babel/tree/master/packages/babel-traverse): 用于遍历, 维护整个 AST 的状态\n- [babel-generator](https://github.com/babel/babel/tree/master/packages/babel-generator): 根据 AST 生成代码\n\n#### babel 的工作流程\n\n输入需要转码的代码 -> badylon 解析 -> 得到 AST -> \nbabel-traverse 遍历转译 -> 得到新的 AST -> \n最后 babel-generator 根据新的 AST 生成代码\n\n### 总结\n整个来说我觉得还是 `babel-runtime` 和 `babel-polyfill` 比较难区分, 其实两者的核心都在于 [core-js](https://github.com/zloirock/core-js#basic) 只是各有优缺点而已, 下面会再简要总结一下区别. 其他的话只需要知道每个东西是干啥的就行了.\n\n- babel-polyfill: 污染环境, 支持实例方法(如果只想引入一些特定的polyfill, 那就去 [core-js](https://github.com/zloirock/core-js#basic) 中找相应的方法自己手动 require 进来); \n- runtime: 按需引用,不支持实例方法.\n\nCreated on 2018-4-11 by Cara","source":"_posts/Babel.md","raw":"---\ntitle: Babel生态\ndate: 2018-04-09 17:55:20\ntags:\n- Babel\ncategorles:\n- 笔记📒\n---\n对于 babel 的使用, 一直停留在与 webpack 结合使用, 以及在 Vue 开发环境下脚手架又是开箱即用. 导致很多 babel 的包, 我都不清楚他们是干什么的. 比如 babel-register/ babel-runtime/ helpers/ 各种 presets 以及 transform-runtime 和 babel-polyfill 的区别, 所以总结一下.\n\n### babel-cli\n我理解为 babel 的 command 全家桶, 用于在命令行操作的. 里面包含了 `babel`/ `babel-external-helpers`/ `babel-node` 3个命令\n\n- babel: 用于编译代码\n- babel-external-helpers: 用于生成一些 halper 函数, 包含 babel 所有的 hepler 函数 (如: toArray 函数, jsx 转化函数). 这些函数实在 babel transform 的时候用, 都放在 `babel-helpers` 这个包中, 当这些 helpers 被用到就会被放置在生成代码的顶部. 但是当多个文件都用到了 helpers 函数就会产生冗余代码, 所以 babel 提供这个命令生成一个包含所有 helpers 的 js 文件用于直接引用.(然后可以通过 plugin 去检查全局时候存在这个模块, 存在就不定义)\n- babel-node: 主要是实现在 node 中写代码和执行脚本的能力, 可以直接运行 ES6代码. 比如直接在 node 中写 jsx, 通过这个就可以执行. 但是要把它编译成可执行的脚本还需要 `babel-register`\n\n安装\n`npm install --global babel-cli`\n\n用法\n```shell\nbabel example.js\n\n# 转码结果写入文件\nbabel example.js -o result.js\n\n# 整个目录转码\nbabel src -d lib\n\n# 生成 source map 文件\nbabel src -d lib -s\n```\n\n全局环境下 babel 无法支持不同版本的 babel, 所以安全的做法还是把 babel 装在项目中\n```shell\nnpm install --save-dev babel-cli\n```\n\npackage.json 改成:\n```json\n{\n  \"script\": \"babel src -d lib\"\n}\n```\n\n**babel-register**\n它的特点就是实时编译, 不会输出文件, 用来改写 `require` 命令为它加上钩子. `require` 进来的文件就会被转码, 但是它不会转码当前文件中的代码.\n\n安装\n```js\nnpm install --save-dev babel-register\n```\n\n使用\n```js\n// 必须先加载 register\nrequire('babel-register')\n// 然后 register 就会对 test.js 文件转码\nrequire('test.js')\n```\n\n> 由于 `babel-register` 是即时转码, 所以只适用于开发环境使用.\n\n### babel-core\n`babel-core` 可以说是 babel 最为核心的一个包, 可以把它看成一个编译器, babel 核心的 API 都在里面. 比如: transform 处理转码, 因为 ES6 的语法跟老语法不同, 所以先将我们的代码转换为 AST(抽象语法树), 然后分别做处理转化为 ES5. webpack 的 babel-loader 就是调用这些 API 完成转译的. [这里是详细的 API](https://babeljs.cn/docs/usage/api/)\n\n> 这里需要注意的是: `babel-core` 仅关注 code transform, 也就是说它只做语法上的转换, 比如箭头函数. 所以并不是什么都能用 babel 来转换的, 如果涉及到新的 API 就需要你用 polyfill 来转译, 比如 `Promise`.\n\n```js\n// 整块引入\nvar babel = require('babel-core')\n// 也可以选择某个 API 单独使用\nimport { transform } from 'babel-core'\n```\n\n主要的 API:\n\n**babel.transform(code: string, options?: Object)**\n将传入的 code 做转换, 返回值为一个对象, 参数为: 生成的对象, source map 和 AST\n\n```js\nvar result = babel.transform(\"code();\", options);\nresult.code\nresult.map\nresult.ast\n```\n\n**babel.transformFile(filename: string, options?: Object, callback: Function)**\n异步转译文件中的所有内容\n\n```js\nbabel.transformFile('filename.js', options, function (err, result) {\n  result // { code, map, ast }\n})\n```\n\n**babel.transformFileSync(filename: string, options?: Object)**\n`babel.transformFile` 的同步版本, 返回值为 `filename` 文件中转译后的代码\n\n```js\nbabel.transformFileSync(filename, options) // { code, map, ast }\n```\n\n**babel.transformFromAst(ast: Object, code?: string, options?: Object)**\n反转译, 给一个 AST 转为 code\n\n```js\nconst code = 'if (true) return'\nconst ast = babylon.parse(code, { allowReturnOutsideFunction: true })\nconst { code, map, ast } = babel.transformFormAst(ast, code, options)\n```\n\n### babel-runtime\n[`babel-runtime`](https://babeljs.cn/docs/plugins/transform-runtime/) 这个包其实就是把 core-js 和 regenerator 组合起来供使用, 它和 `babel-polyfill` 的都是为了模拟 ES6 环境. 之前提到的 `babel-core` 只对语法进行转换, 但不支持 Promise, Set, Map, array.reduce, Array.form, genertor, async 这些新 API 的编译, 所以才会用到这两个东西.\n\n**core-js**: 主要实现了 Promise, Symbols, ES7提案等等的 polyfill, 包含了大部分的 JavaScript 最新标准的垫片.\n```js\n// 需要单个引用后再使用\nrequire('core-js/array/reduce')\n```\n\n**regenerator**: 主要实现 generator/yeild, async/await (不知道为啥 core-js 不把这两个一起实现了...)\n\n**helpers**: `babel-runtime` 里也有 helpers, 它里面的 helpers 相当于之前提到的 `babel-external-helpers` 生成的 helpers.js, 只不过把每个 helpers 函数都单独放到一个文件夹里而已. 这样配合 transform 的时候, 需要用到 helpers 函数就可以直接从 `babel-runtime` 中引用了.\n```js\nconst _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator')\n```\n\n区别: \n\n- [babel-polyfill](https://babeljs.cn/docs/usage/polyfill): 是通过全局对象和内置对象的 prototype 上添加方法来达到目的, 所以一旦引入 `babel-polyfill` 就会污染全局环境.\n- babel-runtime: `babel-runtime` 是一个模块, 所以它不会污染全局环境和内置对象的原型. 它的做法引入需要的 helper 函数(类似: `const Promise = require('babel-runtime/core-js/promise')` 来引入 Promise).\n\n优缺点:\n\n- babel-poly-fill: 引入一劳永逸, 但是污染环境.\n- babel-runtime: \n    1. 手动引入不方便\n    2. 直接在代码中引入 helper 函数意味着不能共享, 最终打包出来会有很多冗余代码(引入的都是全量的 polyfill). \n    \n所以要配合 `babel-plugin-transform-runtime` (很多地方都是把 `babel-runtime` 和 `babel-plugin-transform-runtime` 统称为 transform-runtime, 因为它俩得合在一起才好用) 来达到按需引入 helper 避免重复打包和手动引入的痛苦, 它主要是做一层映射: 将 `babel-runtime` 内引用到的 core-js 或 regenerator.js 映射到具体对应的 helper. \n\n> 注意: `babel-runtime` 无法转码实例方法, 即内置对象原型上的方法, 只能通过 `babel-polyfill` 来转码. 比如:\n```js\nArray.prototype.find()\n'hello'.includes('h')\n```\n\n另外, 关于为什么 `babel-runtime` 是 dependencies 依赖, 因为他只是集合了 polyfill 的一个 library, 对应需要的 polyfill 都是要引入项目中, 并跟项目代码一起打包的.\n\n### babel-preset-env\n它能根据当前的运行环境, 自动确定你需要的 plugins 和 polyfills, babel 的配置官方推荐是写到 `.babelrc` 文件中, 以 `Vue-cli` 的 babel 配置为例.[详细参数设置及说明](https://babeljs.cn/docs/plugins/preset-env/)\n\n```json\n{\n  \"presets\": [\n    [\"env\", \n      { \n        \"modules\": false // 设置 ES6 模块转译的模式, 默认是 commonjs\n      }\n    ],\n    // 需要支持到哪个阶段的 JavaScript 版本\n    \"stage-2\"\n  ],\n  // 需要的插件\n  \"plugins\": [\n    \"transform-runtime\", // 虽然这里没有写 babel-runtime, 但是 transform-runtime 依赖于它, 所以还是要安装\n    \"transform-vue-jsx\"\n  ],\n  // 编译过程是否保留注释\n  \"comments\": false,\n  \"env\": {\n    \"test\": {\n      \"presets\": [\"env\", \"stage-2\"],\n      \"plugins\": [ \"istanbul\"]\n    }\n  }\n}\n```\n\n本来 `babel-preset-env` 中有一个 useBuiltIns 选项(默认值是 false), 就是它实现的根据运行环境并判断需要什么 polyfill, 达到按需引入而不是整个引入, 对于 `import 'babel-polyfill'` 就很棒了. 但是可以看到 vue-template 并没有使用这个选项, 这是因为   <a href='javascript:' title='我消不掉这个超链接😑'>babel-preset-env@1.x</a> 的版本没有办法很好消除未使用的 polyfill, 在2.x 版本下可以用 `usebuiltIns: 'usage'`达到目的.\n\n### 其他\nbabel 还有很多相关的东西没说到, 只挑了几个最重要的来说, 具体的 helpers/ plugins 都可以到[官方仓库](https://github.com/babel/babel/tree/master/packages)查看\n\n- [badylon](https://github.com/babel/babel/tree/master/packages/babylon): 词法解析器\n- [babel-traverse](https://github.com/babel/babel/tree/master/packages/babel-traverse): 用于遍历, 维护整个 AST 的状态\n- [babel-generator](https://github.com/babel/babel/tree/master/packages/babel-generator): 根据 AST 生成代码\n\n#### babel 的工作流程\n\n输入需要转码的代码 -> badylon 解析 -> 得到 AST -> \nbabel-traverse 遍历转译 -> 得到新的 AST -> \n最后 babel-generator 根据新的 AST 生成代码\n\n### 总结\n整个来说我觉得还是 `babel-runtime` 和 `babel-polyfill` 比较难区分, 其实两者的核心都在于 [core-js](https://github.com/zloirock/core-js#basic) 只是各有优缺点而已, 下面会再简要总结一下区别. 其他的话只需要知道每个东西是干啥的就行了.\n\n- babel-polyfill: 污染环境, 支持实例方法(如果只想引入一些特定的polyfill, 那就去 [core-js](https://github.com/zloirock/core-js#basic) 中找相应的方法自己手动 require 进来); \n- runtime: 按需引用,不支持实例方法.\n\nCreated on 2018-4-11 by Cara","slug":"Babel","published":1,"updated":"2018-05-05T09:23:03.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurols20002klu0u8rvtunj","content":"<p>对于 babel 的使用, 一直停留在与 webpack 结合使用, 以及在 Vue 开发环境下脚手架又是开箱即用. 导致很多 babel 的包, 我都不清楚他们是干什么的. 比如 babel-register/ babel-runtime/ helpers/ 各种 presets 以及 transform-runtime 和 babel-polyfill 的区别, 所以总结一下.</p>\n<h3 id=\"babel-cli\"><a href=\"#babel-cli\" class=\"headerlink\" title=\"babel-cli\"></a>babel-cli</h3><p>我理解为 babel 的 command 全家桶, 用于在命令行操作的. 里面包含了 <code>babel</code>/ <code>babel-external-helpers</code>/ <code>babel-node</code> 3个命令</p>\n<ul>\n<li>babel: 用于编译代码</li>\n<li>babel-external-helpers: 用于生成一些 halper 函数, 包含 babel 所有的 hepler 函数 (如: toArray 函数, jsx 转化函数). 这些函数实在 babel transform 的时候用, 都放在 <code>babel-helpers</code> 这个包中, 当这些 helpers 被用到就会被放置在生成代码的顶部. 但是当多个文件都用到了 helpers 函数就会产生冗余代码, 所以 babel 提供这个命令生成一个包含所有 helpers 的 js 文件用于直接引用.(然后可以通过 plugin 去检查全局时候存在这个模块, 存在就不定义)</li>\n<li>babel-node: 主要是实现在 node 中写代码和执行脚本的能力, 可以直接运行 ES6代码. 比如直接在 node 中写 jsx, 通过这个就可以执行. 但是要把它编译成可执行的脚本还需要 <code>babel-register</code></li>\n</ul>\n<p>安装<br><code>npm install --global babel-cli</code></p>\n<p>用法<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">babel example.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 转码结果写入文件</span><br><span class=\"line\">babel example.js -o result.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 整个目录转码</span><br><span class=\"line\">babel src -d lib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 生成 source map 文件</span><br><span class=\"line\">babel src -d lib -s</span><br></pre></td></tr></table></figure></p>\n<p>全局环境下 babel 无法支持不同版本的 babel, 所以安全的做法还是把 babel 装在项目中<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure></p>\n<p>package.json 改成:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"script\"</span>: <span class=\"string\">\"babel src -d lib\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>babel-register</strong><br>它的特点就是实时编译, 不会输出文件, 用来改写 <code>require</code> 命令为它加上钩子. <code>require</code> 进来的文件就会被转码, 但是它不会转码当前文件中的代码.</p>\n<p>安装<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-register</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 必须先加载 register</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-register'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 然后 register 就会对 test.js 文件转码</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'test.js'</span>)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>由于 <code>babel-register</code> 是即时转码, 所以只适用于开发环境使用.</p>\n</blockquote>\n<h3 id=\"babel-core\"><a href=\"#babel-core\" class=\"headerlink\" title=\"babel-core\"></a>babel-core</h3><p><code>babel-core</code> 可以说是 babel 最为核心的一个包, 可以把它看成一个编译器, babel 核心的 API 都在里面. 比如: transform 处理转码, 因为 ES6 的语法跟老语法不同, 所以先将我们的代码转换为 AST(抽象语法树), 然后分别做处理转化为 ES5. webpack 的 babel-loader 就是调用这些 API 完成转译的. <a href=\"https://babeljs.cn/docs/usage/api/\" target=\"_blank\" rel=\"noopener\">这里是详细的 API</a></p>\n<blockquote>\n<p>这里需要注意的是: <code>babel-core</code> 仅关注 code transform, 也就是说它只做语法上的转换, 比如箭头函数. 所以并不是什么都能用 babel 来转换的, 如果涉及到新的 API 就需要你用 polyfill 来转译, 比如 <code>Promise</code>.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 整块引入</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">'babel-core'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 也可以选择某个 API 单独使用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; transform &#125; <span class=\"keyword\">from</span> <span class=\"string\">'babel-core'</span></span><br></pre></td></tr></table></figure>\n<p>主要的 API:</p>\n<p><strong>babel.transform(code: string, options?: Object)</strong><br>将传入的 code 做转换, 返回值为一个对象, 参数为: 生成的对象, source map 和 AST</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = babel.transform(<span class=\"string\">\"code();\"</span>, options);</span><br><span class=\"line\">result.code</span><br><span class=\"line\">result.map</span><br><span class=\"line\">result.ast</span><br></pre></td></tr></table></figure>\n<p><strong>babel.transformFile(filename: string, options?: Object, callback: Function)</strong><br>异步转译文件中的所有内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">babel.transformFile(<span class=\"string\">'filename.js'</span>, options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">  result <span class=\"comment\">// &#123; code, map, ast &#125;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>babel.transformFileSync(filename: string, options?: Object)</strong><br><code>babel.transformFile</code> 的同步版本, 返回值为 <code>filename</code> 文件中转译后的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">babel.transformFileSync(filename, options) <span class=\"comment\">// &#123; code, map, ast &#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>babel.transformFromAst(ast: Object, code?: string, options?: Object)</strong><br>反转译, 给一个 AST 转为 code</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"string\">'if (true) return'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ast = babylon.parse(code, &#123; <span class=\"attr\">allowReturnOutsideFunction</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; code, map, ast &#125; = babel.transformFormAst(ast, code, options)</span><br></pre></td></tr></table></figure>\n<h3 id=\"babel-runtime\"><a href=\"#babel-runtime\" class=\"headerlink\" title=\"babel-runtime\"></a>babel-runtime</h3><p><a href=\"https://babeljs.cn/docs/plugins/transform-runtime/\" target=\"_blank\" rel=\"noopener\"><code>babel-runtime</code></a> 这个包其实就是把 core-js 和 regenerator 组合起来供使用, 它和 <code>babel-polyfill</code> 的都是为了模拟 ES6 环境. 之前提到的 <code>babel-core</code> 只对语法进行转换, 但不支持 Promise, Set, Map, array.reduce, Array.form, genertor, async 这些新 API 的编译, 所以才会用到这两个东西.</p>\n<p><strong>core-js</strong>: 主要实现了 Promise, Symbols, ES7提案等等的 polyfill, 包含了大部分的 JavaScript 最新标准的垫片.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要单个引用后再使用</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'core-js/array/reduce'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><strong>regenerator</strong>: 主要实现 generator/yeild, async/await (不知道为啥 core-js 不把这两个一起实现了…)</p>\n<p><strong>helpers</strong>: <code>babel-runtime</code> 里也有 helpers, 它里面的 helpers 相当于之前提到的 <code>babel-external-helpers</code> 生成的 helpers.js, 只不过把每个 helpers 函数都单独放到一个文件夹里而已. 这样配合 transform 的时候, 需要用到 helpers 函数就可以直接从 <code>babel-runtime</code> 中引用了.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _asyncToGenerator2 = <span class=\"built_in\">require</span>(<span class=\"string\">'babel-runtime/helpers/asyncToGenerator'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>区别: </p>\n<ul>\n<li><a href=\"https://babeljs.cn/docs/usage/polyfill\" target=\"_blank\" rel=\"noopener\">babel-polyfill</a>: 是通过全局对象和内置对象的 prototype 上添加方法来达到目的, 所以一旦引入 <code>babel-polyfill</code> 就会污染全局环境.</li>\n<li>babel-runtime: <code>babel-runtime</code> 是一个模块, 所以它不会污染全局环境和内置对象的原型. 它的做法引入需要的 helper 函数(类似: <code>const Promise = require(&#39;babel-runtime/core-js/promise&#39;)</code> 来引入 Promise).</li>\n</ul>\n<p>优缺点:</p>\n<ul>\n<li>babel-poly-fill: 引入一劳永逸, 但是污染环境.</li>\n<li>babel-runtime: <ol>\n<li>手动引入不方便</li>\n<li>直接在代码中引入 helper 函数意味着不能共享, 最终打包出来会有很多冗余代码(引入的都是全量的 polyfill). </li>\n</ol>\n</li>\n</ul>\n<p>所以要配合 <code>babel-plugin-transform-runtime</code> (很多地方都是把 <code>babel-runtime</code> 和 <code>babel-plugin-transform-runtime</code> 统称为 transform-runtime, 因为它俩得合在一起才好用) 来达到按需引入 helper 避免重复打包和手动引入的痛苦, 它主要是做一层映射: 将 <code>babel-runtime</code> 内引用到的 core-js 或 regenerator.js 映射到具体对应的 helper. </p>\n<blockquote>\n<p>注意: <code>babel-runtime</code> 无法转码实例方法, 即内置对象原型上的方法, 只能通过 <code>babel-polyfill</code> 来转码. 比如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.find()</span><br><span class=\"line\"><span class=\"string\">'hello'</span>.includes(<span class=\"string\">'h'</span>)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>另外, 关于为什么 <code>babel-runtime</code> 是 dependencies 依赖, 因为他只是集合了 polyfill 的一个 library, 对应需要的 polyfill 都是要引入项目中, 并跟项目代码一起打包的.</p>\n<h3 id=\"babel-preset-env\"><a href=\"#babel-preset-env\" class=\"headerlink\" title=\"babel-preset-env\"></a>babel-preset-env</h3><p>它能根据当前的运行环境, 自动确定你需要的 plugins 和 polyfills, babel 的配置官方推荐是写到 <code>.babelrc</code> 文件中, 以 <code>Vue-cli</code> 的 babel 配置为例.<a href=\"https://babeljs.cn/docs/plugins/preset-env/\" target=\"_blank\" rel=\"noopener\">详细参数设置及说明</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">    [<span class=\"string\">\"env\"</span>, </span><br><span class=\"line\">      &#123; </span><br><span class=\"line\">        \"modules\": false // 设置 ES6 模块转译的模式, 默认是 commonjs</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    // 需要支持到哪个阶段的 JavaScript 版本</span><br><span class=\"line\">    <span class=\"string\">\"stage-2\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  // 需要的插件</span><br><span class=\"line\">  \"plugins\": [</span><br><span class=\"line\">    \"transform-runtime\", // 虽然这里没有写 babel-runtime, 但是 transform-runtime 依赖于它, 所以还是要安装</span><br><span class=\"line\">    <span class=\"string\">\"transform-vue-jsx\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  // 编译过程是否保留注释</span><br><span class=\"line\">  \"comments\": false,</span><br><span class=\"line\">  \"env\": &#123;</span><br><span class=\"line\">    \"test\": &#123;</span><br><span class=\"line\">      \"presets\": [\"env\", \"stage-2\"],</span><br><span class=\"line\">      \"plugins\": [ \"istanbul\"]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>本来 <code>babel-preset-env</code> 中有一个 useBuiltIns 选项(默认值是 false), 就是它实现的根据运行环境并判断需要什么 polyfill, 达到按需引入而不是整个引入, 对于 <code>import &#39;babel-polyfill&#39;</code> 就很棒了. 但是可以看到 vue-template 并没有使用这个选项, 这是因为   <a href=\"javascript:\" title=\"我消不掉这个超链接😑\" target=\"_blank\" rel=\"noopener\">babel-preset-env@1.x</a> 的版本没有办法很好消除未使用的 polyfill, 在2.x 版本下可以用 <code>usebuiltIns: &#39;usage&#39;</code>达到目的.</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>babel 还有很多相关的东西没说到, 只挑了几个最重要的来说, 具体的 helpers/ plugins 都可以到<a href=\"https://github.com/babel/babel/tree/master/packages\" target=\"_blank\" rel=\"noopener\">官方仓库</a>查看</p>\n<ul>\n<li><a href=\"https://github.com/babel/babel/tree/master/packages/babylon\" target=\"_blank\" rel=\"noopener\">badylon</a>: 词法解析器</li>\n<li><a href=\"https://github.com/babel/babel/tree/master/packages/babel-traverse\" target=\"_blank\" rel=\"noopener\">babel-traverse</a>: 用于遍历, 维护整个 AST 的状态</li>\n<li><a href=\"https://github.com/babel/babel/tree/master/packages/babel-generator\" target=\"_blank\" rel=\"noopener\">babel-generator</a>: 根据 AST 生成代码</li>\n</ul>\n<h4 id=\"babel-的工作流程\"><a href=\"#babel-的工作流程\" class=\"headerlink\" title=\"babel 的工作流程\"></a>babel 的工作流程</h4><p>输入需要转码的代码 -&gt; badylon 解析 -&gt; 得到 AST -&gt;<br>babel-traverse 遍历转译 -&gt; 得到新的 AST -&gt;<br>最后 babel-generator 根据新的 AST 生成代码</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>整个来说我觉得还是 <code>babel-runtime</code> 和 <code>babel-polyfill</code> 比较难区分, 其实两者的核心都在于 <a href=\"https://github.com/zloirock/core-js#basic\" target=\"_blank\" rel=\"noopener\">core-js</a> 只是各有优缺点而已, 下面会再简要总结一下区别. 其他的话只需要知道每个东西是干啥的就行了.</p>\n<ul>\n<li>babel-polyfill: 污染环境, 支持实例方法(如果只想引入一些特定的polyfill, 那就去 <a href=\"https://github.com/zloirock/core-js#basic\" target=\"_blank\" rel=\"noopener\">core-js</a> 中找相应的方法自己手动 require 进来); </li>\n<li>runtime: 按需引用,不支持实例方法.</li>\n</ul>\n<p>Created on 2018-4-11 by Cara</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于 babel 的使用, 一直停留在与 webpack 结合使用, 以及在 Vue 开发环境下脚手架又是开箱即用. 导致很多 babel 的包, 我都不清楚他们是干什么的. 比如 babel-register/ babel-runtime/ helpers/ 各种 presets 以及 transform-runtime 和 babel-polyfill 的区别, 所以总结一下.</p>\n<h3 id=\"babel-cli\"><a href=\"#babel-cli\" class=\"headerlink\" title=\"babel-cli\"></a>babel-cli</h3><p>我理解为 babel 的 command 全家桶, 用于在命令行操作的. 里面包含了 <code>babel</code>/ <code>babel-external-helpers</code>/ <code>babel-node</code> 3个命令</p>\n<ul>\n<li>babel: 用于编译代码</li>\n<li>babel-external-helpers: 用于生成一些 halper 函数, 包含 babel 所有的 hepler 函数 (如: toArray 函数, jsx 转化函数). 这些函数实在 babel transform 的时候用, 都放在 <code>babel-helpers</code> 这个包中, 当这些 helpers 被用到就会被放置在生成代码的顶部. 但是当多个文件都用到了 helpers 函数就会产生冗余代码, 所以 babel 提供这个命令生成一个包含所有 helpers 的 js 文件用于直接引用.(然后可以通过 plugin 去检查全局时候存在这个模块, 存在就不定义)</li>\n<li>babel-node: 主要是实现在 node 中写代码和执行脚本的能力, 可以直接运行 ES6代码. 比如直接在 node 中写 jsx, 通过这个就可以执行. 但是要把它编译成可执行的脚本还需要 <code>babel-register</code></li>\n</ul>\n<p>安装<br><code>npm install --global babel-cli</code></p>\n<p>用法<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">babel example.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 转码结果写入文件</span><br><span class=\"line\">babel example.js -o result.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 整个目录转码</span><br><span class=\"line\">babel src -d lib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 生成 source map 文件</span><br><span class=\"line\">babel src -d lib -s</span><br></pre></td></tr></table></figure></p>\n<p>全局环境下 babel 无法支持不同版本的 babel, 所以安全的做法还是把 babel 装在项目中<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure></p>\n<p>package.json 改成:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"script\"</span>: <span class=\"string\">\"babel src -d lib\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>babel-register</strong><br>它的特点就是实时编译, 不会输出文件, 用来改写 <code>require</code> 命令为它加上钩子. <code>require</code> 进来的文件就会被转码, 但是它不会转码当前文件中的代码.</p>\n<p>安装<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-register</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 必须先加载 register</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-register'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 然后 register 就会对 test.js 文件转码</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'test.js'</span>)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>由于 <code>babel-register</code> 是即时转码, 所以只适用于开发环境使用.</p>\n</blockquote>\n<h3 id=\"babel-core\"><a href=\"#babel-core\" class=\"headerlink\" title=\"babel-core\"></a>babel-core</h3><p><code>babel-core</code> 可以说是 babel 最为核心的一个包, 可以把它看成一个编译器, babel 核心的 API 都在里面. 比如: transform 处理转码, 因为 ES6 的语法跟老语法不同, 所以先将我们的代码转换为 AST(抽象语法树), 然后分别做处理转化为 ES5. webpack 的 babel-loader 就是调用这些 API 完成转译的. <a href=\"https://babeljs.cn/docs/usage/api/\" target=\"_blank\" rel=\"noopener\">这里是详细的 API</a></p>\n<blockquote>\n<p>这里需要注意的是: <code>babel-core</code> 仅关注 code transform, 也就是说它只做语法上的转换, 比如箭头函数. 所以并不是什么都能用 babel 来转换的, 如果涉及到新的 API 就需要你用 polyfill 来转译, 比如 <code>Promise</code>.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 整块引入</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">'babel-core'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 也可以选择某个 API 单独使用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; transform &#125; <span class=\"keyword\">from</span> <span class=\"string\">'babel-core'</span></span><br></pre></td></tr></table></figure>\n<p>主要的 API:</p>\n<p><strong>babel.transform(code: string, options?: Object)</strong><br>将传入的 code 做转换, 返回值为一个对象, 参数为: 生成的对象, source map 和 AST</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = babel.transform(<span class=\"string\">\"code();\"</span>, options);</span><br><span class=\"line\">result.code</span><br><span class=\"line\">result.map</span><br><span class=\"line\">result.ast</span><br></pre></td></tr></table></figure>\n<p><strong>babel.transformFile(filename: string, options?: Object, callback: Function)</strong><br>异步转译文件中的所有内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">babel.transformFile(<span class=\"string\">'filename.js'</span>, options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">  result <span class=\"comment\">// &#123; code, map, ast &#125;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>babel.transformFileSync(filename: string, options?: Object)</strong><br><code>babel.transformFile</code> 的同步版本, 返回值为 <code>filename</code> 文件中转译后的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">babel.transformFileSync(filename, options) <span class=\"comment\">// &#123; code, map, ast &#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>babel.transformFromAst(ast: Object, code?: string, options?: Object)</strong><br>反转译, 给一个 AST 转为 code</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"string\">'if (true) return'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ast = babylon.parse(code, &#123; <span class=\"attr\">allowReturnOutsideFunction</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; code, map, ast &#125; = babel.transformFormAst(ast, code, options)</span><br></pre></td></tr></table></figure>\n<h3 id=\"babel-runtime\"><a href=\"#babel-runtime\" class=\"headerlink\" title=\"babel-runtime\"></a>babel-runtime</h3><p><a href=\"https://babeljs.cn/docs/plugins/transform-runtime/\" target=\"_blank\" rel=\"noopener\"><code>babel-runtime</code></a> 这个包其实就是把 core-js 和 regenerator 组合起来供使用, 它和 <code>babel-polyfill</code> 的都是为了模拟 ES6 环境. 之前提到的 <code>babel-core</code> 只对语法进行转换, 但不支持 Promise, Set, Map, array.reduce, Array.form, genertor, async 这些新 API 的编译, 所以才会用到这两个东西.</p>\n<p><strong>core-js</strong>: 主要实现了 Promise, Symbols, ES7提案等等的 polyfill, 包含了大部分的 JavaScript 最新标准的垫片.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要单个引用后再使用</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'core-js/array/reduce'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><strong>regenerator</strong>: 主要实现 generator/yeild, async/await (不知道为啥 core-js 不把这两个一起实现了…)</p>\n<p><strong>helpers</strong>: <code>babel-runtime</code> 里也有 helpers, 它里面的 helpers 相当于之前提到的 <code>babel-external-helpers</code> 生成的 helpers.js, 只不过把每个 helpers 函数都单独放到一个文件夹里而已. 这样配合 transform 的时候, 需要用到 helpers 函数就可以直接从 <code>babel-runtime</code> 中引用了.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _asyncToGenerator2 = <span class=\"built_in\">require</span>(<span class=\"string\">'babel-runtime/helpers/asyncToGenerator'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>区别: </p>\n<ul>\n<li><a href=\"https://babeljs.cn/docs/usage/polyfill\" target=\"_blank\" rel=\"noopener\">babel-polyfill</a>: 是通过全局对象和内置对象的 prototype 上添加方法来达到目的, 所以一旦引入 <code>babel-polyfill</code> 就会污染全局环境.</li>\n<li>babel-runtime: <code>babel-runtime</code> 是一个模块, 所以它不会污染全局环境和内置对象的原型. 它的做法引入需要的 helper 函数(类似: <code>const Promise = require(&#39;babel-runtime/core-js/promise&#39;)</code> 来引入 Promise).</li>\n</ul>\n<p>优缺点:</p>\n<ul>\n<li>babel-poly-fill: 引入一劳永逸, 但是污染环境.</li>\n<li>babel-runtime: <ol>\n<li>手动引入不方便</li>\n<li>直接在代码中引入 helper 函数意味着不能共享, 最终打包出来会有很多冗余代码(引入的都是全量的 polyfill). </li>\n</ol>\n</li>\n</ul>\n<p>所以要配合 <code>babel-plugin-transform-runtime</code> (很多地方都是把 <code>babel-runtime</code> 和 <code>babel-plugin-transform-runtime</code> 统称为 transform-runtime, 因为它俩得合在一起才好用) 来达到按需引入 helper 避免重复打包和手动引入的痛苦, 它主要是做一层映射: 将 <code>babel-runtime</code> 内引用到的 core-js 或 regenerator.js 映射到具体对应的 helper. </p>\n<blockquote>\n<p>注意: <code>babel-runtime</code> 无法转码实例方法, 即内置对象原型上的方法, 只能通过 <code>babel-polyfill</code> 来转码. 比如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.find()</span><br><span class=\"line\"><span class=\"string\">'hello'</span>.includes(<span class=\"string\">'h'</span>)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>另外, 关于为什么 <code>babel-runtime</code> 是 dependencies 依赖, 因为他只是集合了 polyfill 的一个 library, 对应需要的 polyfill 都是要引入项目中, 并跟项目代码一起打包的.</p>\n<h3 id=\"babel-preset-env\"><a href=\"#babel-preset-env\" class=\"headerlink\" title=\"babel-preset-env\"></a>babel-preset-env</h3><p>它能根据当前的运行环境, 自动确定你需要的 plugins 和 polyfills, babel 的配置官方推荐是写到 <code>.babelrc</code> 文件中, 以 <code>Vue-cli</code> 的 babel 配置为例.<a href=\"https://babeljs.cn/docs/plugins/preset-env/\" target=\"_blank\" rel=\"noopener\">详细参数设置及说明</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">    [<span class=\"string\">\"env\"</span>, </span><br><span class=\"line\">      &#123; </span><br><span class=\"line\">        \"modules\": false // 设置 ES6 模块转译的模式, 默认是 commonjs</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    // 需要支持到哪个阶段的 JavaScript 版本</span><br><span class=\"line\">    <span class=\"string\">\"stage-2\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  // 需要的插件</span><br><span class=\"line\">  \"plugins\": [</span><br><span class=\"line\">    \"transform-runtime\", // 虽然这里没有写 babel-runtime, 但是 transform-runtime 依赖于它, 所以还是要安装</span><br><span class=\"line\">    <span class=\"string\">\"transform-vue-jsx\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  // 编译过程是否保留注释</span><br><span class=\"line\">  \"comments\": false,</span><br><span class=\"line\">  \"env\": &#123;</span><br><span class=\"line\">    \"test\": &#123;</span><br><span class=\"line\">      \"presets\": [\"env\", \"stage-2\"],</span><br><span class=\"line\">      \"plugins\": [ \"istanbul\"]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>本来 <code>babel-preset-env</code> 中有一个 useBuiltIns 选项(默认值是 false), 就是它实现的根据运行环境并判断需要什么 polyfill, 达到按需引入而不是整个引入, 对于 <code>import &#39;babel-polyfill&#39;</code> 就很棒了. 但是可以看到 vue-template 并没有使用这个选项, 这是因为   <a href=\"javascript:\" title=\"我消不掉这个超链接😑\" target=\"_blank\" rel=\"noopener\">babel-preset-env@1.x</a> 的版本没有办法很好消除未使用的 polyfill, 在2.x 版本下可以用 <code>usebuiltIns: &#39;usage&#39;</code>达到目的.</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>babel 还有很多相关的东西没说到, 只挑了几个最重要的来说, 具体的 helpers/ plugins 都可以到<a href=\"https://github.com/babel/babel/tree/master/packages\" target=\"_blank\" rel=\"noopener\">官方仓库</a>查看</p>\n<ul>\n<li><a href=\"https://github.com/babel/babel/tree/master/packages/babylon\" target=\"_blank\" rel=\"noopener\">badylon</a>: 词法解析器</li>\n<li><a href=\"https://github.com/babel/babel/tree/master/packages/babel-traverse\" target=\"_blank\" rel=\"noopener\">babel-traverse</a>: 用于遍历, 维护整个 AST 的状态</li>\n<li><a href=\"https://github.com/babel/babel/tree/master/packages/babel-generator\" target=\"_blank\" rel=\"noopener\">babel-generator</a>: 根据 AST 生成代码</li>\n</ul>\n<h4 id=\"babel-的工作流程\"><a href=\"#babel-的工作流程\" class=\"headerlink\" title=\"babel 的工作流程\"></a>babel 的工作流程</h4><p>输入需要转码的代码 -&gt; badylon 解析 -&gt; 得到 AST -&gt;<br>babel-traverse 遍历转译 -&gt; 得到新的 AST -&gt;<br>最后 babel-generator 根据新的 AST 生成代码</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>整个来说我觉得还是 <code>babel-runtime</code> 和 <code>babel-polyfill</code> 比较难区分, 其实两者的核心都在于 <a href=\"https://github.com/zloirock/core-js#basic\" target=\"_blank\" rel=\"noopener\">core-js</a> 只是各有优缺点而已, 下面会再简要总结一下区别. 其他的话只需要知道每个东西是干啥的就行了.</p>\n<ul>\n<li>babel-polyfill: 污染环境, 支持实例方法(如果只想引入一些特定的polyfill, 那就去 <a href=\"https://github.com/zloirock/core-js#basic\" target=\"_blank\" rel=\"noopener\">core-js</a> 中找相应的方法自己手动 require 进来); </li>\n<li>runtime: 按需引用,不支持实例方法.</li>\n</ul>\n<p>Created on 2018-4-11 by Cara</p>\n"},{"title":"CSS  垂直水平居中大整合","date":"2017-10-14T12:31:30.000Z","_content":"\n在平时的布局中常常会用到的垂直水平居中. 下面就来总结几种垂直\n水平居中的方法.\n\n> ### 1. 绝对定位水平垂直居中\n> 给元素设置绝对定位, 其父级元素为`body`或者指定的相对定位元素. \n> 它的缺点是必须设置宽度值或者高度值; 优点是兼容性挺好, 代码也不\n> 多, 不过听说在 windows phone 上不起作用.\n\n```html\n<div class='wrapper'>\n\t<div class='absolute-center'>我是绝对定位<div>\n</div>\n```\n\n```css\n.wrapper{\n\twidth: 100%;\n\theight: 200px;\n\tposition: relative;\n\tborder: thin solid black;\n}\n.absolute-center{\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tleft: 0;\n\tmargin: auto;\n\tbackground: deepskyblue;\n\theight: 100px;\n\tline-height: 100px;\n\ttext-align: center;\n\tcolor: #fff;\n}\n```\n\n> 之前一直不懂绝对定位的工作机制到底是怎样, 下面是查资料看到的:\n\n1. 在普通文档流中`margin: auto`相当于`margin-top: 0; margin-bottom: 0;`;\n2. `position: absolute`会脱离文档流, 脱离的部分将不会影响文档流中的内容.\n3. 给块区域内设置`top: 0; right: 0;bottom: 0;left: 0`, 浏览器将重新分配一个边界框,  这个时候的块区域会占满父级所有可用空间.\n4. 为这个块区域设置宽度或高度就可以防止该元素占满整个父级元素, 促使浏览器根据新的边界值重新计算`margin: auto`.\n5. 由于内容块被绝对定位, 脱离了正常的内容流, 浏览器会给`margin-top,margin-bottom`相同的值, 使元素块在先前定义的边界内居中.\n\n> ### 2.  可视区域内水平垂直居中\n> 把上面例子改为`position: fixed; z-index: 999`, 设置一个较大值的`z-index`; 如果不给这个块级元素设置宽高则会占满整个屏幕.\n\n```html\n<div class=\"fixed-center\">固定定位水平垂直居中</div>\n```\n\n```css\n.fixed-center{\n\twidth: 200px;\n\theight: 200px;\n\tposition: fixed;;\n\tz-index: 999;\n\tbackground: rgba(0, 0, 0, .3);\n\ttop: 0; \n\tleft: 0;\n\tbottom: 0; \n\tright: 0; \n\tmargin: auto;\n\tline-height: 200px;\n\tcolor: #fff;\n\ttext-align: center;\n}\n```\n\n> ### 3. 边栏垂直居中\n> 有时需要将一个内容块固定在屏幕的左侧或者右侧, 可以向内容快加入像这样的 CSS 代码`top: 20px; bottom: auto;`; 由于已经声明了`margin: auto`, 内容块将会垂直居中在你定义的`top`/ `right`/ `bottom`/ `left`边界值内. 可以用`left: 0; right: auto`将内容快固定在左侧; `right: 0; left: auto;`将内容固定在右侧.\n\n```html\n<div class=\"absolute-left\">\n\t绝对定位在左侧\n</div>\n<div class=\"absolute-right\">\n\t绝对定位在右侧\n</div>\n```\n\n```css\n.absolute-left {\n\tposition: absolute;\n\tleft: 20px;\n\tright: auto;\n\tmargin: auto;\n\twidth: 150px;\n\theight: 80px;\n\tbackground: red;\n\tcolor: #fff;\n\ttext-align: center;\n\tline-height: 80px;\n}\n.absolute-right {\n\tposition: absolute;\n\tleft: auto;\n\tright: 20px;\n\tmargin: auto;\n\twidth: 150px;\n\theight: 80px;\n\tbackground: green;\n\tcolor: #fff;\n\ttext-align: center;\n\tline-height: 80px;\n}\n```\n\n> ### 4. 自适应绝对定位居中\n> 自适应绝对居中的优势就是对百分比的宽高完美支持, 甚至是`max-width/ min-width`或者是`max-height/ max-width`, 即使加上`padding`也不会影响绝对居中的实现.\n\n```html\n<div class=\"wrapper-responsive\">\n\t<div class=\"absolute-responsive\">\n\t\t自适应绝对定位居中\n\t</div>\n</div>\n```\n\n```css\n.wrapper-responsive{\n\tposition: relative;\n\ttop: 300px;\n\twidth: 200px;\n\theight: 200px;\n\tborder: thin solid black;\n}\n.absolute-responsive{\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tleft: 0;\n\tmargin: auto;\n\twidth: 60%;\n\theight: 60%;\n\tmin-width: 50px;\n\tmax-width: 150px;\n\tpadding: 10px;\n\ttext-align: center;\n\tcolor: #fff;\n\tbackground: skyblue;\n}\n```\n\n> ### 5. 内容溢出\n> 有时内容块的内容过多导致高度大于父级元素, 内容就会显示到块和容器的外面, 这种时候加个给内容块`overflow: auto`即可, 如果内容块没有`padding`的话加个`max-height: 100%`也行.\n\n> ### 6. 可变高度\n> 设置`display: table`, 内容块会垂直居上不过水平还是居中. 但是这个在一些浏览器上有问题( 如: IE/ FF); `display: table-cell`配合`vertical-align: middle;`也可实现垂直水平居中.\n\n```html\n<div class=\"wrapper-table\">\n\t<div class=\"table-center\">\n\t\ttable 水平居中\n\t\t内容内容内容内容内容内容内容内容内容内容内\n\t</div>\n</div>\n\t\n<div class=\"wrapper-table-cell\">\n\t<div class=\"table-center-cell\">\n\t\ttable-cell 居中\n\t\t内容内容内容内容内容内容内容内容内容内容内\n\t</div>\n</div>\n```\n\n```css\n/* tabel 居中 */\n.wrapper-table{\n\tmargin-top: 600px;\n\tdisplay: table;\n\theight: auto;\n\twidth: 200px;\n\theight: 200px;\n\tborder: thin solid black;\n}\n.table-center{\n\twidth: 80px;\n\tbackground: orange;\n\tcolor: #fff;\n}\n\n/* tabel-cell 居中 */\n.wrapper-table-cell{\n\tmargin-top: 600px;\n\tdisplay: table-cell;\n\theight: auto;\n\twidth: 200px;\n\theight: 200px;\n\tborder: thin solid black;\n\tvertical-align: middle;\n}\n.table-center-cell{\n\twidth: 100px;\n\tbackground: #FFD34E;\n\tcolor: #fff;\n}\n```\n\n> ### 6. 负外边距\n> 这个方法应该是很常用的方法了, 已知元素的宽高: 外边距`margin`的值取负数(没有`box-sizing: border-box`的情况下, 包括`padding`), 大小为 `width/ height`的一半, 再加上`top: 50%; left: 50%`, 这个不能自适应哦.\n```html\n<div class=\"wrapper-margin\">\n\t<div class=\"margin-center\">\n\t\tmargin 居中\n\t</div>\n</div>\n```\n\n```css\n.wrapper-margin{\n  position: relative;\n\ttop: 100px;\n\tborder: thin solid black;\n\twidth: 200px;\n\theight: 200px;\n}\n.margin-center{\n\twidth: 100px;\n\theight: 100px;\n\tbackground: #105B63;\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\tmargin: -50px auto auto -50px;\n\tcolor: #fff;\n\ttext-align: center;\n\tline-height: 100px;\n}\n```\n\n> ### 7. 变形\n> 这可以说是最简单的方法了, 不仅可以实现绝对居中的想过还可以实现可变宽高度. 内容块定义`transform: translate(-50%, -50%)`带上浏览器前缀, 再加上`top: 50%; left: 50%`即可.\n\n```html\n<div class=\"wrapper-transform\">\n\t<div class=\"transform-center\">\n\t\ttransform 居中\n\t</div>\n</div>\n```\n\n```css\n.wrapper-transform{\n\tposition: relative;\n\ttop: 200px;\n\tborder: thin solid black;\n\twidth: 200px;\n\theight: 200px;\n}\n.transform-center{\n\twidth: 100px;\n\theight: 100px;\n\tbackground: #BD4932;\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\t-webkit-transform: translate(-50%, -50%);\n\t-ms-transform: translate(-50%, -50%);\n\t-o-transform: translate(-50%, -50%);\n\ttransform: translate(-50%, -50%);\n\tcolor: #fff;\n\ttext-align: center;\n}\n```\n\n> ### 8. Flexbox\n> CSS3的新属性也叫弹性盒子, 它不仅可以解决居中的问题还可以分栏或者其他的一些布局问题. 这里不多解释, 下次做一个详细的说明.\n```html\n<div class=\"wrapper-flex\">\n\t<div class=\"flex-center\">\n\t\t弹性盒子居中\n\t</div>\n</div>\n```\n\n```css\n.wrapper-flex{\n\tmargin-top: 500px;\n\twidth: 200px;\n\theight: 200px;\n\tborder: thin solid black;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n}\n.flex-center{\n\tbackground: grey;\n\tcolor: #fff;\n\ttext-align: center;\n}\n```\n\n[预览地址](https://caraws.github.io/Review-JavaScript/CSS/vertical-horizontal-center)\n\nCreated on 2017-10-11 by Cara\n","source":"_posts/CSS-垂直水平居中大整合.md","raw":"---\ntitle: CSS  垂直水平居中大整合\ndate: 2017-10-14 20:31:30\ntags: CSS\ncategories:\n- 复习\n---\n\n在平时的布局中常常会用到的垂直水平居中. 下面就来总结几种垂直\n水平居中的方法.\n\n> ### 1. 绝对定位水平垂直居中\n> 给元素设置绝对定位, 其父级元素为`body`或者指定的相对定位元素. \n> 它的缺点是必须设置宽度值或者高度值; 优点是兼容性挺好, 代码也不\n> 多, 不过听说在 windows phone 上不起作用.\n\n```html\n<div class='wrapper'>\n\t<div class='absolute-center'>我是绝对定位<div>\n</div>\n```\n\n```css\n.wrapper{\n\twidth: 100%;\n\theight: 200px;\n\tposition: relative;\n\tborder: thin solid black;\n}\n.absolute-center{\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tleft: 0;\n\tmargin: auto;\n\tbackground: deepskyblue;\n\theight: 100px;\n\tline-height: 100px;\n\ttext-align: center;\n\tcolor: #fff;\n}\n```\n\n> 之前一直不懂绝对定位的工作机制到底是怎样, 下面是查资料看到的:\n\n1. 在普通文档流中`margin: auto`相当于`margin-top: 0; margin-bottom: 0;`;\n2. `position: absolute`会脱离文档流, 脱离的部分将不会影响文档流中的内容.\n3. 给块区域内设置`top: 0; right: 0;bottom: 0;left: 0`, 浏览器将重新分配一个边界框,  这个时候的块区域会占满父级所有可用空间.\n4. 为这个块区域设置宽度或高度就可以防止该元素占满整个父级元素, 促使浏览器根据新的边界值重新计算`margin: auto`.\n5. 由于内容块被绝对定位, 脱离了正常的内容流, 浏览器会给`margin-top,margin-bottom`相同的值, 使元素块在先前定义的边界内居中.\n\n> ### 2.  可视区域内水平垂直居中\n> 把上面例子改为`position: fixed; z-index: 999`, 设置一个较大值的`z-index`; 如果不给这个块级元素设置宽高则会占满整个屏幕.\n\n```html\n<div class=\"fixed-center\">固定定位水平垂直居中</div>\n```\n\n```css\n.fixed-center{\n\twidth: 200px;\n\theight: 200px;\n\tposition: fixed;;\n\tz-index: 999;\n\tbackground: rgba(0, 0, 0, .3);\n\ttop: 0; \n\tleft: 0;\n\tbottom: 0; \n\tright: 0; \n\tmargin: auto;\n\tline-height: 200px;\n\tcolor: #fff;\n\ttext-align: center;\n}\n```\n\n> ### 3. 边栏垂直居中\n> 有时需要将一个内容块固定在屏幕的左侧或者右侧, 可以向内容快加入像这样的 CSS 代码`top: 20px; bottom: auto;`; 由于已经声明了`margin: auto`, 内容块将会垂直居中在你定义的`top`/ `right`/ `bottom`/ `left`边界值内. 可以用`left: 0; right: auto`将内容快固定在左侧; `right: 0; left: auto;`将内容固定在右侧.\n\n```html\n<div class=\"absolute-left\">\n\t绝对定位在左侧\n</div>\n<div class=\"absolute-right\">\n\t绝对定位在右侧\n</div>\n```\n\n```css\n.absolute-left {\n\tposition: absolute;\n\tleft: 20px;\n\tright: auto;\n\tmargin: auto;\n\twidth: 150px;\n\theight: 80px;\n\tbackground: red;\n\tcolor: #fff;\n\ttext-align: center;\n\tline-height: 80px;\n}\n.absolute-right {\n\tposition: absolute;\n\tleft: auto;\n\tright: 20px;\n\tmargin: auto;\n\twidth: 150px;\n\theight: 80px;\n\tbackground: green;\n\tcolor: #fff;\n\ttext-align: center;\n\tline-height: 80px;\n}\n```\n\n> ### 4. 自适应绝对定位居中\n> 自适应绝对居中的优势就是对百分比的宽高完美支持, 甚至是`max-width/ min-width`或者是`max-height/ max-width`, 即使加上`padding`也不会影响绝对居中的实现.\n\n```html\n<div class=\"wrapper-responsive\">\n\t<div class=\"absolute-responsive\">\n\t\t自适应绝对定位居中\n\t</div>\n</div>\n```\n\n```css\n.wrapper-responsive{\n\tposition: relative;\n\ttop: 300px;\n\twidth: 200px;\n\theight: 200px;\n\tborder: thin solid black;\n}\n.absolute-responsive{\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tleft: 0;\n\tmargin: auto;\n\twidth: 60%;\n\theight: 60%;\n\tmin-width: 50px;\n\tmax-width: 150px;\n\tpadding: 10px;\n\ttext-align: center;\n\tcolor: #fff;\n\tbackground: skyblue;\n}\n```\n\n> ### 5. 内容溢出\n> 有时内容块的内容过多导致高度大于父级元素, 内容就会显示到块和容器的外面, 这种时候加个给内容块`overflow: auto`即可, 如果内容块没有`padding`的话加个`max-height: 100%`也行.\n\n> ### 6. 可变高度\n> 设置`display: table`, 内容块会垂直居上不过水平还是居中. 但是这个在一些浏览器上有问题( 如: IE/ FF); `display: table-cell`配合`vertical-align: middle;`也可实现垂直水平居中.\n\n```html\n<div class=\"wrapper-table\">\n\t<div class=\"table-center\">\n\t\ttable 水平居中\n\t\t内容内容内容内容内容内容内容内容内容内容内\n\t</div>\n</div>\n\t\n<div class=\"wrapper-table-cell\">\n\t<div class=\"table-center-cell\">\n\t\ttable-cell 居中\n\t\t内容内容内容内容内容内容内容内容内容内容内\n\t</div>\n</div>\n```\n\n```css\n/* tabel 居中 */\n.wrapper-table{\n\tmargin-top: 600px;\n\tdisplay: table;\n\theight: auto;\n\twidth: 200px;\n\theight: 200px;\n\tborder: thin solid black;\n}\n.table-center{\n\twidth: 80px;\n\tbackground: orange;\n\tcolor: #fff;\n}\n\n/* tabel-cell 居中 */\n.wrapper-table-cell{\n\tmargin-top: 600px;\n\tdisplay: table-cell;\n\theight: auto;\n\twidth: 200px;\n\theight: 200px;\n\tborder: thin solid black;\n\tvertical-align: middle;\n}\n.table-center-cell{\n\twidth: 100px;\n\tbackground: #FFD34E;\n\tcolor: #fff;\n}\n```\n\n> ### 6. 负外边距\n> 这个方法应该是很常用的方法了, 已知元素的宽高: 外边距`margin`的值取负数(没有`box-sizing: border-box`的情况下, 包括`padding`), 大小为 `width/ height`的一半, 再加上`top: 50%; left: 50%`, 这个不能自适应哦.\n```html\n<div class=\"wrapper-margin\">\n\t<div class=\"margin-center\">\n\t\tmargin 居中\n\t</div>\n</div>\n```\n\n```css\n.wrapper-margin{\n  position: relative;\n\ttop: 100px;\n\tborder: thin solid black;\n\twidth: 200px;\n\theight: 200px;\n}\n.margin-center{\n\twidth: 100px;\n\theight: 100px;\n\tbackground: #105B63;\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\tmargin: -50px auto auto -50px;\n\tcolor: #fff;\n\ttext-align: center;\n\tline-height: 100px;\n}\n```\n\n> ### 7. 变形\n> 这可以说是最简单的方法了, 不仅可以实现绝对居中的想过还可以实现可变宽高度. 内容块定义`transform: translate(-50%, -50%)`带上浏览器前缀, 再加上`top: 50%; left: 50%`即可.\n\n```html\n<div class=\"wrapper-transform\">\n\t<div class=\"transform-center\">\n\t\ttransform 居中\n\t</div>\n</div>\n```\n\n```css\n.wrapper-transform{\n\tposition: relative;\n\ttop: 200px;\n\tborder: thin solid black;\n\twidth: 200px;\n\theight: 200px;\n}\n.transform-center{\n\twidth: 100px;\n\theight: 100px;\n\tbackground: #BD4932;\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\t-webkit-transform: translate(-50%, -50%);\n\t-ms-transform: translate(-50%, -50%);\n\t-o-transform: translate(-50%, -50%);\n\ttransform: translate(-50%, -50%);\n\tcolor: #fff;\n\ttext-align: center;\n}\n```\n\n> ### 8. Flexbox\n> CSS3的新属性也叫弹性盒子, 它不仅可以解决居中的问题还可以分栏或者其他的一些布局问题. 这里不多解释, 下次做一个详细的说明.\n```html\n<div class=\"wrapper-flex\">\n\t<div class=\"flex-center\">\n\t\t弹性盒子居中\n\t</div>\n</div>\n```\n\n```css\n.wrapper-flex{\n\tmargin-top: 500px;\n\twidth: 200px;\n\theight: 200px;\n\tborder: thin solid black;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n}\n.flex-center{\n\tbackground: grey;\n\tcolor: #fff;\n\ttext-align: center;\n}\n```\n\n[预览地址](https://caraws.github.io/Review-JavaScript/CSS/vertical-horizontal-center)\n\nCreated on 2017-10-11 by Cara\n","slug":"CSS-垂直水平居中大整合","published":1,"updated":"2018-05-05T09:23:03.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurols60005klu0q22caaj0","content":"<p>在平时的布局中常常会用到的垂直水平居中. 下面就来总结几种垂直<br>水平居中的方法.</p>\n<blockquote>\n<h3 id=\"1-绝对定位水平垂直居中\"><a href=\"#1-绝对定位水平垂直居中\" class=\"headerlink\" title=\"1. 绝对定位水平垂直居中\"></a>1. 绝对定位水平垂直居中</h3><p>给元素设置绝对定位, 其父级元素为<code>body</code>或者指定的相对定位元素.<br>它的缺点是必须设置宽度值或者高度值; 优点是兼容性挺好, 代码也不<br>多, 不过听说在 windows phone 上不起作用.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'wrapper'</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'absolute-center'</span>&gt;</span>我是绝对定位<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: thin solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.absolute-center</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: deepskyblue;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>之前一直不懂绝对定位的工作机制到底是怎样, 下面是查资料看到的:</p>\n</blockquote>\n<ol>\n<li>在普通文档流中<code>margin: auto</code>相当于<code>margin-top: 0; margin-bottom: 0;</code>;</li>\n<li><code>position: absolute</code>会脱离文档流, 脱离的部分将不会影响文档流中的内容.</li>\n<li>给块区域内设置<code>top: 0; right: 0;bottom: 0;left: 0</code>, 浏览器将重新分配一个边界框,  这个时候的块区域会占满父级所有可用空间.</li>\n<li>为这个块区域设置宽度或高度就可以防止该元素占满整个父级元素, 促使浏览器根据新的边界值重新计算<code>margin: auto</code>.</li>\n<li>由于内容块被绝对定位, 脱离了正常的内容流, 浏览器会给<code>margin-top,margin-bottom</code>相同的值, 使元素块在先前定义的边界内居中.</li>\n</ol>\n<blockquote>\n<h3 id=\"2-可视区域内水平垂直居中\"><a href=\"#2-可视区域内水平垂直居中\" class=\"headerlink\" title=\"2.  可视区域内水平垂直居中\"></a>2.  可视区域内水平垂直居中</h3><p>把上面例子改为<code>position: fixed; z-index: 999</code>, 设置一个较大值的<code>z-index</code>; 如果不给这个块级元素设置宽高则会占满整个屏幕.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fixed-center\"</span>&gt;</span>固定定位水平垂直居中<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fixed-center</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\tposition: fixed;;</span><br><span class=\"line\">\t<span class=\"selector-tag\">z-index</span>: 999;</span><br><span class=\"line\">\t<span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">rgba</span>(0, 0, 0, <span class=\"selector-class\">.3</span>);</span><br><span class=\"line\">\t<span class=\"selector-tag\">top</span>: 0; </span><br><span class=\"line\">\t<span class=\"selector-tag\">left</span>: 0;</span><br><span class=\"line\">\t<span class=\"selector-tag\">bottom</span>: 0; </span><br><span class=\"line\">\t<span class=\"selector-tag\">right</span>: 0; </span><br><span class=\"line\">\t<span class=\"selector-tag\">margin</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\">\t<span class=\"selector-tag\">line-height</span>: 200<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">\t<span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"selector-tag\">text-align</span>: <span class=\"selector-tag\">center</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"3-边栏垂直居中\"><a href=\"#3-边栏垂直居中\" class=\"headerlink\" title=\"3. 边栏垂直居中\"></a>3. 边栏垂直居中</h3><p>有时需要将一个内容块固定在屏幕的左侧或者右侧, 可以向内容快加入像这样的 CSS 代码<code>top: 20px; bottom: auto;</code>; 由于已经声明了<code>margin: auto</code>, 内容块将会垂直居中在你定义的<code>top</code>/ <code>right</code>/ <code>bottom</code>/ <code>left</code>边界值内. 可以用<code>left: 0; right: auto</code>将内容快固定在左侧; <code>right: 0; left: auto;</code>将内容固定在右侧.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"absolute-left\"</span>&gt;</span></span><br><span class=\"line\">\t绝对定位在左侧</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"absolute-right\"</span>&gt;</span></span><br><span class=\"line\">\t绝对定位在右侧</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.absolute-left</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.absolute-right</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"4-自适应绝对定位居中\"><a href=\"#4-自适应绝对定位居中\" class=\"headerlink\" title=\"4. 自适应绝对定位居中\"></a>4. 自适应绝对定位居中</h3><p>自适应绝对居中的优势就是对百分比的宽高完美支持, 甚至是<code>max-width/ min-width</code>或者是<code>max-height/ max-width</code>, 即使加上<code>padding</code>也不会影响绝对居中的实现.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper-responsive\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"absolute-responsive\"</span>&gt;</span></span><br><span class=\"line\">\t\t自适应绝对定位居中</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper-responsive</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: thin solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.absolute-responsive</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">min-width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">max-width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: skyblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"5-内容溢出\"><a href=\"#5-内容溢出\" class=\"headerlink\" title=\"5. 内容溢出\"></a>5. 内容溢出</h3><p>有时内容块的内容过多导致高度大于父级元素, 内容就会显示到块和容器的外面, 这种时候加个给内容块<code>overflow: auto</code>即可, 如果内容块没有<code>padding</code>的话加个<code>max-height: 100%</code>也行.</p>\n</blockquote>\n<blockquote>\n<h3 id=\"6-可变高度\"><a href=\"#6-可变高度\" class=\"headerlink\" title=\"6. 可变高度\"></a>6. 可变高度</h3><p>设置<code>display: table</code>, 内容块会垂直居上不过水平还是居中. 但是这个在一些浏览器上有问题( 如: IE/ FF); <code>display: table-cell</code>配合<code>vertical-align: middle;</code>也可实现垂直水平居中.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper-table\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table-center\"</span>&gt;</span></span><br><span class=\"line\">\t\ttable 水平居中</span><br><span class=\"line\">\t\t内容内容内容内容内容内容内容内容内容内容内</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper-table-cell\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table-center-cell\"</span>&gt;</span></span><br><span class=\"line\">\t\ttable-cell 居中</span><br><span class=\"line\">\t\t内容内容内容内容内容内容内容内容内容内容内</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* tabel 居中 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.wrapper-table</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: thin solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.table-center</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* tabel-cell 居中 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.wrapper-table-cell</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: thin solid black;</span><br><span class=\"line\">\t<span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.table-center-cell</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#FFD34E</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"6-负外边距\"><a href=\"#6-负外边距\" class=\"headerlink\" title=\"6. 负外边距\"></a>6. 负外边距</h3><p>这个方法应该是很常用的方法了, 已知元素的宽高: 外边距<code>margin</code>的值取负数(没有<code>box-sizing: border-box</code>的情况下, 包括<code>padding</code>), 大小为 <code>width/ height</code>的一半, 再加上<code>top: 50%; left: 50%</code>, 这个不能自适应哦.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper-margin\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"margin-center\"</span>&gt;</span></span><br><span class=\"line\">\t\tmargin 居中</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper-margin</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: thin solid black;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.margin-center</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#105B63</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: -<span class=\"number\">50px</span> auto auto -<span class=\"number\">50px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"7-变形\"><a href=\"#7-变形\" class=\"headerlink\" title=\"7. 变形\"></a>7. 变形</h3><p>这可以说是最简单的方法了, 不仅可以实现绝对居中的想过还可以实现可变宽高度. 内容块定义<code>transform: translate(-50%, -50%)</code>带上浏览器前缀, 再加上<code>top: 50%; left: 50%</code>即可.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper-transform\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"transform-center\"</span>&gt;</span></span><br><span class=\"line\">\t\ttransform 居中</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper-transform</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: thin solid black;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.transform-center</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#BD4932</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">\t<span class=\"attribute\">-ms-transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">\t<span class=\"attribute\">-o-transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">\t<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"8-Flexbox\"><a href=\"#8-Flexbox\" class=\"headerlink\" title=\"8. Flexbox\"></a>8. Flexbox</h3><p>CSS3的新属性也叫弹性盒子, 它不仅可以解决居中的问题还可以分栏或者其他的一些布局问题. 这里不多解释, 下次做一个详细的说明.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper-flex\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-center\"</span>&gt;</span></span><br><span class=\"line\">\t\t弹性盒子居中</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper-flex</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: thin solid black;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">\t<span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-center</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: grey;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://caraws.github.io/Review-JavaScript/CSS/vertical-horizontal-center\" target=\"_blank\" rel=\"noopener\">预览地址</a></p>\n<p>Created on 2017-10-11 by Cara</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在平时的布局中常常会用到的垂直水平居中. 下面就来总结几种垂直<br>水平居中的方法.</p>\n<blockquote>\n<h3 id=\"1-绝对定位水平垂直居中\"><a href=\"#1-绝对定位水平垂直居中\" class=\"headerlink\" title=\"1. 绝对定位水平垂直居中\"></a>1. 绝对定位水平垂直居中</h3><p>给元素设置绝对定位, 其父级元素为<code>body</code>或者指定的相对定位元素.<br>它的缺点是必须设置宽度值或者高度值; 优点是兼容性挺好, 代码也不<br>多, 不过听说在 windows phone 上不起作用.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'wrapper'</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'absolute-center'</span>&gt;</span>我是绝对定位<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: thin solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.absolute-center</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: deepskyblue;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>之前一直不懂绝对定位的工作机制到底是怎样, 下面是查资料看到的:</p>\n</blockquote>\n<ol>\n<li>在普通文档流中<code>margin: auto</code>相当于<code>margin-top: 0; margin-bottom: 0;</code>;</li>\n<li><code>position: absolute</code>会脱离文档流, 脱离的部分将不会影响文档流中的内容.</li>\n<li>给块区域内设置<code>top: 0; right: 0;bottom: 0;left: 0</code>, 浏览器将重新分配一个边界框,  这个时候的块区域会占满父级所有可用空间.</li>\n<li>为这个块区域设置宽度或高度就可以防止该元素占满整个父级元素, 促使浏览器根据新的边界值重新计算<code>margin: auto</code>.</li>\n<li>由于内容块被绝对定位, 脱离了正常的内容流, 浏览器会给<code>margin-top,margin-bottom</code>相同的值, 使元素块在先前定义的边界内居中.</li>\n</ol>\n<blockquote>\n<h3 id=\"2-可视区域内水平垂直居中\"><a href=\"#2-可视区域内水平垂直居中\" class=\"headerlink\" title=\"2.  可视区域内水平垂直居中\"></a>2.  可视区域内水平垂直居中</h3><p>把上面例子改为<code>position: fixed; z-index: 999</code>, 设置一个较大值的<code>z-index</code>; 如果不给这个块级元素设置宽高则会占满整个屏幕.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fixed-center\"</span>&gt;</span>固定定位水平垂直居中<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fixed-center</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\tposition: fixed;;</span><br><span class=\"line\">\t<span class=\"selector-tag\">z-index</span>: 999;</span><br><span class=\"line\">\t<span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">rgba</span>(0, 0, 0, <span class=\"selector-class\">.3</span>);</span><br><span class=\"line\">\t<span class=\"selector-tag\">top</span>: 0; </span><br><span class=\"line\">\t<span class=\"selector-tag\">left</span>: 0;</span><br><span class=\"line\">\t<span class=\"selector-tag\">bottom</span>: 0; </span><br><span class=\"line\">\t<span class=\"selector-tag\">right</span>: 0; </span><br><span class=\"line\">\t<span class=\"selector-tag\">margin</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\">\t<span class=\"selector-tag\">line-height</span>: 200<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">\t<span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"selector-tag\">text-align</span>: <span class=\"selector-tag\">center</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"3-边栏垂直居中\"><a href=\"#3-边栏垂直居中\" class=\"headerlink\" title=\"3. 边栏垂直居中\"></a>3. 边栏垂直居中</h3><p>有时需要将一个内容块固定在屏幕的左侧或者右侧, 可以向内容快加入像这样的 CSS 代码<code>top: 20px; bottom: auto;</code>; 由于已经声明了<code>margin: auto</code>, 内容块将会垂直居中在你定义的<code>top</code>/ <code>right</code>/ <code>bottom</code>/ <code>left</code>边界值内. 可以用<code>left: 0; right: auto</code>将内容快固定在左侧; <code>right: 0; left: auto;</code>将内容固定在右侧.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"absolute-left\"</span>&gt;</span></span><br><span class=\"line\">\t绝对定位在左侧</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"absolute-right\"</span>&gt;</span></span><br><span class=\"line\">\t绝对定位在右侧</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.absolute-left</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.absolute-right</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"4-自适应绝对定位居中\"><a href=\"#4-自适应绝对定位居中\" class=\"headerlink\" title=\"4. 自适应绝对定位居中\"></a>4. 自适应绝对定位居中</h3><p>自适应绝对居中的优势就是对百分比的宽高完美支持, 甚至是<code>max-width/ min-width</code>或者是<code>max-height/ max-width</code>, 即使加上<code>padding</code>也不会影响绝对居中的实现.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper-responsive\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"absolute-responsive\"</span>&gt;</span></span><br><span class=\"line\">\t\t自适应绝对定位居中</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper-responsive</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: thin solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.absolute-responsive</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">min-width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">max-width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: skyblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"5-内容溢出\"><a href=\"#5-内容溢出\" class=\"headerlink\" title=\"5. 内容溢出\"></a>5. 内容溢出</h3><p>有时内容块的内容过多导致高度大于父级元素, 内容就会显示到块和容器的外面, 这种时候加个给内容块<code>overflow: auto</code>即可, 如果内容块没有<code>padding</code>的话加个<code>max-height: 100%</code>也行.</p>\n</blockquote>\n<blockquote>\n<h3 id=\"6-可变高度\"><a href=\"#6-可变高度\" class=\"headerlink\" title=\"6. 可变高度\"></a>6. 可变高度</h3><p>设置<code>display: table</code>, 内容块会垂直居上不过水平还是居中. 但是这个在一些浏览器上有问题( 如: IE/ FF); <code>display: table-cell</code>配合<code>vertical-align: middle;</code>也可实现垂直水平居中.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper-table\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table-center\"</span>&gt;</span></span><br><span class=\"line\">\t\ttable 水平居中</span><br><span class=\"line\">\t\t内容内容内容内容内容内容内容内容内容内容内</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper-table-cell\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table-center-cell\"</span>&gt;</span></span><br><span class=\"line\">\t\ttable-cell 居中</span><br><span class=\"line\">\t\t内容内容内容内容内容内容内容内容内容内容内</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* tabel 居中 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.wrapper-table</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: thin solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.table-center</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* tabel-cell 居中 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.wrapper-table-cell</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: thin solid black;</span><br><span class=\"line\">\t<span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.table-center-cell</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#FFD34E</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"6-负外边距\"><a href=\"#6-负外边距\" class=\"headerlink\" title=\"6. 负外边距\"></a>6. 负外边距</h3><p>这个方法应该是很常用的方法了, 已知元素的宽高: 外边距<code>margin</code>的值取负数(没有<code>box-sizing: border-box</code>的情况下, 包括<code>padding</code>), 大小为 <code>width/ height</code>的一半, 再加上<code>top: 50%; left: 50%</code>, 这个不能自适应哦.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper-margin\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"margin-center\"</span>&gt;</span></span><br><span class=\"line\">\t\tmargin 居中</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper-margin</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: thin solid black;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.margin-center</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#105B63</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: -<span class=\"number\">50px</span> auto auto -<span class=\"number\">50px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"7-变形\"><a href=\"#7-变形\" class=\"headerlink\" title=\"7. 变形\"></a>7. 变形</h3><p>这可以说是最简单的方法了, 不仅可以实现绝对居中的想过还可以实现可变宽高度. 内容块定义<code>transform: translate(-50%, -50%)</code>带上浏览器前缀, 再加上<code>top: 50%; left: 50%</code>即可.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper-transform\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"transform-center\"</span>&gt;</span></span><br><span class=\"line\">\t\ttransform 居中</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper-transform</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: thin solid black;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.transform-center</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#BD4932</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">\t<span class=\"attribute\">-ms-transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">\t<span class=\"attribute\">-o-transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">\t<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"8-Flexbox\"><a href=\"#8-Flexbox\" class=\"headerlink\" title=\"8. Flexbox\"></a>8. Flexbox</h3><p>CSS3的新属性也叫弹性盒子, 它不仅可以解决居中的问题还可以分栏或者其他的一些布局问题. 这里不多解释, 下次做一个详细的说明.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper-flex\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-center\"</span>&gt;</span></span><br><span class=\"line\">\t\t弹性盒子居中</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper-flex</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: thin solid black;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">\t<span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-center</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: grey;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://caraws.github.io/Review-JavaScript/CSS/vertical-horizontal-center\" target=\"_blank\" rel=\"noopener\">预览地址</a></p>\n<p>Created on 2017-10-11 by Cara</p>\n"},{"title":"Flex 弹性盒子","date":"2017-11-23T11:15:28.000Z","_content":"Flex 是 Flexible box 的缩写(弹性布局), 用来为盒模型提供最大灵活性的布局, 更为方便的实现响应式布局.\n\n> 如何使用 Flex  \n任何一个容器都可以指定为一个 Flex 布局.  \n\n```css\n.box {\n\tdisplay: flex;\n}\n/* 行内元素 */\n.box{\n\tdisplay: inline-flex;\n}\n/* 内核为 webkit 的浏览器 */\n.box{\n\t/* Safari */\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n}\n```\n\n设定 Flex布局之后的子元素`float`/ `clear`/ `vertical-align`都将失效.\n\n#### 基本概念\n所有采用 Flex 布局的的元素都称为 Flex 容器, 它的所有资源都为 Flex 容器的容器成员, 成为 Flex 项目.\nFlex 容器都存在两根轴: 水平的主轴(main axis)和垂直的交叉轴(cross axis), 项目默认沿主轴排列. 每个项目占主轴的空间称为`main size`, 占交叉轴的空间称为`cross size`.\n\n#### Flex 容器的属性\n\n- flex-direction\n项目排列在主轴的方向 \n\n    ```css\n    .box {\n    \tflex-direction: row | row-reverse | column | column-reverse;\n    }\n    ```\n\t- row: 默认值, 主轴为水平方向, 起点为左边\n\t- row-reverse: 主轴为水平方向, 起点为右边\n\t- column: 主轴为交叉轴方向, 起点在顶部\n\t- column-reverse: 主轴为交叉轴方向, 起点在底部\n\t\n- flex-wrap\n项目在主轴上的换行方式\n\n    ```css\n    .box {\n    \tflex-wrap: nowrap | wrap | wrap-reverse;\n    }\n    ```\n\n\t- nowrap: 默认值, 不换行\n\t- wrap: 换行, 第一行在上面\n\t- wrap-reverse: 换行, 第一行在下面\n\t\n- flex-flow\n该属性为`flex-direction`和`flex-wrap`的缩写, 默认值为`row nowrap`\n\n```css\n.box {\n\tflex-flow: flex-direction || flex-wrap;\n}\n```\n\n- justify-content\n项目在主轴上的对齐方式, 所以它的对齐方式跟轴的方向有关\n\n    ```css\n    .box {\n    \tjustify-content: flex-start | center | space-around | space-between | flex-end;\n    }\n    ```\n\n\t- flex-start: 默认值, 左对齐\n\t- center: 居中\n\t- space-around: 左右居中对齐, 项目之间间隔为项目与边框的间隔大一倍\n\t- space-between: 两端对齐\n\t- flex-end: 右对齐 \n\n- align-items\n项目在交叉轴在的对齐方式, 与交叉轴方向有关\n\n    ```css\n    .box {\n    \talign-items: flex-start | center | baseline | stretch | flex-end;\n    }\n    ```\n\n\t- flex-start: 交叉轴起点对齐\n\t- center: 居中\n\t- baseline: 项目第一行文字基线对齐, 类似在文字的下划线位置\n\t- stretch: 默认值, 项目没有高度或为`auto`时, 占满整个容器\n\t- flex-end: 终点对齐\n    \n- align-content\n多根轴线对齐方式. 如果项目只有一根轴线, 该属性则不起作用. 跟`align-items`容易混淆, 区别在于 `align-content`项目有多行时起作用, 而`align-items`项目单行就可起作用.\n\n    ```css\n    .box {\n    \talign-content: flex-start | center | space-around | space-between | stretch | flex-end;\n    }\n    ```\n\n\t- flex-start: 交叉轴对齐方式\n\t- center: 居中\n\t- space-around: 左右居中对齐\n\t- space-between: 两端对齐\n\t- stretch: 默认值, 项目轴线占满整个交叉轴\n\n#### Flex 项目属性\n\n- order\n定义项目的排列顺序, 数值越小越靠前, 默认为0\n\n    ```css\n    .item {\n    \torder: <number>;\n    }\n    ```\n\n- flex-grow\n定义项目的放大比例, 默认为0(有剩余空间也不放大). 如果所有项目都为1, 它们将等分剩余空间; 如果其中一个项目为2, 其它项目为1, 那么属性为2的项目占据的剩余空间将比属性为1的项目大一倍\n\n    ```css\n    .item {\n    \tflex-grow: <number>;\n    }\n    ```\n\n- flex-shrink\n定义项目的缩小比例, 默认为1(如果空间不足, 将缩小). 如果所有项目都为1, 当空间不足时, 所有项目都将等比例缩小; 如果其中一个项目为0, 其它项目为1, 那么当空间不足时, 前者将不缩小\n\n    ```css\n    .item {\n    \tflex-shrink: <number>;\n    }\n    ```\n\n- flex-basis\n定义属性在分配多余空间之前项目占据的主轴空间(main size). 浏览器会根据这个属性计算是否有多于空间. 默认值为 auto(项目本身的大小). 如果不使用`box-sizing`来改变盒模型的话, 该属性将决定项目的内容盒(content-box)的宽或者高(宽或高取决于主轴的方向).\n\n    ```css\n    .item {\n    \t/* size 的单位可以为 px/ em/rem 百分比都行(负值无效) */\n    \tflex-basis: <size> | <content>;\n    }\n    ```\n\n\t- size: 跟宽高设置一样, 不多说.\n\t- content: css3 的几个 width 新属性. fill-available/ max-content/ min-content/ fit-content, 兼容性 IE 不支持.\n- flex\n该属性为`flex-grow`/`flex-shrink`和`flex-basis`的缩写, 默认值为 `0 1 auto`, 后两个属性可选\n\n    ```css\n    .item {\n    \tflex: none | flex-grow flex-shrink flex-basis\n    }\n    ```\n- align-self\n允许单个项目与其他项目有不同的对齐方式, 可覆盖`align-items`属性, 默认值为 auto, 继承父级元素的`align-items`属性, 没有的话等同于`stretch`\n\n    ```\n    .item {\n    \talign-self: auto | flex-start | center | stretch | baseline | flex-end;\n    }\n    ```\n除了 `auto`以外其他属性值跟`align-items`一样就不再重复了.\n\n> 说一下 CSS3 width 的几个新属性  \n> 需要带有私有前缀  \n\n- fill-available\n让元素自动100%得填充父级宽度, 让元素表现得像块级元素一样, `inline-block`的元素也可以自动填充, 顺便再父级加一个`line-height`让元素垂直居中.\n- max-content\n它的表现就像设置了`white-space:nowrap`一样, 元素的宽度取子元素中较大宽度的宽度\n- min-content\n它表示的不是子元素中宽度小的那个宽度, 而是内部元素最小宽度值最大的那个元素作为最终宽度. 比如: 一个`div`中, 有一张`img`的宽度为200px, 有一个`p`里面的文字可多可少里面有英文(如果文本全是中文, 最小宽度值就是一个中文的宽度, 如果夹杂英文, 由于英文默认不换行, 所以最小宽度值是最长单词的宽度), 所以假设这里英文的最长单词不足200px, 那么最终的元素宽度就为200px\n- fit-content\n设置该属性后, 不需要固定宽度, 在父级元素`margin: 0 auto`就可以实现水平居中了\n\nCreated on 2017-11-23 By Cara","source":"_posts/Flex-弹性盒子.md","raw":"---\ntitle: Flex 弹性盒子\ndate: 2017-11-23 19:15:28\ntags: \n- CSS\ncategories: \n- 复习\n---\nFlex 是 Flexible box 的缩写(弹性布局), 用来为盒模型提供最大灵活性的布局, 更为方便的实现响应式布局.\n\n> 如何使用 Flex  \n任何一个容器都可以指定为一个 Flex 布局.  \n\n```css\n.box {\n\tdisplay: flex;\n}\n/* 行内元素 */\n.box{\n\tdisplay: inline-flex;\n}\n/* 内核为 webkit 的浏览器 */\n.box{\n\t/* Safari */\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n}\n```\n\n设定 Flex布局之后的子元素`float`/ `clear`/ `vertical-align`都将失效.\n\n#### 基本概念\n所有采用 Flex 布局的的元素都称为 Flex 容器, 它的所有资源都为 Flex 容器的容器成员, 成为 Flex 项目.\nFlex 容器都存在两根轴: 水平的主轴(main axis)和垂直的交叉轴(cross axis), 项目默认沿主轴排列. 每个项目占主轴的空间称为`main size`, 占交叉轴的空间称为`cross size`.\n\n#### Flex 容器的属性\n\n- flex-direction\n项目排列在主轴的方向 \n\n    ```css\n    .box {\n    \tflex-direction: row | row-reverse | column | column-reverse;\n    }\n    ```\n\t- row: 默认值, 主轴为水平方向, 起点为左边\n\t- row-reverse: 主轴为水平方向, 起点为右边\n\t- column: 主轴为交叉轴方向, 起点在顶部\n\t- column-reverse: 主轴为交叉轴方向, 起点在底部\n\t\n- flex-wrap\n项目在主轴上的换行方式\n\n    ```css\n    .box {\n    \tflex-wrap: nowrap | wrap | wrap-reverse;\n    }\n    ```\n\n\t- nowrap: 默认值, 不换行\n\t- wrap: 换行, 第一行在上面\n\t- wrap-reverse: 换行, 第一行在下面\n\t\n- flex-flow\n该属性为`flex-direction`和`flex-wrap`的缩写, 默认值为`row nowrap`\n\n```css\n.box {\n\tflex-flow: flex-direction || flex-wrap;\n}\n```\n\n- justify-content\n项目在主轴上的对齐方式, 所以它的对齐方式跟轴的方向有关\n\n    ```css\n    .box {\n    \tjustify-content: flex-start | center | space-around | space-between | flex-end;\n    }\n    ```\n\n\t- flex-start: 默认值, 左对齐\n\t- center: 居中\n\t- space-around: 左右居中对齐, 项目之间间隔为项目与边框的间隔大一倍\n\t- space-between: 两端对齐\n\t- flex-end: 右对齐 \n\n- align-items\n项目在交叉轴在的对齐方式, 与交叉轴方向有关\n\n    ```css\n    .box {\n    \talign-items: flex-start | center | baseline | stretch | flex-end;\n    }\n    ```\n\n\t- flex-start: 交叉轴起点对齐\n\t- center: 居中\n\t- baseline: 项目第一行文字基线对齐, 类似在文字的下划线位置\n\t- stretch: 默认值, 项目没有高度或为`auto`时, 占满整个容器\n\t- flex-end: 终点对齐\n    \n- align-content\n多根轴线对齐方式. 如果项目只有一根轴线, 该属性则不起作用. 跟`align-items`容易混淆, 区别在于 `align-content`项目有多行时起作用, 而`align-items`项目单行就可起作用.\n\n    ```css\n    .box {\n    \talign-content: flex-start | center | space-around | space-between | stretch | flex-end;\n    }\n    ```\n\n\t- flex-start: 交叉轴对齐方式\n\t- center: 居中\n\t- space-around: 左右居中对齐\n\t- space-between: 两端对齐\n\t- stretch: 默认值, 项目轴线占满整个交叉轴\n\n#### Flex 项目属性\n\n- order\n定义项目的排列顺序, 数值越小越靠前, 默认为0\n\n    ```css\n    .item {\n    \torder: <number>;\n    }\n    ```\n\n- flex-grow\n定义项目的放大比例, 默认为0(有剩余空间也不放大). 如果所有项目都为1, 它们将等分剩余空间; 如果其中一个项目为2, 其它项目为1, 那么属性为2的项目占据的剩余空间将比属性为1的项目大一倍\n\n    ```css\n    .item {\n    \tflex-grow: <number>;\n    }\n    ```\n\n- flex-shrink\n定义项目的缩小比例, 默认为1(如果空间不足, 将缩小). 如果所有项目都为1, 当空间不足时, 所有项目都将等比例缩小; 如果其中一个项目为0, 其它项目为1, 那么当空间不足时, 前者将不缩小\n\n    ```css\n    .item {\n    \tflex-shrink: <number>;\n    }\n    ```\n\n- flex-basis\n定义属性在分配多余空间之前项目占据的主轴空间(main size). 浏览器会根据这个属性计算是否有多于空间. 默认值为 auto(项目本身的大小). 如果不使用`box-sizing`来改变盒模型的话, 该属性将决定项目的内容盒(content-box)的宽或者高(宽或高取决于主轴的方向).\n\n    ```css\n    .item {\n    \t/* size 的单位可以为 px/ em/rem 百分比都行(负值无效) */\n    \tflex-basis: <size> | <content>;\n    }\n    ```\n\n\t- size: 跟宽高设置一样, 不多说.\n\t- content: css3 的几个 width 新属性. fill-available/ max-content/ min-content/ fit-content, 兼容性 IE 不支持.\n- flex\n该属性为`flex-grow`/`flex-shrink`和`flex-basis`的缩写, 默认值为 `0 1 auto`, 后两个属性可选\n\n    ```css\n    .item {\n    \tflex: none | flex-grow flex-shrink flex-basis\n    }\n    ```\n- align-self\n允许单个项目与其他项目有不同的对齐方式, 可覆盖`align-items`属性, 默认值为 auto, 继承父级元素的`align-items`属性, 没有的话等同于`stretch`\n\n    ```\n    .item {\n    \talign-self: auto | flex-start | center | stretch | baseline | flex-end;\n    }\n    ```\n除了 `auto`以外其他属性值跟`align-items`一样就不再重复了.\n\n> 说一下 CSS3 width 的几个新属性  \n> 需要带有私有前缀  \n\n- fill-available\n让元素自动100%得填充父级宽度, 让元素表现得像块级元素一样, `inline-block`的元素也可以自动填充, 顺便再父级加一个`line-height`让元素垂直居中.\n- max-content\n它的表现就像设置了`white-space:nowrap`一样, 元素的宽度取子元素中较大宽度的宽度\n- min-content\n它表示的不是子元素中宽度小的那个宽度, 而是内部元素最小宽度值最大的那个元素作为最终宽度. 比如: 一个`div`中, 有一张`img`的宽度为200px, 有一个`p`里面的文字可多可少里面有英文(如果文本全是中文, 最小宽度值就是一个中文的宽度, 如果夹杂英文, 由于英文默认不换行, 所以最小宽度值是最长单词的宽度), 所以假设这里英文的最长单词不足200px, 那么最终的元素宽度就为200px\n- fit-content\n设置该属性后, 不需要固定宽度, 在父级元素`margin: 0 auto`就可以实现水平居中了\n\nCreated on 2017-11-23 By Cara","slug":"Flex-弹性盒子","published":1,"updated":"2018-05-05T09:23:03.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurols70006klu026z6lakf","content":"<p>Flex 是 Flexible box 的缩写(弹性布局), 用来为盒模型提供最大灵活性的布局, 更为方便的实现响应式布局.</p>\n<blockquote>\n<p>如何使用 Flex<br>任何一个容器都可以指定为一个 Flex 布局.  </p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 行内元素 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: inline-flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 内核为 webkit 的浏览器 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* Safari */</span></span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设定 Flex布局之后的子元素<code>float</code>/ <code>clear</code>/ <code>vertical-align</code>都将失效.</p>\n<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>所有采用 Flex 布局的的元素都称为 Flex 容器, 它的所有资源都为 Flex 容器的容器成员, 成为 Flex 项目.<br>Flex 容器都存在两根轴: 水平的主轴(main axis)和垂直的交叉轴(cross axis), 项目默认沿主轴排列. 每个项目占主轴的空间称为<code>main size</code>, 占交叉轴的空间称为<code>cross size</code>.</p>\n<h4 id=\"Flex-容器的属性\"><a href=\"#Flex-容器的属性\" class=\"headerlink\" title=\"Flex 容器的属性\"></a>Flex 容器的属性</h4><ul>\n<li><p>flex-direction<br>项目排列在主轴的方向 </p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>row: 默认值, 主轴为水平方向, 起点为左边</li>\n<li>row-reverse: 主轴为水平方向, 起点为右边</li>\n<li>column: 主轴为交叉轴方向, 起点在顶部</li>\n<li>column-reverse: 主轴为交叉轴方向, 起点在底部</li>\n</ul>\n</li>\n<li><p>flex-wrap<br>项目在主轴上的换行方式</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>nowrap: 默认值, 不换行</li>\n<li>wrap: 换行, 第一行在上面</li>\n<li>wrap-reverse: 换行, 第一行在下面</li>\n</ul>\n</li>\n<li><p>flex-flow<br>该属性为<code>flex-direction</code>和<code>flex-wrap</code>的缩写, 默认值为<code>row nowrap</code></p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-flow</span>: flex-direction || flex-wrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>justify-content<br>项目在主轴上的对齐方式, 所以它的对齐方式跟轴的方向有关</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">justify-content</span>: flex-start | center | space-around | space-between | flex-end;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>flex-start: 默认值, 左对齐</li>\n<li>center: 居中</li>\n<li>space-around: 左右居中对齐, 项目之间间隔为项目与边框的间隔大一倍</li>\n<li>space-between: 两端对齐</li>\n<li>flex-end: 右对齐 </li>\n</ul>\n</li>\n<li><p>align-items<br>项目在交叉轴在的对齐方式, 与交叉轴方向有关</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">align-items</span>: flex-start | center | baseline | stretch | flex-end;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>flex-start: 交叉轴起点对齐</li>\n<li>center: 居中</li>\n<li>baseline: 项目第一行文字基线对齐, 类似在文字的下划线位置</li>\n<li>stretch: 默认值, 项目没有高度或为<code>auto</code>时, 占满整个容器</li>\n<li>flex-end: 终点对齐</li>\n</ul>\n</li>\n<li><p>align-content<br>多根轴线对齐方式. 如果项目只有一根轴线, 该属性则不起作用. 跟<code>align-items</code>容易混淆, 区别在于 <code>align-content</code>项目有多行时起作用, 而<code>align-items</code>项目单行就可起作用.</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">align-content</span>: flex-start | center | space-around | space-between | stretch | flex-end;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>flex-start: 交叉轴对齐方式</li>\n<li>center: 居中</li>\n<li>space-around: 左右居中对齐</li>\n<li>space-between: 两端对齐</li>\n<li>stretch: 默认值, 项目轴线占满整个交叉轴</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Flex-项目属性\"><a href=\"#Flex-项目属性\" class=\"headerlink\" title=\"Flex 项目属性\"></a>Flex 项目属性</h4><ul>\n<li><p>order<br>定义项目的排列顺序, 数值越小越靠前, 默认为0</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">order</span>: &lt;number&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>flex-grow<br>定义项目的放大比例, 默认为0(有剩余空间也不放大). 如果所有项目都为1, 它们将等分剩余空间; 如果其中一个项目为2, 其它项目为1, 那么属性为2的项目占据的剩余空间将比属性为1的项目大一倍</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-grow</span>: &lt;number&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>flex-shrink<br>定义项目的缩小比例, 默认为1(如果空间不足, 将缩小). 如果所有项目都为1, 当空间不足时, 所有项目都将等比例缩小; 如果其中一个项目为0, 其它项目为1, 那么当空间不足时, 前者将不缩小</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-shrink</span>: &lt;number&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>flex-basis<br>定义属性在分配多余空间之前项目占据的主轴空间(main size). 浏览器会根据这个属性计算是否有多于空间. 默认值为 auto(项目本身的大小). 如果不使用<code>box-sizing</code>来改变盒模型的话, 该属性将决定项目的内容盒(content-box)的宽或者高(宽或高取决于主轴的方向).</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* size 的单位可以为 px/ em/rem 百分比都行(负值无效) */</span></span><br><span class=\"line\">\t<span class=\"attribute\">flex-basis</span>: &lt;size&gt; | &lt;content&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>size: 跟宽高设置一样, 不多说.</li>\n<li>content: css3 的几个 width 新属性. fill-available/ max-content/ min-content/ fit-content, 兼容性 IE 不支持.</li>\n</ul>\n</li>\n<li><p>flex<br>该属性为<code>flex-grow</code>/<code>flex-shrink</code>和<code>flex-basis</code>的缩写, 默认值为 <code>0 1 auto</code>, 后两个属性可选</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex</span>: none | flex-grow flex-shrink flex-basis</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>align-self<br>允许单个项目与其他项目有不同的对齐方式, 可覆盖<code>align-items</code>属性, 默认值为 auto, 继承父级元素的<code>align-items</code>属性, 没有的话等同于<code>stretch</code></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.item &#123;</span><br><span class=\"line\">\talign-self: auto | flex-start | center | stretch | baseline | flex-end;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>除了 <code>auto</code>以外其他属性值跟<code>align-items</code>一样就不再重复了.</p>\n<blockquote>\n<p>说一下 CSS3 width 的几个新属性<br>需要带有私有前缀  </p>\n</blockquote>\n<ul>\n<li>fill-available<br>让元素自动100%得填充父级宽度, 让元素表现得像块级元素一样, <code>inline-block</code>的元素也可以自动填充, 顺便再父级加一个<code>line-height</code>让元素垂直居中.</li>\n<li>max-content<br>它的表现就像设置了<code>white-space:nowrap</code>一样, 元素的宽度取子元素中较大宽度的宽度</li>\n<li>min-content<br>它表示的不是子元素中宽度小的那个宽度, 而是内部元素最小宽度值最大的那个元素作为最终宽度. 比如: 一个<code>div</code>中, 有一张<code>img</code>的宽度为200px, 有一个<code>p</code>里面的文字可多可少里面有英文(如果文本全是中文, 最小宽度值就是一个中文的宽度, 如果夹杂英文, 由于英文默认不换行, 所以最小宽度值是最长单词的宽度), 所以假设这里英文的最长单词不足200px, 那么最终的元素宽度就为200px</li>\n<li>fit-content<br>设置该属性后, 不需要固定宽度, 在父级元素<code>margin: 0 auto</code>就可以实现水平居中了</li>\n</ul>\n<p>Created on 2017-11-23 By Cara</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Flex 是 Flexible box 的缩写(弹性布局), 用来为盒模型提供最大灵活性的布局, 更为方便的实现响应式布局.</p>\n<blockquote>\n<p>如何使用 Flex<br>任何一个容器都可以指定为一个 Flex 布局.  </p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 行内元素 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: inline-flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 内核为 webkit 的浏览器 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* Safari */</span></span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设定 Flex布局之后的子元素<code>float</code>/ <code>clear</code>/ <code>vertical-align</code>都将失效.</p>\n<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>所有采用 Flex 布局的的元素都称为 Flex 容器, 它的所有资源都为 Flex 容器的容器成员, 成为 Flex 项目.<br>Flex 容器都存在两根轴: 水平的主轴(main axis)和垂直的交叉轴(cross axis), 项目默认沿主轴排列. 每个项目占主轴的空间称为<code>main size</code>, 占交叉轴的空间称为<code>cross size</code>.</p>\n<h4 id=\"Flex-容器的属性\"><a href=\"#Flex-容器的属性\" class=\"headerlink\" title=\"Flex 容器的属性\"></a>Flex 容器的属性</h4><ul>\n<li><p>flex-direction<br>项目排列在主轴的方向 </p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>row: 默认值, 主轴为水平方向, 起点为左边</li>\n<li>row-reverse: 主轴为水平方向, 起点为右边</li>\n<li>column: 主轴为交叉轴方向, 起点在顶部</li>\n<li>column-reverse: 主轴为交叉轴方向, 起点在底部</li>\n</ul>\n</li>\n<li><p>flex-wrap<br>项目在主轴上的换行方式</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>nowrap: 默认值, 不换行</li>\n<li>wrap: 换行, 第一行在上面</li>\n<li>wrap-reverse: 换行, 第一行在下面</li>\n</ul>\n</li>\n<li><p>flex-flow<br>该属性为<code>flex-direction</code>和<code>flex-wrap</code>的缩写, 默认值为<code>row nowrap</code></p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-flow</span>: flex-direction || flex-wrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>justify-content<br>项目在主轴上的对齐方式, 所以它的对齐方式跟轴的方向有关</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">justify-content</span>: flex-start | center | space-around | space-between | flex-end;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>flex-start: 默认值, 左对齐</li>\n<li>center: 居中</li>\n<li>space-around: 左右居中对齐, 项目之间间隔为项目与边框的间隔大一倍</li>\n<li>space-between: 两端对齐</li>\n<li>flex-end: 右对齐 </li>\n</ul>\n</li>\n<li><p>align-items<br>项目在交叉轴在的对齐方式, 与交叉轴方向有关</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">align-items</span>: flex-start | center | baseline | stretch | flex-end;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>flex-start: 交叉轴起点对齐</li>\n<li>center: 居中</li>\n<li>baseline: 项目第一行文字基线对齐, 类似在文字的下划线位置</li>\n<li>stretch: 默认值, 项目没有高度或为<code>auto</code>时, 占满整个容器</li>\n<li>flex-end: 终点对齐</li>\n</ul>\n</li>\n<li><p>align-content<br>多根轴线对齐方式. 如果项目只有一根轴线, 该属性则不起作用. 跟<code>align-items</code>容易混淆, 区别在于 <code>align-content</code>项目有多行时起作用, 而<code>align-items</code>项目单行就可起作用.</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">align-content</span>: flex-start | center | space-around | space-between | stretch | flex-end;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>flex-start: 交叉轴对齐方式</li>\n<li>center: 居中</li>\n<li>space-around: 左右居中对齐</li>\n<li>space-between: 两端对齐</li>\n<li>stretch: 默认值, 项目轴线占满整个交叉轴</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Flex-项目属性\"><a href=\"#Flex-项目属性\" class=\"headerlink\" title=\"Flex 项目属性\"></a>Flex 项目属性</h4><ul>\n<li><p>order<br>定义项目的排列顺序, 数值越小越靠前, 默认为0</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">order</span>: &lt;number&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>flex-grow<br>定义项目的放大比例, 默认为0(有剩余空间也不放大). 如果所有项目都为1, 它们将等分剩余空间; 如果其中一个项目为2, 其它项目为1, 那么属性为2的项目占据的剩余空间将比属性为1的项目大一倍</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-grow</span>: &lt;number&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>flex-shrink<br>定义项目的缩小比例, 默认为1(如果空间不足, 将缩小). 如果所有项目都为1, 当空间不足时, 所有项目都将等比例缩小; 如果其中一个项目为0, 其它项目为1, 那么当空间不足时, 前者将不缩小</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-shrink</span>: &lt;number&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>flex-basis<br>定义属性在分配多余空间之前项目占据的主轴空间(main size). 浏览器会根据这个属性计算是否有多于空间. 默认值为 auto(项目本身的大小). 如果不使用<code>box-sizing</code>来改变盒模型的话, 该属性将决定项目的内容盒(content-box)的宽或者高(宽或高取决于主轴的方向).</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* size 的单位可以为 px/ em/rem 百分比都行(负值无效) */</span></span><br><span class=\"line\">\t<span class=\"attribute\">flex-basis</span>: &lt;size&gt; | &lt;content&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>size: 跟宽高设置一样, 不多说.</li>\n<li>content: css3 的几个 width 新属性. fill-available/ max-content/ min-content/ fit-content, 兼容性 IE 不支持.</li>\n</ul>\n</li>\n<li><p>flex<br>该属性为<code>flex-grow</code>/<code>flex-shrink</code>和<code>flex-basis</code>的缩写, 默认值为 <code>0 1 auto</code>, 后两个属性可选</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex</span>: none | flex-grow flex-shrink flex-basis</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>align-self<br>允许单个项目与其他项目有不同的对齐方式, 可覆盖<code>align-items</code>属性, 默认值为 auto, 继承父级元素的<code>align-items</code>属性, 没有的话等同于<code>stretch</code></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.item &#123;</span><br><span class=\"line\">\talign-self: auto | flex-start | center | stretch | baseline | flex-end;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>除了 <code>auto</code>以外其他属性值跟<code>align-items</code>一样就不再重复了.</p>\n<blockquote>\n<p>说一下 CSS3 width 的几个新属性<br>需要带有私有前缀  </p>\n</blockquote>\n<ul>\n<li>fill-available<br>让元素自动100%得填充父级宽度, 让元素表现得像块级元素一样, <code>inline-block</code>的元素也可以自动填充, 顺便再父级加一个<code>line-height</code>让元素垂直居中.</li>\n<li>max-content<br>它的表现就像设置了<code>white-space:nowrap</code>一样, 元素的宽度取子元素中较大宽度的宽度</li>\n<li>min-content<br>它表示的不是子元素中宽度小的那个宽度, 而是内部元素最小宽度值最大的那个元素作为最终宽度. 比如: 一个<code>div</code>中, 有一张<code>img</code>的宽度为200px, 有一个<code>p</code>里面的文字可多可少里面有英文(如果文本全是中文, 最小宽度值就是一个中文的宽度, 如果夹杂英文, 由于英文默认不换行, 所以最小宽度值是最长单词的宽度), 所以假设这里英文的最长单词不足200px, 那么最终的元素宽度就为200px</li>\n<li>fit-content<br>设置该属性后, 不需要固定宽度, 在父级元素<code>margin: 0 auto</code>就可以实现水平居中了</li>\n</ul>\n<p>Created on 2017-11-23 By Cara</p>\n"},{"title":"《图解 HTTP》(上)","date":"2018-01-03T14:03:05.000Z","_content":"Web使用HTTP(HyperText Transfer Protocal) 超文本传输协议作为规范, 完成从客户端到服务端的一系列流程. 可以说 Web 是在 HTTP 协议上通信的.\n\n### 1.0 网络基础TCP/IP\n通常我们使用的网络是在 TCP/IP 协议族的基础上运行的, 而 HTTP 是属于 TCP/IP 族群中的一种协议. 在计算机和网络相互通信的时候, 两者都必须要遵守同一种协议.\n\n#### 1.1 TCP/ IP分层管理\nTCP/IP协议族里最重要的一点就是分层, 每一层就只需要专注于自己任务就行了, 按层次分别为以下四层:\n\n1. 应用层\n决定向用户提供应用服务时的通信活动, 在 TCP/IP 中预存了各类通用的应用服务. 比如: FTP(File Transfer Protocol, 文件传输协议)和 DNS(Domain Name System, 域名系统), HTTP 协议也属于这层.\n\n2. 传输层\n给两个计算机在网络中提供数据传输. TCP(传输控制协议)和 UDP(用户数据报协议)\n\n3. 网络层\n处理网上流动的数据包, 决定数据通过哪条传输路线到对方计算机并把数据传输给对方.\n\n4. 链路层\n处理连接网络的硬件部分. 网卡/ 驱动/ 光纤什么的\n\n#### 1.2 TCP/IP 传输流程\nTCP/IP 在网络通信时, 会按照分层顺序与对方通信. 发送端从应用层往下, 接收端从应用端网上.\n\n![TCP/IP传输流程](/img/http.jpg)\n\n### 2.0 与 HTTP 关系密切的协议: IP/TCP 和 DNS\n\n- 负责传输的 IP 协议\n将数据包传递给对方并确认到达, 确认到达的重要条件包括: IP 地址和 MAC 地址.\n![IP](/img/ip.jpg)\n- 确保可靠性的 TCP 协议\n为了方便传输将大数据包分割成以报文段为单位的数据包进行管理, 再将数据准确可靠的传递给对方. 那么如何准确可靠的传递给对方呢, 所以就有了TCP 的三次握手策略: 发送端先发送一个带有 `SYN`标志的数据包给对方, 接收端回传一个带有`SYN/ACK`标志的数据包传达确认信息, 最后发送端再回传一个带有`ACK`标志的数据包, 代表握手结束.\n![TCP](/img/tcp.jpg)\n- 负责域名协议的 DNS 服务\n提供域名到 IP 地址之间解析服务.\n![DNS](/img/dns.jpg)\n\n#### 2.1 HTTP 协议的通信过程\n通过一整套流程来看一下, IP协议/ TCP协议 和 DNS服务在 HTTP协议的通信过程中各自发挥了什么作用.\n![HTTP协议通信过程](/img/HTTP_IP_TCP_DNS.jpg)\n\n**从上图来看, 从输入一个网址到页面的展示过程大致如下:**\n1. 域名解析(DNS 服务)\n2. 建立TCP, 发送 HTTP 请求(三次握手)\n    1. 客户端向服务器发送请求(SYN)\n    2. 服务器应答并要求确认(SYN/ACK)\n    3. 客户端确认(ACK)\n3. IP 搜索对方地址, 一边中转一边传输数据包\n4. 服务器处理请求返回 HTTP 响应报文\n5. 连接结束(四次挥手)\n    1. 客户端发送一个 FIN 来告诉服务器数据发送完毕\n    2. 服务器收到这个 FIN 之后回发一个 ACK(这个时候服务器还可以向客户端发送数据)\n    3. 服务器发送一个 FIN 告诉客户端服务器的数据发送完毕, 请求关闭连接\n    4. 客户端回发 ACK 确认, 关闭连接\n6. 浏览器解析渲染页面\n\n#### 2.2 HTTP 是否保存状态\nHTTP 是一种不保存状态(无状态)协议, 协议本身不会保留之前的请求或响应报文的信息. 这是为了更快的处理大量请求, 但是随着 Web 发展\n很多业务都需要保存用户的状态, 因此引入 Cookie 来管理状态.\n\n### 3.0 HTTP 返回状态码\n状态码是用来告诉客户端从服务器响应的请求结果, 可以通过状态码知道该次请求是正常处理了还是发生了错误.\n\n#### 3.1 状态码的类别\n\n| | 类别 | 原因短句 |\n| -- |:----- |:-----|\n| 1XX | 信息类 | 接收的请求正在处理 |\n| 2XX | 成功类 | 请求正常处理完毕 |\n| 3XX | 重定向类 | 需要附加操作完成请求 |\n| 4XX | 客户端错误类 | 服务器无法处理请求 |\n| 5XX | 服务器错误类 | 服务器发生错误 |\n\n#### 3.2 具有代表性的14种状态码\n\n- 2XX 成功类\n\t1.  200 OK\n\t表示请求在服务端被正常处理了\n\t2. 204  No Content\n\t表示请求处理成功但是响应报文不包含实体的主体(本身也不允许返回实体的主体)\n\t3. 206  Partial Content\n\t服务端成功处理了客户端发出的范围请求\n- 3XX 重定向\n\t1. 301 Moved Permanently\n\t永久性重定向. 请求的资源已经被分配了新的 URI 应该使用新的 URI\n\t2. 302 Found\n\t临时性重定向. 请求的资源被分配了新的 URI, 希望本次请求用新的 URI\n\t3. 303 See Other\n\t请求的资源存在另一个 URI, 应使用 GET 方法定向获取请求的资源(跟302的功能相同)\n\t4. 304 Not Modified\n\t表示请求时附带了条件, 服务端允许请求资源但为满足条件. 所以返回时, 不包含任何响应的主体部分(跟重定向并没有半毛钱关系).\n\t5. 307 Temporary Redirect\n\t临时重定向, 跟302有着同样的一样. 尽管302标准不允许 POST 变为 GET, 但是并没有人遵守; 307会遵守标准但是处理响应时, 每个浏览器有可能出现不同的情况\n- 4XX 客户端错误\n\t1. 400 Bad Request\n\t请求报文中有语法错误\n\t2. 401 Unauthorized\n\t请求需要通过 HTTP 认证\n\t3. 403 Forbidden\n\t请求资源访问被服务端拒绝(一般都是权限问题)\n\t4. 404 Not Found\n\t服务端上无法找到请求的资源\n\t5. 405 Not Allow\n\t对于请求的资源, 服务端不允许使用请求中使用的方法\n- 5XX 服务器错误\n\t1. 500 Internal Server Error\n\t服务端在执行请求任务时发生错误\n\t2. 503 Service Unavailable\n\t服务端暂时处于超负载或者停机维护, 无法处理请求(一般就是服务器挂了)\n\n#### 总结\n主要为了大致了解一下 HTTP 的基础/大概的执行流程和常见的HTTP 状态码. 对于状态码之前一直分不太清301和302的区别, 简单的来说: 301 改变资源的URI 后, 如果这个资源是被保存在书签中的, 那么这时要根据新的 URI 保存; 302 表示这个资源只是临时性的移动, 之后这个 URI 可能还会变化. 那么如果也被保存在了书签中, 仍然会保留原来的 URI. 状态码中的 304 放在下次放在缓存策略中再捋一捋吧.\n\nCreate on 2018-1-3 By Cara","source":"_posts/HTTP-上.md","raw":"---\ntitle: 《图解 HTTP》(上)\ndate: 2018-01-03 22:03:05\ntags:\n- HTTP\ncategories:\n- 笔记📒\n---\nWeb使用HTTP(HyperText Transfer Protocal) 超文本传输协议作为规范, 完成从客户端到服务端的一系列流程. 可以说 Web 是在 HTTP 协议上通信的.\n\n### 1.0 网络基础TCP/IP\n通常我们使用的网络是在 TCP/IP 协议族的基础上运行的, 而 HTTP 是属于 TCP/IP 族群中的一种协议. 在计算机和网络相互通信的时候, 两者都必须要遵守同一种协议.\n\n#### 1.1 TCP/ IP分层管理\nTCP/IP协议族里最重要的一点就是分层, 每一层就只需要专注于自己任务就行了, 按层次分别为以下四层:\n\n1. 应用层\n决定向用户提供应用服务时的通信活动, 在 TCP/IP 中预存了各类通用的应用服务. 比如: FTP(File Transfer Protocol, 文件传输协议)和 DNS(Domain Name System, 域名系统), HTTP 协议也属于这层.\n\n2. 传输层\n给两个计算机在网络中提供数据传输. TCP(传输控制协议)和 UDP(用户数据报协议)\n\n3. 网络层\n处理网上流动的数据包, 决定数据通过哪条传输路线到对方计算机并把数据传输给对方.\n\n4. 链路层\n处理连接网络的硬件部分. 网卡/ 驱动/ 光纤什么的\n\n#### 1.2 TCP/IP 传输流程\nTCP/IP 在网络通信时, 会按照分层顺序与对方通信. 发送端从应用层往下, 接收端从应用端网上.\n\n![TCP/IP传输流程](/img/http.jpg)\n\n### 2.0 与 HTTP 关系密切的协议: IP/TCP 和 DNS\n\n- 负责传输的 IP 协议\n将数据包传递给对方并确认到达, 确认到达的重要条件包括: IP 地址和 MAC 地址.\n![IP](/img/ip.jpg)\n- 确保可靠性的 TCP 协议\n为了方便传输将大数据包分割成以报文段为单位的数据包进行管理, 再将数据准确可靠的传递给对方. 那么如何准确可靠的传递给对方呢, 所以就有了TCP 的三次握手策略: 发送端先发送一个带有 `SYN`标志的数据包给对方, 接收端回传一个带有`SYN/ACK`标志的数据包传达确认信息, 最后发送端再回传一个带有`ACK`标志的数据包, 代表握手结束.\n![TCP](/img/tcp.jpg)\n- 负责域名协议的 DNS 服务\n提供域名到 IP 地址之间解析服务.\n![DNS](/img/dns.jpg)\n\n#### 2.1 HTTP 协议的通信过程\n通过一整套流程来看一下, IP协议/ TCP协议 和 DNS服务在 HTTP协议的通信过程中各自发挥了什么作用.\n![HTTP协议通信过程](/img/HTTP_IP_TCP_DNS.jpg)\n\n**从上图来看, 从输入一个网址到页面的展示过程大致如下:**\n1. 域名解析(DNS 服务)\n2. 建立TCP, 发送 HTTP 请求(三次握手)\n    1. 客户端向服务器发送请求(SYN)\n    2. 服务器应答并要求确认(SYN/ACK)\n    3. 客户端确认(ACK)\n3. IP 搜索对方地址, 一边中转一边传输数据包\n4. 服务器处理请求返回 HTTP 响应报文\n5. 连接结束(四次挥手)\n    1. 客户端发送一个 FIN 来告诉服务器数据发送完毕\n    2. 服务器收到这个 FIN 之后回发一个 ACK(这个时候服务器还可以向客户端发送数据)\n    3. 服务器发送一个 FIN 告诉客户端服务器的数据发送完毕, 请求关闭连接\n    4. 客户端回发 ACK 确认, 关闭连接\n6. 浏览器解析渲染页面\n\n#### 2.2 HTTP 是否保存状态\nHTTP 是一种不保存状态(无状态)协议, 协议本身不会保留之前的请求或响应报文的信息. 这是为了更快的处理大量请求, 但是随着 Web 发展\n很多业务都需要保存用户的状态, 因此引入 Cookie 来管理状态.\n\n### 3.0 HTTP 返回状态码\n状态码是用来告诉客户端从服务器响应的请求结果, 可以通过状态码知道该次请求是正常处理了还是发生了错误.\n\n#### 3.1 状态码的类别\n\n| | 类别 | 原因短句 |\n| -- |:----- |:-----|\n| 1XX | 信息类 | 接收的请求正在处理 |\n| 2XX | 成功类 | 请求正常处理完毕 |\n| 3XX | 重定向类 | 需要附加操作完成请求 |\n| 4XX | 客户端错误类 | 服务器无法处理请求 |\n| 5XX | 服务器错误类 | 服务器发生错误 |\n\n#### 3.2 具有代表性的14种状态码\n\n- 2XX 成功类\n\t1.  200 OK\n\t表示请求在服务端被正常处理了\n\t2. 204  No Content\n\t表示请求处理成功但是响应报文不包含实体的主体(本身也不允许返回实体的主体)\n\t3. 206  Partial Content\n\t服务端成功处理了客户端发出的范围请求\n- 3XX 重定向\n\t1. 301 Moved Permanently\n\t永久性重定向. 请求的资源已经被分配了新的 URI 应该使用新的 URI\n\t2. 302 Found\n\t临时性重定向. 请求的资源被分配了新的 URI, 希望本次请求用新的 URI\n\t3. 303 See Other\n\t请求的资源存在另一个 URI, 应使用 GET 方法定向获取请求的资源(跟302的功能相同)\n\t4. 304 Not Modified\n\t表示请求时附带了条件, 服务端允许请求资源但为满足条件. 所以返回时, 不包含任何响应的主体部分(跟重定向并没有半毛钱关系).\n\t5. 307 Temporary Redirect\n\t临时重定向, 跟302有着同样的一样. 尽管302标准不允许 POST 变为 GET, 但是并没有人遵守; 307会遵守标准但是处理响应时, 每个浏览器有可能出现不同的情况\n- 4XX 客户端错误\n\t1. 400 Bad Request\n\t请求报文中有语法错误\n\t2. 401 Unauthorized\n\t请求需要通过 HTTP 认证\n\t3. 403 Forbidden\n\t请求资源访问被服务端拒绝(一般都是权限问题)\n\t4. 404 Not Found\n\t服务端上无法找到请求的资源\n\t5. 405 Not Allow\n\t对于请求的资源, 服务端不允许使用请求中使用的方法\n- 5XX 服务器错误\n\t1. 500 Internal Server Error\n\t服务端在执行请求任务时发生错误\n\t2. 503 Service Unavailable\n\t服务端暂时处于超负载或者停机维护, 无法处理请求(一般就是服务器挂了)\n\n#### 总结\n主要为了大致了解一下 HTTP 的基础/大概的执行流程和常见的HTTP 状态码. 对于状态码之前一直分不太清301和302的区别, 简单的来说: 301 改变资源的URI 后, 如果这个资源是被保存在书签中的, 那么这时要根据新的 URI 保存; 302 表示这个资源只是临时性的移动, 之后这个 URI 可能还会变化. 那么如果也被保存在了书签中, 仍然会保留原来的 URI. 状态码中的 304 放在下次放在缓存策略中再捋一捋吧.\n\nCreate on 2018-1-3 By Cara","slug":"HTTP-上","published":1,"updated":"2018-05-05T09:23:03.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurols80007klu051p1vj2i","content":"<p>Web使用HTTP(HyperText Transfer Protocal) 超文本传输协议作为规范, 完成从客户端到服务端的一系列流程. 可以说 Web 是在 HTTP 协议上通信的.</p>\n<h3 id=\"1-0-网络基础TCP-IP\"><a href=\"#1-0-网络基础TCP-IP\" class=\"headerlink\" title=\"1.0 网络基础TCP/IP\"></a>1.0 网络基础TCP/IP</h3><p>通常我们使用的网络是在 TCP/IP 协议族的基础上运行的, 而 HTTP 是属于 TCP/IP 族群中的一种协议. 在计算机和网络相互通信的时候, 两者都必须要遵守同一种协议.</p>\n<h4 id=\"1-1-TCP-IP分层管理\"><a href=\"#1-1-TCP-IP分层管理\" class=\"headerlink\" title=\"1.1 TCP/ IP分层管理\"></a>1.1 TCP/ IP分层管理</h4><p>TCP/IP协议族里最重要的一点就是分层, 每一层就只需要专注于自己任务就行了, 按层次分别为以下四层:</p>\n<ol>\n<li><p>应用层<br>决定向用户提供应用服务时的通信活动, 在 TCP/IP 中预存了各类通用的应用服务. 比如: FTP(File Transfer Protocol, 文件传输协议)和 DNS(Domain Name System, 域名系统), HTTP 协议也属于这层.</p>\n</li>\n<li><p>传输层<br>给两个计算机在网络中提供数据传输. TCP(传输控制协议)和 UDP(用户数据报协议)</p>\n</li>\n<li><p>网络层<br>处理网上流动的数据包, 决定数据通过哪条传输路线到对方计算机并把数据传输给对方.</p>\n</li>\n<li><p>链路层<br>处理连接网络的硬件部分. 网卡/ 驱动/ 光纤什么的</p>\n</li>\n</ol>\n<h4 id=\"1-2-TCP-IP-传输流程\"><a href=\"#1-2-TCP-IP-传输流程\" class=\"headerlink\" title=\"1.2 TCP/IP 传输流程\"></a>1.2 TCP/IP 传输流程</h4><p>TCP/IP 在网络通信时, 会按照分层顺序与对方通信. 发送端从应用层往下, 接收端从应用端网上.</p>\n<p><img src=\"/img/http.jpg\" alt=\"TCP/IP传输流程\"></p>\n<h3 id=\"2-0-与-HTTP-关系密切的协议-IP-TCP-和-DNS\"><a href=\"#2-0-与-HTTP-关系密切的协议-IP-TCP-和-DNS\" class=\"headerlink\" title=\"2.0 与 HTTP 关系密切的协议: IP/TCP 和 DNS\"></a>2.0 与 HTTP 关系密切的协议: IP/TCP 和 DNS</h3><ul>\n<li>负责传输的 IP 协议<br>将数据包传递给对方并确认到达, 确认到达的重要条件包括: IP 地址和 MAC 地址.<br><img src=\"/img/ip.jpg\" alt=\"IP\"></li>\n<li>确保可靠性的 TCP 协议<br>为了方便传输将大数据包分割成以报文段为单位的数据包进行管理, 再将数据准确可靠的传递给对方. 那么如何准确可靠的传递给对方呢, 所以就有了TCP 的三次握手策略: 发送端先发送一个带有 <code>SYN</code>标志的数据包给对方, 接收端回传一个带有<code>SYN/ACK</code>标志的数据包传达确认信息, 最后发送端再回传一个带有<code>ACK</code>标志的数据包, 代表握手结束.<br><img src=\"/img/tcp.jpg\" alt=\"TCP\"></li>\n<li>负责域名协议的 DNS 服务<br>提供域名到 IP 地址之间解析服务.<br><img src=\"/img/dns.jpg\" alt=\"DNS\"></li>\n</ul>\n<h4 id=\"2-1-HTTP-协议的通信过程\"><a href=\"#2-1-HTTP-协议的通信过程\" class=\"headerlink\" title=\"2.1 HTTP 协议的通信过程\"></a>2.1 HTTP 协议的通信过程</h4><p>通过一整套流程来看一下, IP协议/ TCP协议 和 DNS服务在 HTTP协议的通信过程中各自发挥了什么作用.<br><img src=\"/img/HTTP_IP_TCP_DNS.jpg\" alt=\"HTTP协议通信过程\"></p>\n<p><strong>从上图来看, 从输入一个网址到页面的展示过程大致如下:</strong></p>\n<ol>\n<li>域名解析(DNS 服务)</li>\n<li>建立TCP, 发送 HTTP 请求(三次握手)<ol>\n<li>客户端向服务器发送请求(SYN)</li>\n<li>服务器应答并要求确认(SYN/ACK)</li>\n<li>客户端确认(ACK)</li>\n</ol>\n</li>\n<li>IP 搜索对方地址, 一边中转一边传输数据包</li>\n<li>服务器处理请求返回 HTTP 响应报文</li>\n<li>连接结束(四次挥手)<ol>\n<li>客户端发送一个 FIN 来告诉服务器数据发送完毕</li>\n<li>服务器收到这个 FIN 之后回发一个 ACK(这个时候服务器还可以向客户端发送数据)</li>\n<li>服务器发送一个 FIN 告诉客户端服务器的数据发送完毕, 请求关闭连接</li>\n<li>客户端回发 ACK 确认, 关闭连接</li>\n</ol>\n</li>\n<li>浏览器解析渲染页面</li>\n</ol>\n<h4 id=\"2-2-HTTP-是否保存状态\"><a href=\"#2-2-HTTP-是否保存状态\" class=\"headerlink\" title=\"2.2 HTTP 是否保存状态\"></a>2.2 HTTP 是否保存状态</h4><p>HTTP 是一种不保存状态(无状态)协议, 协议本身不会保留之前的请求或响应报文的信息. 这是为了更快的处理大量请求, 但是随着 Web 发展<br>很多业务都需要保存用户的状态, 因此引入 Cookie 来管理状态.</p>\n<h3 id=\"3-0-HTTP-返回状态码\"><a href=\"#3-0-HTTP-返回状态码\" class=\"headerlink\" title=\"3.0 HTTP 返回状态码\"></a>3.0 HTTP 返回状态码</h3><p>状态码是用来告诉客户端从服务器响应的请求结果, 可以通过状态码知道该次请求是正常处理了还是发生了错误.</p>\n<h4 id=\"3-1-状态码的类别\"><a href=\"#3-1-状态码的类别\" class=\"headerlink\" title=\"3.1 状态码的类别\"></a>3.1 状态码的类别</h4><table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:left\">类别</th>\n<th style=\"text-align:left\">原因短句</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1XX</td>\n<td style=\"text-align:left\">信息类</td>\n<td style=\"text-align:left\">接收的请求正在处理</td>\n</tr>\n<tr>\n<td>2XX</td>\n<td style=\"text-align:left\">成功类</td>\n<td style=\"text-align:left\">请求正常处理完毕</td>\n</tr>\n<tr>\n<td>3XX</td>\n<td style=\"text-align:left\">重定向类</td>\n<td style=\"text-align:left\">需要附加操作完成请求</td>\n</tr>\n<tr>\n<td>4XX</td>\n<td style=\"text-align:left\">客户端错误类</td>\n<td style=\"text-align:left\">服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td style=\"text-align:left\">服务器错误类</td>\n<td style=\"text-align:left\">服务器发生错误</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-2-具有代表性的14种状态码\"><a href=\"#3-2-具有代表性的14种状态码\" class=\"headerlink\" title=\"3.2 具有代表性的14种状态码\"></a>3.2 具有代表性的14种状态码</h4><ul>\n<li>2XX 成功类<ol>\n<li>200 OK<br>表示请求在服务端被正常处理了</li>\n<li>204  No Content<br>表示请求处理成功但是响应报文不包含实体的主体(本身也不允许返回实体的主体)</li>\n<li>206  Partial Content<br>服务端成功处理了客户端发出的范围请求</li>\n</ol>\n</li>\n<li>3XX 重定向<ol>\n<li>301 Moved Permanently<br>永久性重定向. 请求的资源已经被分配了新的 URI 应该使用新的 URI</li>\n<li>302 Found<br>临时性重定向. 请求的资源被分配了新的 URI, 希望本次请求用新的 URI</li>\n<li>303 See Other<br>请求的资源存在另一个 URI, 应使用 GET 方法定向获取请求的资源(跟302的功能相同)</li>\n<li>304 Not Modified<br>表示请求时附带了条件, 服务端允许请求资源但为满足条件. 所以返回时, 不包含任何响应的主体部分(跟重定向并没有半毛钱关系).</li>\n<li>307 Temporary Redirect<br>临时重定向, 跟302有着同样的一样. 尽管302标准不允许 POST 变为 GET, 但是并没有人遵守; 307会遵守标准但是处理响应时, 每个浏览器有可能出现不同的情况</li>\n</ol>\n</li>\n<li>4XX 客户端错误<ol>\n<li>400 Bad Request<br>请求报文中有语法错误</li>\n<li>401 Unauthorized<br>请求需要通过 HTTP 认证</li>\n<li>403 Forbidden<br>请求资源访问被服务端拒绝(一般都是权限问题)</li>\n<li>404 Not Found<br>服务端上无法找到请求的资源</li>\n<li>405 Not Allow<br>对于请求的资源, 服务端不允许使用请求中使用的方法</li>\n</ol>\n</li>\n<li>5XX 服务器错误<ol>\n<li>500 Internal Server Error<br>服务端在执行请求任务时发生错误</li>\n<li>503 Service Unavailable<br>服务端暂时处于超负载或者停机维护, 无法处理请求(一般就是服务器挂了)</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>主要为了大致了解一下 HTTP 的基础/大概的执行流程和常见的HTTP 状态码. 对于状态码之前一直分不太清301和302的区别, 简单的来说: 301 改变资源的URI 后, 如果这个资源是被保存在书签中的, 那么这时要根据新的 URI 保存; 302 表示这个资源只是临时性的移动, 之后这个 URI 可能还会变化. 那么如果也被保存在了书签中, 仍然会保留原来的 URI. 状态码中的 304 放在下次放在缓存策略中再捋一捋吧.</p>\n<p>Create on 2018-1-3 By Cara</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Web使用HTTP(HyperText Transfer Protocal) 超文本传输协议作为规范, 完成从客户端到服务端的一系列流程. 可以说 Web 是在 HTTP 协议上通信的.</p>\n<h3 id=\"1-0-网络基础TCP-IP\"><a href=\"#1-0-网络基础TCP-IP\" class=\"headerlink\" title=\"1.0 网络基础TCP/IP\"></a>1.0 网络基础TCP/IP</h3><p>通常我们使用的网络是在 TCP/IP 协议族的基础上运行的, 而 HTTP 是属于 TCP/IP 族群中的一种协议. 在计算机和网络相互通信的时候, 两者都必须要遵守同一种协议.</p>\n<h4 id=\"1-1-TCP-IP分层管理\"><a href=\"#1-1-TCP-IP分层管理\" class=\"headerlink\" title=\"1.1 TCP/ IP分层管理\"></a>1.1 TCP/ IP分层管理</h4><p>TCP/IP协议族里最重要的一点就是分层, 每一层就只需要专注于自己任务就行了, 按层次分别为以下四层:</p>\n<ol>\n<li><p>应用层<br>决定向用户提供应用服务时的通信活动, 在 TCP/IP 中预存了各类通用的应用服务. 比如: FTP(File Transfer Protocol, 文件传输协议)和 DNS(Domain Name System, 域名系统), HTTP 协议也属于这层.</p>\n</li>\n<li><p>传输层<br>给两个计算机在网络中提供数据传输. TCP(传输控制协议)和 UDP(用户数据报协议)</p>\n</li>\n<li><p>网络层<br>处理网上流动的数据包, 决定数据通过哪条传输路线到对方计算机并把数据传输给对方.</p>\n</li>\n<li><p>链路层<br>处理连接网络的硬件部分. 网卡/ 驱动/ 光纤什么的</p>\n</li>\n</ol>\n<h4 id=\"1-2-TCP-IP-传输流程\"><a href=\"#1-2-TCP-IP-传输流程\" class=\"headerlink\" title=\"1.2 TCP/IP 传输流程\"></a>1.2 TCP/IP 传输流程</h4><p>TCP/IP 在网络通信时, 会按照分层顺序与对方通信. 发送端从应用层往下, 接收端从应用端网上.</p>\n<p><img src=\"/img/http.jpg\" alt=\"TCP/IP传输流程\"></p>\n<h3 id=\"2-0-与-HTTP-关系密切的协议-IP-TCP-和-DNS\"><a href=\"#2-0-与-HTTP-关系密切的协议-IP-TCP-和-DNS\" class=\"headerlink\" title=\"2.0 与 HTTP 关系密切的协议: IP/TCP 和 DNS\"></a>2.0 与 HTTP 关系密切的协议: IP/TCP 和 DNS</h3><ul>\n<li>负责传输的 IP 协议<br>将数据包传递给对方并确认到达, 确认到达的重要条件包括: IP 地址和 MAC 地址.<br><img src=\"/img/ip.jpg\" alt=\"IP\"></li>\n<li>确保可靠性的 TCP 协议<br>为了方便传输将大数据包分割成以报文段为单位的数据包进行管理, 再将数据准确可靠的传递给对方. 那么如何准确可靠的传递给对方呢, 所以就有了TCP 的三次握手策略: 发送端先发送一个带有 <code>SYN</code>标志的数据包给对方, 接收端回传一个带有<code>SYN/ACK</code>标志的数据包传达确认信息, 最后发送端再回传一个带有<code>ACK</code>标志的数据包, 代表握手结束.<br><img src=\"/img/tcp.jpg\" alt=\"TCP\"></li>\n<li>负责域名协议的 DNS 服务<br>提供域名到 IP 地址之间解析服务.<br><img src=\"/img/dns.jpg\" alt=\"DNS\"></li>\n</ul>\n<h4 id=\"2-1-HTTP-协议的通信过程\"><a href=\"#2-1-HTTP-协议的通信过程\" class=\"headerlink\" title=\"2.1 HTTP 协议的通信过程\"></a>2.1 HTTP 协议的通信过程</h4><p>通过一整套流程来看一下, IP协议/ TCP协议 和 DNS服务在 HTTP协议的通信过程中各自发挥了什么作用.<br><img src=\"/img/HTTP_IP_TCP_DNS.jpg\" alt=\"HTTP协议通信过程\"></p>\n<p><strong>从上图来看, 从输入一个网址到页面的展示过程大致如下:</strong></p>\n<ol>\n<li>域名解析(DNS 服务)</li>\n<li>建立TCP, 发送 HTTP 请求(三次握手)<ol>\n<li>客户端向服务器发送请求(SYN)</li>\n<li>服务器应答并要求确认(SYN/ACK)</li>\n<li>客户端确认(ACK)</li>\n</ol>\n</li>\n<li>IP 搜索对方地址, 一边中转一边传输数据包</li>\n<li>服务器处理请求返回 HTTP 响应报文</li>\n<li>连接结束(四次挥手)<ol>\n<li>客户端发送一个 FIN 来告诉服务器数据发送完毕</li>\n<li>服务器收到这个 FIN 之后回发一个 ACK(这个时候服务器还可以向客户端发送数据)</li>\n<li>服务器发送一个 FIN 告诉客户端服务器的数据发送完毕, 请求关闭连接</li>\n<li>客户端回发 ACK 确认, 关闭连接</li>\n</ol>\n</li>\n<li>浏览器解析渲染页面</li>\n</ol>\n<h4 id=\"2-2-HTTP-是否保存状态\"><a href=\"#2-2-HTTP-是否保存状态\" class=\"headerlink\" title=\"2.2 HTTP 是否保存状态\"></a>2.2 HTTP 是否保存状态</h4><p>HTTP 是一种不保存状态(无状态)协议, 协议本身不会保留之前的请求或响应报文的信息. 这是为了更快的处理大量请求, 但是随着 Web 发展<br>很多业务都需要保存用户的状态, 因此引入 Cookie 来管理状态.</p>\n<h3 id=\"3-0-HTTP-返回状态码\"><a href=\"#3-0-HTTP-返回状态码\" class=\"headerlink\" title=\"3.0 HTTP 返回状态码\"></a>3.0 HTTP 返回状态码</h3><p>状态码是用来告诉客户端从服务器响应的请求结果, 可以通过状态码知道该次请求是正常处理了还是发生了错误.</p>\n<h4 id=\"3-1-状态码的类别\"><a href=\"#3-1-状态码的类别\" class=\"headerlink\" title=\"3.1 状态码的类别\"></a>3.1 状态码的类别</h4><table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:left\">类别</th>\n<th style=\"text-align:left\">原因短句</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1XX</td>\n<td style=\"text-align:left\">信息类</td>\n<td style=\"text-align:left\">接收的请求正在处理</td>\n</tr>\n<tr>\n<td>2XX</td>\n<td style=\"text-align:left\">成功类</td>\n<td style=\"text-align:left\">请求正常处理完毕</td>\n</tr>\n<tr>\n<td>3XX</td>\n<td style=\"text-align:left\">重定向类</td>\n<td style=\"text-align:left\">需要附加操作完成请求</td>\n</tr>\n<tr>\n<td>4XX</td>\n<td style=\"text-align:left\">客户端错误类</td>\n<td style=\"text-align:left\">服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td style=\"text-align:left\">服务器错误类</td>\n<td style=\"text-align:left\">服务器发生错误</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-2-具有代表性的14种状态码\"><a href=\"#3-2-具有代表性的14种状态码\" class=\"headerlink\" title=\"3.2 具有代表性的14种状态码\"></a>3.2 具有代表性的14种状态码</h4><ul>\n<li>2XX 成功类<ol>\n<li>200 OK<br>表示请求在服务端被正常处理了</li>\n<li>204  No Content<br>表示请求处理成功但是响应报文不包含实体的主体(本身也不允许返回实体的主体)</li>\n<li>206  Partial Content<br>服务端成功处理了客户端发出的范围请求</li>\n</ol>\n</li>\n<li>3XX 重定向<ol>\n<li>301 Moved Permanently<br>永久性重定向. 请求的资源已经被分配了新的 URI 应该使用新的 URI</li>\n<li>302 Found<br>临时性重定向. 请求的资源被分配了新的 URI, 希望本次请求用新的 URI</li>\n<li>303 See Other<br>请求的资源存在另一个 URI, 应使用 GET 方法定向获取请求的资源(跟302的功能相同)</li>\n<li>304 Not Modified<br>表示请求时附带了条件, 服务端允许请求资源但为满足条件. 所以返回时, 不包含任何响应的主体部分(跟重定向并没有半毛钱关系).</li>\n<li>307 Temporary Redirect<br>临时重定向, 跟302有着同样的一样. 尽管302标准不允许 POST 变为 GET, 但是并没有人遵守; 307会遵守标准但是处理响应时, 每个浏览器有可能出现不同的情况</li>\n</ol>\n</li>\n<li>4XX 客户端错误<ol>\n<li>400 Bad Request<br>请求报文中有语法错误</li>\n<li>401 Unauthorized<br>请求需要通过 HTTP 认证</li>\n<li>403 Forbidden<br>请求资源访问被服务端拒绝(一般都是权限问题)</li>\n<li>404 Not Found<br>服务端上无法找到请求的资源</li>\n<li>405 Not Allow<br>对于请求的资源, 服务端不允许使用请求中使用的方法</li>\n</ol>\n</li>\n<li>5XX 服务器错误<ol>\n<li>500 Internal Server Error<br>服务端在执行请求任务时发生错误</li>\n<li>503 Service Unavailable<br>服务端暂时处于超负载或者停机维护, 无法处理请求(一般就是服务器挂了)</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>主要为了大致了解一下 HTTP 的基础/大概的执行流程和常见的HTTP 状态码. 对于状态码之前一直分不太清301和302的区别, 简单的来说: 301 改变资源的URI 后, 如果这个资源是被保存在书签中的, 那么这时要根据新的 URI 保存; 302 表示这个资源只是临时性的移动, 之后这个 URI 可能还会变化. 那么如果也被保存在了书签中, 仍然会保留原来的 URI. 状态码中的 304 放在下次放在缓存策略中再捋一捋吧.</p>\n<p>Create on 2018-1-3 By Cara</p>\n"},{"title":"JavaScript 方法集","date":"2017-10-16T14:29:16.000Z","_content":"JavaScript包含了一套小型的可用在标准类型上的标准方法集,\n主要是针对数组/正则及字符串的一些处理.\n\n> ## Array\n\n### array.concat(item...)\nconcat 方法产生一个新的数组, 它包含的是一份 array 的浅复制\n并把参数 item 追加在其后. 如果 item 是数组, 那么这个数组的\n每个元素都会被添加.\n\n```javascript\nlet arr = [1, 2, 3];\nlet arr2 = [4, 5, 6];\nlet result = arr.concat(arr2, 'wow');\n\nconsole.log(result); // [1, 2, 3, 4, 5, 6, 'wow'];\n```\n\n### array.join(separator)\njoin 方法是把一个 array 以指定的分隔符构造成一个字符串.\n它先把 array 中的每个元素构造成一个字符串, 然后以指定的\n分隔符把它们都连接起来. 默认的 separate 是逗号, 可以用\n空字符串作为 separate.\n\n```javascript\nlet array = [\"a\", \"b\", \"c\"];\narray.push(\"d\");\n\nlet result = array(\"|\");\nconsole.log(result); // \"a|b|c|d\"\n```\n\n### array.pop()\npop 和 push 方法可以使 array 像堆栈一样工作. pop 方法移除数组\n中的最后一个元素并返回该元素, 如果是空数组, 它将返回 undefined.\n\n```javascript\nlet arr = [1, 2, 3];\narr.pop()\n\nconsole.log(arr); // 3\n```\n\n### array.push(item...)\npush 方法向数组的末尾添加一个或多个元素. 和 concat 方法不同的是, \n他会修改 array, 如果 item 是一个数组, 会将整个参数数组作为一个元素\n添加到 array 的末尾, 并返回这个新数组的长度.\n\n```javascript\nlet array = [1, 2, 3];\nlet arr = [4, 5, 6];\n\nlet result = array.push(arr. 'Hi');\nconsole.log(result); \n// array: [1, 2, 3, [4, 5, 6], 'Hi']\n// result: 5\n```\n\n### array.reverse()\nreverse 方法反转数组元素的顺序, 并返回数组本身.\n\n```javascript\nlet array = [1, 2, 3];\n\nlet result = array.reverse();\nconsole.log(result); // [3, 2, 1]\n```\n\n### array.shift()\nshift 方法移除数组中的第一个元素并返回该元素. 如果是空数组\n将会返回 undefined. shift 通常比 pop 慢得多.\n\n```javascript\nlet array = [1, 2, 3];\nlet result = array.shift();\n\nconsole.log(result); // 1\n\n```\n\n### array.slice(start, end)\nslice 方法是截取 array 中的一段做浅复制. 复制 array[start] 开始\n到复制 array[end]为止. end 参数是可选的, 默认值的长度是 array.length.\n如果 start 的值大于等于 array.length, 会得到一个新的空数组.\n\n```javascript\nlet array = [1, 2, 3];\n\nlet a  = array.slice(0, 1); // [1]\nlet b = array.slice(1); // [2, 3]\nlet c = array.slice(-1); // [3]\n\n```\n\n### array.sort(comparefn)\nsort 方法是对数组中的元素排序，但他的默认比较函数是把被排序的元素都视为\n字符串。 所以通常都是自己定义比较函数.\n\n```javascript\n// 对字符串和数字排序\nconst compare = (a, b) => {\n\tif (a === b) {\n\t\treturn 0\n\t}\n\tif (typeof a === typeof b) {\n\t\treturn  a < b ? -1 : 1\n\t}\n\treturn typeof a < typeof b ? -1 :1\n}\n\nlet array = ['bb', 'aa', 2, 'cc', 3, 1, 7];\n\nconsole.log(array.sort(compare())); // [ 1, 2, 3, 7, 'aa', 'bb', 'cc' ]\n```\n\n> 稳定性：排序后2个相等键值的顺序和排序之前它们的顺序相同.\n\n- 不稳定排序\n\n```javascript\nconst by = name => {\n\t// o/p 每组相比较的数据\n\treturn (o, p) => {\n\t\tlet a, b;\n\n\t\tif(o && p && typeof o === 'object' && typeof p === 'object') {\n\t\t\ta = o[name];\n\t\t\tb = p[name];\n\t\t\t// 全等时\n\t\t\tif (a === b) {\n\t\t\t\treturn 0\n\t\t\t}\n\t\t\t// 同类型\n\t\t\tif (typeof a === typeof b) {\n\t\t\t\treturn a < b ? -1 : 1 \n\t\t\t}\n\t\t\t// 不同类型\n\t\t\treturn typeof a < typeof b ? -1 : 1\n\t\t}else {\n\t\t\tconsole.log('排序失败')\n\t\t}\n\t}\n}\n\nlet s = [\n\t{first: 'Joe', last: 'DeRita'},\n\t{first: 'Moe', last: 'Howard'},\n\t{first: 'Joe', last: 'Besser'},\n\t{first: 'Shemp', last: 'Howard'},\n\t{first: 'Larry', last: 'Fine'},\n\t{first: 'Curly', last: 'Howard'},\n]\n\nconsole.log(s.sort(by('first')).sort('last'));\n/*\n[ \n\t{ first: 'Curly', last: 'Howard' },\n\t{ first: 'Joe', last: 'DeRita' },\n\t{ first: 'Joe', last: 'Besser' },\n\t{ first: 'Larry', last: 'Fine' },\n\t{ first: 'Moe', last: 'Howard' },\n\t{ first: 'Shemp', last: 'Howard' }  \n]\n */\n```\n\n- 稳定排序\n\n```javascript\n// 让函数接收两个参数, 当第一个函数相等时\n// 由第二个参数再次比较, 第二个次要比较函数可选\nconst betterBy = (name, minor) => {\n\treturn (o, p) => {\n\t\tlet a, b;\n\t\tif (o && p && typeof o === 'object' && typeof 'object') {\n\t\t\ta = o[name];\n\t\t\tb = p[name];\n\t\t\tif (a === b) {\n\t\t\t\t// 用次要比较函数再次对比\n\t\t\t\treturn typeof minor === 'function' ? minor(o, p) : 0\n\t\t\t}\n\t\t\tif (typeof a === typeof b) {\n\t\t\t\treturn a < b ? -1 : 1\n\t\t\t}\n\t\t\treturn typeof a < typeof b ? -1 : 1\n\t\t}else {\n\t\t\tconsole.log('排序失败');\n\t\t}\n\t}\n}\n\nlet a = [\n\t{first: 'Joe', last: 'DeRita'},\n\t{first: 'Moe', last: 'Howard'},\n\t{first: 'Joe', last: 'Besser'},\n\t{first: 'Shemp', last: 'Howard'},\n\t{first: 'Larry', last: 'Fine'},\n\t{first: 'Curly', last: 'Howard'},\n];\n\nconsole.log(a.sort(by('last',by('first'))));\n/*[ \n\t{ first: 'Joe', last: 'Besser' },\n\t{ first: 'Joe', last: 'DeRita' },\n\t{ first: 'Larry', last: 'Fine' },\n\t{ first: 'Moe', last: 'Howard' },\n\t{ first: 'Shemp', last: 'Howard' },\n\t{ first: 'Curly', last: 'Howard' } \n]\n */\n```\n\n### array.splice(start, deleteCount, item...)\nsplice 方法从 array 中移除一个或多个元素, 并用新的 item 替换他们.\nstart 是从 array 中移除元素的开始位置 ( 索引 ) , deleteCount 是要\n删除元素的个数, item 参数如果有会被插入到被删除元素的位置上. 返回\n被删除的元素.\n\n```javascript\nlet arr = ['b', 'a', 'c', 'bug'];\nlet remove = arr.splice(1, 1, 'newItem', 'Hi');\n\nconsole.log(arr); // ['b', 'newItem', 'Hi','c', 'bug']\nconsole.log(remove); // ['a']\n```\n\n### array.unshift(item...)\nunshift 方法向数组的开头插入一个或多个元素并返回数组新的长度.\n\n```javascript\nlet arr = ['a', 'b', 'c'];\nlet insert = arr.unshift('Hi', 'd');\n\nconsole.log(arr); // ['Hi', 'd', 'a', 'b', 'c']\nconsole.log(insert); // 5\n```\n\n> ## RegExp\n\n### regexp.exec(string)\nexec 方法是使用正则表达式的最强大(最慢)的方法. 如果它成功匹配\nregexp 和字符串 string, 将返回一个数组. 数组中下标为0的元素包含\n正则表达式 regexp 匹配的子字符串; 下标为1的元素是分组1捕获的文本;\n下标为2的元素是分组2捕获的文本, 以此类推. 如果匹配失败则返回null.\n\n### regexp.test(string)\ntest 方法是使用正则表达式的最简单(最快)的方法. 如果该regexp 与 string\n匹配, 它返回 true, 否则返回 false. 不要对这个方法使用 g 标识.\n\n```\nlet b = /&.+/.test('frank &amp; beans');\n\nconsole.log(b); // true\n```\n\n> ## String\n\n### string.charAt(pos)\ncharAt 方法返回在 string 中 pos 位置处的字符串. 如果 pos 小于0或者\n大于等于字符串的长度, 将返回空字符串.\n\n```javascript\nlet name = 'Cara';\nlet initial = name.charAt(0);\n\nconsole.log(initial); // 'C'\n```\n\n### string.concat(string...)\nconcat 方法把其他字符串连接起来返回一个新的字符串. 通常用`+`\n\n### string.indexOf(searchString, position)\nindexOf 方法在 string 内查找另一个字符串 searchString. 如果被\n找到返回第一个匹配字符串的位置, 否则返回-1. 可选参数 position\n可设置从 string 的某个指定位置开始查找.\n\n```javascript\nlet text = 'Mississippi';\nlet p = text.indexOf('ss'); // 2\np = text.indexOf('ss', 3); // 5\n```\n\n### string.lastIndexOf(searchString, position)\nlastIndexOf 跟 indexOf 方法相反, 是从数组的末尾开始查找.\n返回一个指定的字符串值最后出现的位置, 在一个字符串中的指定位置从后向前搜索.\n\n```javascript\nlet text = 'Mississippi';\nlet p = text.lastIndexOf('ss'); // 5\np = text.lastIndexOf('ss', 3); // 2\np = text.lastIndexOf('ss', 6); // 5\n```\n\n### string.match(regexp)\nmatch 方法让字符串和一个正则表达式进行匹配. 它依据`g`标识符来决定如何\n进行匹配. 如果没有`g`标识符, 那么调用 `string.match(regexp)`的结果与\n调用`regexp.exec(string)`的结果相同. 如果有`g`标识符, 那么它返回一个\n包含所有匹配项(除捕获分组)的数组.\n\n### string.replace(searchValue, replaceValue)\nreplace 方法对 string 进行查找和替换操作, 并返回一个新的字符串. 参数\nsearchValue 可以是一个字符串或者一个正则表达式对象. 如果是一个字符串,\n那么 searchValue 只会把第一次匹配的出现的地方替换掉; 如果是正则表达式\n带有`g`标识符, 则会替换点所有匹配项.\n\n```javascript\nlet str = '1-10-1001';\nlet reg = /-(\\d+)-/;\n\nstr.replace(reg, '栋$1单元');\nconsole.log(str); // 1栋10单元1001\n\n```\n\n### string.search(regexp)\nsearch 方法和 indexOf 方法类似, 只是它只接受一个正则表达式对象作为参数\n而不是一个字符串. 如果找到匹配, 它返回第一个匹配的首字符位置. 如果没有\n返回-1. 此方法会忽略`g`标识符.\n\n### string.slice(start, end)\nslice 方法复制 string 的一部分构造成一个新的字符串. 如果 start 参数是负数\n, 他将与 string.length 相加. end 参数是可选的, 默认是 string.length. 如果\nend 参数是负数, 也会与 string.length 相加. end 参数等于你想取的最后一个字符\n的位置加1.\n\n```javascript\n// str.length == 39\nlet str = 'and in it he says \"Any damn fool could';\nlet a = str.slice(0, 3); // 'and'\nlet b = str.slice(-5); // 'could'\n```\n\n### string.split(separator, limit)\nsplit 方法把 string 以指定的分隔符构造成一个字符串数组. 可选参数\nlimit 可以限制被分割片段的数量. separator 可以是一个字符串或者一个\n正则表达式. 此方法会忽略`g`标识符.\n\n```javascript\nlet str = '0123456789';\nlet a = str.split('', 5);\n\nconsole.log(a); // ['0', '1', '2', '3', '4']\n```\n\n### string.substring(start, end)\nsubstring 方法和`slice` 方法一样, 只是不能处理负数. 所以用`slice`代替它\n\n### string.toLocaleLowerCase()\ntoLocaleLowerCase 方法返回一个新的字符串, 它使用本地化的规则把这个 string\n中的所有字母转换为小写格式.\n\n### string.toLocaleUpperCase()\ntoLocaleUpperCase 方法返回一个新的字符串, 它使用本地化的规则把这个 string\n中的所有字母转换为大写格式.\n\nCreated on 17/9/21 by Cara\n","source":"_posts/JavaScript-方法集.md","raw":"---\ntitle: JavaScript 方法集\ndate: 2017-10-16 22:29:16\ntags:\n- JavaScript\ncategories:\n- 笔记📒\n- 复习\n---\nJavaScript包含了一套小型的可用在标准类型上的标准方法集,\n主要是针对数组/正则及字符串的一些处理.\n\n> ## Array\n\n### array.concat(item...)\nconcat 方法产生一个新的数组, 它包含的是一份 array 的浅复制\n并把参数 item 追加在其后. 如果 item 是数组, 那么这个数组的\n每个元素都会被添加.\n\n```javascript\nlet arr = [1, 2, 3];\nlet arr2 = [4, 5, 6];\nlet result = arr.concat(arr2, 'wow');\n\nconsole.log(result); // [1, 2, 3, 4, 5, 6, 'wow'];\n```\n\n### array.join(separator)\njoin 方法是把一个 array 以指定的分隔符构造成一个字符串.\n它先把 array 中的每个元素构造成一个字符串, 然后以指定的\n分隔符把它们都连接起来. 默认的 separate 是逗号, 可以用\n空字符串作为 separate.\n\n```javascript\nlet array = [\"a\", \"b\", \"c\"];\narray.push(\"d\");\n\nlet result = array(\"|\");\nconsole.log(result); // \"a|b|c|d\"\n```\n\n### array.pop()\npop 和 push 方法可以使 array 像堆栈一样工作. pop 方法移除数组\n中的最后一个元素并返回该元素, 如果是空数组, 它将返回 undefined.\n\n```javascript\nlet arr = [1, 2, 3];\narr.pop()\n\nconsole.log(arr); // 3\n```\n\n### array.push(item...)\npush 方法向数组的末尾添加一个或多个元素. 和 concat 方法不同的是, \n他会修改 array, 如果 item 是一个数组, 会将整个参数数组作为一个元素\n添加到 array 的末尾, 并返回这个新数组的长度.\n\n```javascript\nlet array = [1, 2, 3];\nlet arr = [4, 5, 6];\n\nlet result = array.push(arr. 'Hi');\nconsole.log(result); \n// array: [1, 2, 3, [4, 5, 6], 'Hi']\n// result: 5\n```\n\n### array.reverse()\nreverse 方法反转数组元素的顺序, 并返回数组本身.\n\n```javascript\nlet array = [1, 2, 3];\n\nlet result = array.reverse();\nconsole.log(result); // [3, 2, 1]\n```\n\n### array.shift()\nshift 方法移除数组中的第一个元素并返回该元素. 如果是空数组\n将会返回 undefined. shift 通常比 pop 慢得多.\n\n```javascript\nlet array = [1, 2, 3];\nlet result = array.shift();\n\nconsole.log(result); // 1\n\n```\n\n### array.slice(start, end)\nslice 方法是截取 array 中的一段做浅复制. 复制 array[start] 开始\n到复制 array[end]为止. end 参数是可选的, 默认值的长度是 array.length.\n如果 start 的值大于等于 array.length, 会得到一个新的空数组.\n\n```javascript\nlet array = [1, 2, 3];\n\nlet a  = array.slice(0, 1); // [1]\nlet b = array.slice(1); // [2, 3]\nlet c = array.slice(-1); // [3]\n\n```\n\n### array.sort(comparefn)\nsort 方法是对数组中的元素排序，但他的默认比较函数是把被排序的元素都视为\n字符串。 所以通常都是自己定义比较函数.\n\n```javascript\n// 对字符串和数字排序\nconst compare = (a, b) => {\n\tif (a === b) {\n\t\treturn 0\n\t}\n\tif (typeof a === typeof b) {\n\t\treturn  a < b ? -1 : 1\n\t}\n\treturn typeof a < typeof b ? -1 :1\n}\n\nlet array = ['bb', 'aa', 2, 'cc', 3, 1, 7];\n\nconsole.log(array.sort(compare())); // [ 1, 2, 3, 7, 'aa', 'bb', 'cc' ]\n```\n\n> 稳定性：排序后2个相等键值的顺序和排序之前它们的顺序相同.\n\n- 不稳定排序\n\n```javascript\nconst by = name => {\n\t// o/p 每组相比较的数据\n\treturn (o, p) => {\n\t\tlet a, b;\n\n\t\tif(o && p && typeof o === 'object' && typeof p === 'object') {\n\t\t\ta = o[name];\n\t\t\tb = p[name];\n\t\t\t// 全等时\n\t\t\tif (a === b) {\n\t\t\t\treturn 0\n\t\t\t}\n\t\t\t// 同类型\n\t\t\tif (typeof a === typeof b) {\n\t\t\t\treturn a < b ? -1 : 1 \n\t\t\t}\n\t\t\t// 不同类型\n\t\t\treturn typeof a < typeof b ? -1 : 1\n\t\t}else {\n\t\t\tconsole.log('排序失败')\n\t\t}\n\t}\n}\n\nlet s = [\n\t{first: 'Joe', last: 'DeRita'},\n\t{first: 'Moe', last: 'Howard'},\n\t{first: 'Joe', last: 'Besser'},\n\t{first: 'Shemp', last: 'Howard'},\n\t{first: 'Larry', last: 'Fine'},\n\t{first: 'Curly', last: 'Howard'},\n]\n\nconsole.log(s.sort(by('first')).sort('last'));\n/*\n[ \n\t{ first: 'Curly', last: 'Howard' },\n\t{ first: 'Joe', last: 'DeRita' },\n\t{ first: 'Joe', last: 'Besser' },\n\t{ first: 'Larry', last: 'Fine' },\n\t{ first: 'Moe', last: 'Howard' },\n\t{ first: 'Shemp', last: 'Howard' }  \n]\n */\n```\n\n- 稳定排序\n\n```javascript\n// 让函数接收两个参数, 当第一个函数相等时\n// 由第二个参数再次比较, 第二个次要比较函数可选\nconst betterBy = (name, minor) => {\n\treturn (o, p) => {\n\t\tlet a, b;\n\t\tif (o && p && typeof o === 'object' && typeof 'object') {\n\t\t\ta = o[name];\n\t\t\tb = p[name];\n\t\t\tif (a === b) {\n\t\t\t\t// 用次要比较函数再次对比\n\t\t\t\treturn typeof minor === 'function' ? minor(o, p) : 0\n\t\t\t}\n\t\t\tif (typeof a === typeof b) {\n\t\t\t\treturn a < b ? -1 : 1\n\t\t\t}\n\t\t\treturn typeof a < typeof b ? -1 : 1\n\t\t}else {\n\t\t\tconsole.log('排序失败');\n\t\t}\n\t}\n}\n\nlet a = [\n\t{first: 'Joe', last: 'DeRita'},\n\t{first: 'Moe', last: 'Howard'},\n\t{first: 'Joe', last: 'Besser'},\n\t{first: 'Shemp', last: 'Howard'},\n\t{first: 'Larry', last: 'Fine'},\n\t{first: 'Curly', last: 'Howard'},\n];\n\nconsole.log(a.sort(by('last',by('first'))));\n/*[ \n\t{ first: 'Joe', last: 'Besser' },\n\t{ first: 'Joe', last: 'DeRita' },\n\t{ first: 'Larry', last: 'Fine' },\n\t{ first: 'Moe', last: 'Howard' },\n\t{ first: 'Shemp', last: 'Howard' },\n\t{ first: 'Curly', last: 'Howard' } \n]\n */\n```\n\n### array.splice(start, deleteCount, item...)\nsplice 方法从 array 中移除一个或多个元素, 并用新的 item 替换他们.\nstart 是从 array 中移除元素的开始位置 ( 索引 ) , deleteCount 是要\n删除元素的个数, item 参数如果有会被插入到被删除元素的位置上. 返回\n被删除的元素.\n\n```javascript\nlet arr = ['b', 'a', 'c', 'bug'];\nlet remove = arr.splice(1, 1, 'newItem', 'Hi');\n\nconsole.log(arr); // ['b', 'newItem', 'Hi','c', 'bug']\nconsole.log(remove); // ['a']\n```\n\n### array.unshift(item...)\nunshift 方法向数组的开头插入一个或多个元素并返回数组新的长度.\n\n```javascript\nlet arr = ['a', 'b', 'c'];\nlet insert = arr.unshift('Hi', 'd');\n\nconsole.log(arr); // ['Hi', 'd', 'a', 'b', 'c']\nconsole.log(insert); // 5\n```\n\n> ## RegExp\n\n### regexp.exec(string)\nexec 方法是使用正则表达式的最强大(最慢)的方法. 如果它成功匹配\nregexp 和字符串 string, 将返回一个数组. 数组中下标为0的元素包含\n正则表达式 regexp 匹配的子字符串; 下标为1的元素是分组1捕获的文本;\n下标为2的元素是分组2捕获的文本, 以此类推. 如果匹配失败则返回null.\n\n### regexp.test(string)\ntest 方法是使用正则表达式的最简单(最快)的方法. 如果该regexp 与 string\n匹配, 它返回 true, 否则返回 false. 不要对这个方法使用 g 标识.\n\n```\nlet b = /&.+/.test('frank &amp; beans');\n\nconsole.log(b); // true\n```\n\n> ## String\n\n### string.charAt(pos)\ncharAt 方法返回在 string 中 pos 位置处的字符串. 如果 pos 小于0或者\n大于等于字符串的长度, 将返回空字符串.\n\n```javascript\nlet name = 'Cara';\nlet initial = name.charAt(0);\n\nconsole.log(initial); // 'C'\n```\n\n### string.concat(string...)\nconcat 方法把其他字符串连接起来返回一个新的字符串. 通常用`+`\n\n### string.indexOf(searchString, position)\nindexOf 方法在 string 内查找另一个字符串 searchString. 如果被\n找到返回第一个匹配字符串的位置, 否则返回-1. 可选参数 position\n可设置从 string 的某个指定位置开始查找.\n\n```javascript\nlet text = 'Mississippi';\nlet p = text.indexOf('ss'); // 2\np = text.indexOf('ss', 3); // 5\n```\n\n### string.lastIndexOf(searchString, position)\nlastIndexOf 跟 indexOf 方法相反, 是从数组的末尾开始查找.\n返回一个指定的字符串值最后出现的位置, 在一个字符串中的指定位置从后向前搜索.\n\n```javascript\nlet text = 'Mississippi';\nlet p = text.lastIndexOf('ss'); // 5\np = text.lastIndexOf('ss', 3); // 2\np = text.lastIndexOf('ss', 6); // 5\n```\n\n### string.match(regexp)\nmatch 方法让字符串和一个正则表达式进行匹配. 它依据`g`标识符来决定如何\n进行匹配. 如果没有`g`标识符, 那么调用 `string.match(regexp)`的结果与\n调用`regexp.exec(string)`的结果相同. 如果有`g`标识符, 那么它返回一个\n包含所有匹配项(除捕获分组)的数组.\n\n### string.replace(searchValue, replaceValue)\nreplace 方法对 string 进行查找和替换操作, 并返回一个新的字符串. 参数\nsearchValue 可以是一个字符串或者一个正则表达式对象. 如果是一个字符串,\n那么 searchValue 只会把第一次匹配的出现的地方替换掉; 如果是正则表达式\n带有`g`标识符, 则会替换点所有匹配项.\n\n```javascript\nlet str = '1-10-1001';\nlet reg = /-(\\d+)-/;\n\nstr.replace(reg, '栋$1单元');\nconsole.log(str); // 1栋10单元1001\n\n```\n\n### string.search(regexp)\nsearch 方法和 indexOf 方法类似, 只是它只接受一个正则表达式对象作为参数\n而不是一个字符串. 如果找到匹配, 它返回第一个匹配的首字符位置. 如果没有\n返回-1. 此方法会忽略`g`标识符.\n\n### string.slice(start, end)\nslice 方法复制 string 的一部分构造成一个新的字符串. 如果 start 参数是负数\n, 他将与 string.length 相加. end 参数是可选的, 默认是 string.length. 如果\nend 参数是负数, 也会与 string.length 相加. end 参数等于你想取的最后一个字符\n的位置加1.\n\n```javascript\n// str.length == 39\nlet str = 'and in it he says \"Any damn fool could';\nlet a = str.slice(0, 3); // 'and'\nlet b = str.slice(-5); // 'could'\n```\n\n### string.split(separator, limit)\nsplit 方法把 string 以指定的分隔符构造成一个字符串数组. 可选参数\nlimit 可以限制被分割片段的数量. separator 可以是一个字符串或者一个\n正则表达式. 此方法会忽略`g`标识符.\n\n```javascript\nlet str = '0123456789';\nlet a = str.split('', 5);\n\nconsole.log(a); // ['0', '1', '2', '3', '4']\n```\n\n### string.substring(start, end)\nsubstring 方法和`slice` 方法一样, 只是不能处理负数. 所以用`slice`代替它\n\n### string.toLocaleLowerCase()\ntoLocaleLowerCase 方法返回一个新的字符串, 它使用本地化的规则把这个 string\n中的所有字母转换为小写格式.\n\n### string.toLocaleUpperCase()\ntoLocaleUpperCase 方法返回一个新的字符串, 它使用本地化的规则把这个 string\n中的所有字母转换为大写格式.\n\nCreated on 17/9/21 by Cara\n","slug":"JavaScript-方法集","published":1,"updated":"2018-05-05T09:23:03.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolsa000bklu0mpcieva2","content":"<p>JavaScript包含了一套小型的可用在标准类型上的标准方法集,<br>主要是针对数组/正则及字符串的一些处理.</p>\n<blockquote>\n<h2 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h2></blockquote>\n<h3 id=\"array-concat-item…\"><a href=\"#array-concat-item…\" class=\"headerlink\" title=\"array.concat(item…)\"></a>array.concat(item…)</h3><p>concat 方法产生一个新的数组, 它包含的是一份 array 的浅复制<br>并把参数 item 追加在其后. 如果 item 是数组, 那么这个数组的<br>每个元素都会被添加.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.concat(arr2, <span class=\"string\">'wow'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// [1, 2, 3, 4, 5, 6, 'wow'];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-join-separator\"><a href=\"#array-join-separator\" class=\"headerlink\" title=\"array.join(separator)\"></a>array.join(separator)</h3><p>join 方法是把一个 array 以指定的分隔符构造成一个字符串.<br>它先把 array 中的每个元素构造成一个字符串, 然后以指定的<br>分隔符把它们都连接起来. 默认的 separate 是逗号, 可以用<br>空字符串作为 separate.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>];</span><br><span class=\"line\">array.push(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = array(<span class=\"string\">\"|\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// \"a|b|c|d\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-pop\"><a href=\"#array-pop\" class=\"headerlink\" title=\"array.pop()\"></a>array.pop()</h3><p>pop 和 push 方法可以使 array 像堆栈一样工作. pop 方法移除数组<br>中的最后一个元素并返回该元素, 如果是空数组, 它将返回 undefined.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">arr.pop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-push-item…\"><a href=\"#array-push-item…\" class=\"headerlink\" title=\"array.push(item…)\"></a>array.push(item…)</h3><p>push 方法向数组的末尾添加一个或多个元素. 和 concat 方法不同的是,<br>他会修改 array, 如果 item 是一个数组, 会将整个参数数组作为一个元素<br>添加到 array 的末尾, 并返回这个新数组的长度.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = array.push(arr. <span class=\"string\">'Hi'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); </span><br><span class=\"line\"><span class=\"comment\">// array: [1, 2, 3, [4, 5, 6], 'Hi']</span></span><br><span class=\"line\"><span class=\"comment\">// result: 5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-reverse\"><a href=\"#array-reverse\" class=\"headerlink\" title=\"array.reverse()\"></a>array.reverse()</h3><p>reverse 方法反转数组元素的顺序, 并返回数组本身.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = array.reverse();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-shift\"><a href=\"#array-shift\" class=\"headerlink\" title=\"array.shift()\"></a>array.shift()</h3><p>shift 方法移除数组中的第一个元素并返回该元素. 如果是空数组<br>将会返回 undefined. shift 通常比 pop 慢得多.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = array.shift();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-slice-start-end\"><a href=\"#array-slice-start-end\" class=\"headerlink\" title=\"array.slice(start, end)\"></a>array.slice(start, end)</h3><p>slice 方法是截取 array 中的一段做浅复制. 复制 array[start] 开始<br>到复制 array[end]为止. end 参数是可选的, 默认值的长度是 array.length.<br>如果 start 的值大于等于 array.length, 会得到一个新的空数组.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = array.slice(<span class=\"number\">0</span>, <span class=\"number\">1</span>); <span class=\"comment\">// [1]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = array.slice(<span class=\"number\">1</span>); <span class=\"comment\">// [2, 3]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = array.slice(<span class=\"number\">-1</span>); <span class=\"comment\">// [3]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-sort-comparefn\"><a href=\"#array-sort-comparefn\" class=\"headerlink\" title=\"array.sort(comparefn)\"></a>array.sort(comparefn)</h3><p>sort 方法是对数组中的元素排序，但他的默认比较函数是把被排序的元素都视为<br>字符串。 所以通常都是自己定义比较函数.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对字符串和数字排序</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> compare = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a === b) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a === <span class=\"keyword\">typeof</span> b) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>  a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a &lt; <span class=\"keyword\">typeof</span> b ? <span class=\"number\">-1</span> :<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"string\">'bb'</span>, <span class=\"string\">'aa'</span>, <span class=\"number\">2</span>, <span class=\"string\">'cc'</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.sort(compare())); <span class=\"comment\">// [ 1, 2, 3, 7, 'aa', 'bb', 'cc' ]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>稳定性：排序后2个相等键值的顺序和排序之前它们的顺序相同.</p>\n</blockquote>\n<ul>\n<li>不稳定排序</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> by = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// o/p 每组相比较的数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">o, p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> a, b;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(o &amp;&amp; p &amp;&amp; <span class=\"keyword\">typeof</span> o === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"keyword\">typeof</span> p === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">\t\t\ta = o[name];</span><br><span class=\"line\">\t\t\tb = p[name];</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 全等时</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a === b) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 同类型</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a === <span class=\"keyword\">typeof</span> b) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span> </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 不同类型</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a &lt; <span class=\"keyword\">typeof</span> b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'排序失败'</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = [</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'DeRita'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Moe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Besser'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Shemp'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Larry'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Fine'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Curly'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.sort(by(<span class=\"string\">'first'</span>)).sort(<span class=\"string\">'last'</span>));</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">[ </span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Curly', last: 'Howard' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Joe', last: 'DeRita' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Joe', last: 'Besser' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Larry', last: 'Fine' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Moe', last: 'Howard' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Shemp', last: 'Howard' &#125;  </span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>稳定排序</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 让函数接收两个参数, 当第一个函数相等时</span></span><br><span class=\"line\"><span class=\"comment\">// 由第二个参数再次比较, 第二个次要比较函数可选</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> betterBy = <span class=\"function\">(<span class=\"params\">name, minor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">o, p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> a, b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (o &amp;&amp; p &amp;&amp; <span class=\"keyword\">typeof</span> o === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">\t\t\ta = o[name];</span><br><span class=\"line\">\t\t\tb = p[name];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a === b) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 用次要比较函数再次对比</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> minor === <span class=\"string\">'function'</span> ? minor(o, p) : <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a === <span class=\"keyword\">typeof</span> b) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a &lt; <span class=\"keyword\">typeof</span> b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'排序失败'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'DeRita'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Moe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Besser'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Shemp'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Larry'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Fine'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Curly'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.sort(by(<span class=\"string\">'last'</span>,by(<span class=\"string\">'first'</span>))));</span><br><span class=\"line\"><span class=\"comment\">/*[ </span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Joe', last: 'Besser' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Joe', last: 'DeRita' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Larry', last: 'Fine' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Moe', last: 'Howard' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Shemp', last: 'Howard' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Curly', last: 'Howard' &#125; </span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-splice-start-deleteCount-item…\"><a href=\"#array-splice-start-deleteCount-item…\" class=\"headerlink\" title=\"array.splice(start, deleteCount, item…)\"></a>array.splice(start, deleteCount, item…)</h3><p>splice 方法从 array 中移除一个或多个元素, 并用新的 item 替换他们.<br>start 是从 array 中移除元素的开始位置 ( 索引 ) , deleteCount 是要<br>删除元素的个数, item 参数如果有会被插入到被删除元素的位置上. 返回<br>被删除的元素.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'bug'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> remove = arr.splice(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'newItem'</span>, <span class=\"string\">'Hi'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// ['b', 'newItem', 'Hi','c', 'bug']</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(remove); <span class=\"comment\">// ['a']</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-unshift-item…\"><a href=\"#array-unshift-item…\" class=\"headerlink\" title=\"array.unshift(item…)\"></a>array.unshift(item…)</h3><p>unshift 方法向数组的开头插入一个或多个元素并返回数组新的长度.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> insert = arr.unshift(<span class=\"string\">'Hi'</span>, <span class=\"string\">'d'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// ['Hi', 'd', 'a', 'b', 'c']</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(insert); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"RegExp\"><a href=\"#RegExp\" class=\"headerlink\" title=\"RegExp\"></a>RegExp</h2></blockquote>\n<h3 id=\"regexp-exec-string\"><a href=\"#regexp-exec-string\" class=\"headerlink\" title=\"regexp.exec(string)\"></a>regexp.exec(string)</h3><p>exec 方法是使用正则表达式的最强大(最慢)的方法. 如果它成功匹配<br>regexp 和字符串 string, 将返回一个数组. 数组中下标为0的元素包含<br>正则表达式 regexp 匹配的子字符串; 下标为1的元素是分组1捕获的文本;<br>下标为2的元素是分组2捕获的文本, 以此类推. 如果匹配失败则返回null.</p>\n<h3 id=\"regexp-test-string\"><a href=\"#regexp-test-string\" class=\"headerlink\" title=\"regexp.test(string)\"></a>regexp.test(string)</h3><p>test 方法是使用正则表达式的最简单(最快)的方法. 如果该regexp 与 string<br>匹配, 它返回 true, 否则返回 false. 不要对这个方法使用 g 标识.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let b = /&amp;.+/.test(&apos;frank &amp;amp; beans&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b); // true</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2></blockquote>\n<h3 id=\"string-charAt-pos\"><a href=\"#string-charAt-pos\" class=\"headerlink\" title=\"string.charAt(pos)\"></a>string.charAt(pos)</h3><p>charAt 方法返回在 string 中 pos 位置处的字符串. 如果 pos 小于0或者<br>大于等于字符串的长度, 将返回空字符串.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'Cara'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> initial = name.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(initial); <span class=\"comment\">// 'C'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"string-concat-string…\"><a href=\"#string-concat-string…\" class=\"headerlink\" title=\"string.concat(string…)\"></a>string.concat(string…)</h3><p>concat 方法把其他字符串连接起来返回一个新的字符串. 通常用<code>+</code></p>\n<h3 id=\"string-indexOf-searchString-position\"><a href=\"#string-indexOf-searchString-position\" class=\"headerlink\" title=\"string.indexOf(searchString, position)\"></a>string.indexOf(searchString, position)</h3><p>indexOf 方法在 string 内查找另一个字符串 searchString. 如果被<br>找到返回第一个匹配字符串的位置, 否则返回-1. 可选参数 position<br>可设置从 string 的某个指定位置开始查找.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">'Mississippi'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p = text.indexOf(<span class=\"string\">'ss'</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\">p = text.indexOf(<span class=\"string\">'ss'</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"string-lastIndexOf-searchString-position\"><a href=\"#string-lastIndexOf-searchString-position\" class=\"headerlink\" title=\"string.lastIndexOf(searchString, position)\"></a>string.lastIndexOf(searchString, position)</h3><p>lastIndexOf 跟 indexOf 方法相反, 是从数组的末尾开始查找.<br>返回一个指定的字符串值最后出现的位置, 在一个字符串中的指定位置从后向前搜索.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">'Mississippi'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p = text.lastIndexOf(<span class=\"string\">'ss'</span>); <span class=\"comment\">// 5</span></span><br><span class=\"line\">p = text.lastIndexOf(<span class=\"string\">'ss'</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\">p = text.lastIndexOf(<span class=\"string\">'ss'</span>, <span class=\"number\">6</span>); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"string-match-regexp\"><a href=\"#string-match-regexp\" class=\"headerlink\" title=\"string.match(regexp)\"></a>string.match(regexp)</h3><p>match 方法让字符串和一个正则表达式进行匹配. 它依据<code>g</code>标识符来决定如何<br>进行匹配. 如果没有<code>g</code>标识符, 那么调用 <code>string.match(regexp)</code>的结果与<br>调用<code>regexp.exec(string)</code>的结果相同. 如果有<code>g</code>标识符, 那么它返回一个<br>包含所有匹配项(除捕获分组)的数组.</p>\n<h3 id=\"string-replace-searchValue-replaceValue\"><a href=\"#string-replace-searchValue-replaceValue\" class=\"headerlink\" title=\"string.replace(searchValue, replaceValue)\"></a>string.replace(searchValue, replaceValue)</h3><p>replace 方法对 string 进行查找和替换操作, 并返回一个新的字符串. 参数<br>searchValue 可以是一个字符串或者一个正则表达式对象. 如果是一个字符串,<br>那么 searchValue 只会把第一次匹配的出现的地方替换掉; 如果是正则表达式<br>带有<code>g</code>标识符, 则会替换点所有匹配项.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'1-10-1001'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/-(\\d+)-/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str.replace(reg, <span class=\"string\">'栋$1单元'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str); <span class=\"comment\">// 1栋10单元1001</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"string-search-regexp\"><a href=\"#string-search-regexp\" class=\"headerlink\" title=\"string.search(regexp)\"></a>string.search(regexp)</h3><p>search 方法和 indexOf 方法类似, 只是它只接受一个正则表达式对象作为参数<br>而不是一个字符串. 如果找到匹配, 它返回第一个匹配的首字符位置. 如果没有<br>返回-1. 此方法会忽略<code>g</code>标识符.</p>\n<h3 id=\"string-slice-start-end\"><a href=\"#string-slice-start-end\" class=\"headerlink\" title=\"string.slice(start, end)\"></a>string.slice(start, end)</h3><p>slice 方法复制 string 的一部分构造成一个新的字符串. 如果 start 参数是负数<br>, 他将与 string.length 相加. end 参数是可选的, 默认是 string.length. 如果<br>end 参数是负数, 也会与 string.length 相加. end 参数等于你想取的最后一个字符<br>的位置加1.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// str.length == 39</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'and in it he says \"Any damn fool could'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = str.slice(<span class=\"number\">0</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 'and'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = str.slice(<span class=\"number\">-5</span>); <span class=\"comment\">// 'could'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"string-split-separator-limit\"><a href=\"#string-split-separator-limit\" class=\"headerlink\" title=\"string.split(separator, limit)\"></a>string.split(separator, limit)</h3><p>split 方法把 string 以指定的分隔符构造成一个字符串数组. 可选参数<br>limit 可以限制被分割片段的数量. separator 可以是一个字符串或者一个<br>正则表达式. 此方法会忽略<code>g</code>标识符.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'0123456789'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = str.split(<span class=\"string\">''</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// ['0', '1', '2', '3', '4']</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"string-substring-start-end\"><a href=\"#string-substring-start-end\" class=\"headerlink\" title=\"string.substring(start, end)\"></a>string.substring(start, end)</h3><p>substring 方法和<code>slice</code> 方法一样, 只是不能处理负数. 所以用<code>slice</code>代替它</p>\n<h3 id=\"string-toLocaleLowerCase\"><a href=\"#string-toLocaleLowerCase\" class=\"headerlink\" title=\"string.toLocaleLowerCase()\"></a>string.toLocaleLowerCase()</h3><p>toLocaleLowerCase 方法返回一个新的字符串, 它使用本地化的规则把这个 string<br>中的所有字母转换为小写格式.</p>\n<h3 id=\"string-toLocaleUpperCase\"><a href=\"#string-toLocaleUpperCase\" class=\"headerlink\" title=\"string.toLocaleUpperCase()\"></a>string.toLocaleUpperCase()</h3><p>toLocaleUpperCase 方法返回一个新的字符串, 它使用本地化的规则把这个 string<br>中的所有字母转换为大写格式.</p>\n<p>Created on 17/9/21 by Cara</p>\n","site":{"data":{}},"excerpt":"","more":"<p>JavaScript包含了一套小型的可用在标准类型上的标准方法集,<br>主要是针对数组/正则及字符串的一些处理.</p>\n<blockquote>\n<h2 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h2></blockquote>\n<h3 id=\"array-concat-item…\"><a href=\"#array-concat-item…\" class=\"headerlink\" title=\"array.concat(item…)\"></a>array.concat(item…)</h3><p>concat 方法产生一个新的数组, 它包含的是一份 array 的浅复制<br>并把参数 item 追加在其后. 如果 item 是数组, 那么这个数组的<br>每个元素都会被添加.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.concat(arr2, <span class=\"string\">'wow'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// [1, 2, 3, 4, 5, 6, 'wow'];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-join-separator\"><a href=\"#array-join-separator\" class=\"headerlink\" title=\"array.join(separator)\"></a>array.join(separator)</h3><p>join 方法是把一个 array 以指定的分隔符构造成一个字符串.<br>它先把 array 中的每个元素构造成一个字符串, 然后以指定的<br>分隔符把它们都连接起来. 默认的 separate 是逗号, 可以用<br>空字符串作为 separate.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>];</span><br><span class=\"line\">array.push(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = array(<span class=\"string\">\"|\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// \"a|b|c|d\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-pop\"><a href=\"#array-pop\" class=\"headerlink\" title=\"array.pop()\"></a>array.pop()</h3><p>pop 和 push 方法可以使 array 像堆栈一样工作. pop 方法移除数组<br>中的最后一个元素并返回该元素, 如果是空数组, 它将返回 undefined.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">arr.pop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-push-item…\"><a href=\"#array-push-item…\" class=\"headerlink\" title=\"array.push(item…)\"></a>array.push(item…)</h3><p>push 方法向数组的末尾添加一个或多个元素. 和 concat 方法不同的是,<br>他会修改 array, 如果 item 是一个数组, 会将整个参数数组作为一个元素<br>添加到 array 的末尾, 并返回这个新数组的长度.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = array.push(arr. <span class=\"string\">'Hi'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); </span><br><span class=\"line\"><span class=\"comment\">// array: [1, 2, 3, [4, 5, 6], 'Hi']</span></span><br><span class=\"line\"><span class=\"comment\">// result: 5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-reverse\"><a href=\"#array-reverse\" class=\"headerlink\" title=\"array.reverse()\"></a>array.reverse()</h3><p>reverse 方法反转数组元素的顺序, 并返回数组本身.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = array.reverse();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-shift\"><a href=\"#array-shift\" class=\"headerlink\" title=\"array.shift()\"></a>array.shift()</h3><p>shift 方法移除数组中的第一个元素并返回该元素. 如果是空数组<br>将会返回 undefined. shift 通常比 pop 慢得多.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = array.shift();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-slice-start-end\"><a href=\"#array-slice-start-end\" class=\"headerlink\" title=\"array.slice(start, end)\"></a>array.slice(start, end)</h3><p>slice 方法是截取 array 中的一段做浅复制. 复制 array[start] 开始<br>到复制 array[end]为止. end 参数是可选的, 默认值的长度是 array.length.<br>如果 start 的值大于等于 array.length, 会得到一个新的空数组.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = array.slice(<span class=\"number\">0</span>, <span class=\"number\">1</span>); <span class=\"comment\">// [1]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = array.slice(<span class=\"number\">1</span>); <span class=\"comment\">// [2, 3]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = array.slice(<span class=\"number\">-1</span>); <span class=\"comment\">// [3]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-sort-comparefn\"><a href=\"#array-sort-comparefn\" class=\"headerlink\" title=\"array.sort(comparefn)\"></a>array.sort(comparefn)</h3><p>sort 方法是对数组中的元素排序，但他的默认比较函数是把被排序的元素都视为<br>字符串。 所以通常都是自己定义比较函数.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对字符串和数字排序</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> compare = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a === b) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a === <span class=\"keyword\">typeof</span> b) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>  a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a &lt; <span class=\"keyword\">typeof</span> b ? <span class=\"number\">-1</span> :<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"string\">'bb'</span>, <span class=\"string\">'aa'</span>, <span class=\"number\">2</span>, <span class=\"string\">'cc'</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.sort(compare())); <span class=\"comment\">// [ 1, 2, 3, 7, 'aa', 'bb', 'cc' ]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>稳定性：排序后2个相等键值的顺序和排序之前它们的顺序相同.</p>\n</blockquote>\n<ul>\n<li>不稳定排序</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> by = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// o/p 每组相比较的数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">o, p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> a, b;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(o &amp;&amp; p &amp;&amp; <span class=\"keyword\">typeof</span> o === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"keyword\">typeof</span> p === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">\t\t\ta = o[name];</span><br><span class=\"line\">\t\t\tb = p[name];</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 全等时</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a === b) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 同类型</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a === <span class=\"keyword\">typeof</span> b) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span> </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 不同类型</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a &lt; <span class=\"keyword\">typeof</span> b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'排序失败'</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = [</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'DeRita'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Moe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Besser'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Shemp'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Larry'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Fine'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Curly'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.sort(by(<span class=\"string\">'first'</span>)).sort(<span class=\"string\">'last'</span>));</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">[ </span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Curly', last: 'Howard' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Joe', last: 'DeRita' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Joe', last: 'Besser' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Larry', last: 'Fine' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Moe', last: 'Howard' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Shemp', last: 'Howard' &#125;  </span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>稳定排序</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 让函数接收两个参数, 当第一个函数相等时</span></span><br><span class=\"line\"><span class=\"comment\">// 由第二个参数再次比较, 第二个次要比较函数可选</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> betterBy = <span class=\"function\">(<span class=\"params\">name, minor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">o, p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> a, b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (o &amp;&amp; p &amp;&amp; <span class=\"keyword\">typeof</span> o === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">\t\t\ta = o[name];</span><br><span class=\"line\">\t\t\tb = p[name];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a === b) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 用次要比较函数再次对比</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> minor === <span class=\"string\">'function'</span> ? minor(o, p) : <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a === <span class=\"keyword\">typeof</span> b) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a &lt; <span class=\"keyword\">typeof</span> b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'排序失败'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'DeRita'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Moe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Besser'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Shemp'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Larry'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Fine'</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">first</span>: <span class=\"string\">'Curly'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.sort(by(<span class=\"string\">'last'</span>,by(<span class=\"string\">'first'</span>))));</span><br><span class=\"line\"><span class=\"comment\">/*[ </span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Joe', last: 'Besser' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Joe', last: 'DeRita' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Larry', last: 'Fine' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Moe', last: 'Howard' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Shemp', last: 'Howard' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123; first: 'Curly', last: 'Howard' &#125; </span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-splice-start-deleteCount-item…\"><a href=\"#array-splice-start-deleteCount-item…\" class=\"headerlink\" title=\"array.splice(start, deleteCount, item…)\"></a>array.splice(start, deleteCount, item…)</h3><p>splice 方法从 array 中移除一个或多个元素, 并用新的 item 替换他们.<br>start 是从 array 中移除元素的开始位置 ( 索引 ) , deleteCount 是要<br>删除元素的个数, item 参数如果有会被插入到被删除元素的位置上. 返回<br>被删除的元素.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'bug'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> remove = arr.splice(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'newItem'</span>, <span class=\"string\">'Hi'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// ['b', 'newItem', 'Hi','c', 'bug']</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(remove); <span class=\"comment\">// ['a']</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"array-unshift-item…\"><a href=\"#array-unshift-item…\" class=\"headerlink\" title=\"array.unshift(item…)\"></a>array.unshift(item…)</h3><p>unshift 方法向数组的开头插入一个或多个元素并返回数组新的长度.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> insert = arr.unshift(<span class=\"string\">'Hi'</span>, <span class=\"string\">'d'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// ['Hi', 'd', 'a', 'b', 'c']</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(insert); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"RegExp\"><a href=\"#RegExp\" class=\"headerlink\" title=\"RegExp\"></a>RegExp</h2></blockquote>\n<h3 id=\"regexp-exec-string\"><a href=\"#regexp-exec-string\" class=\"headerlink\" title=\"regexp.exec(string)\"></a>regexp.exec(string)</h3><p>exec 方法是使用正则表达式的最强大(最慢)的方法. 如果它成功匹配<br>regexp 和字符串 string, 将返回一个数组. 数组中下标为0的元素包含<br>正则表达式 regexp 匹配的子字符串; 下标为1的元素是分组1捕获的文本;<br>下标为2的元素是分组2捕获的文本, 以此类推. 如果匹配失败则返回null.</p>\n<h3 id=\"regexp-test-string\"><a href=\"#regexp-test-string\" class=\"headerlink\" title=\"regexp.test(string)\"></a>regexp.test(string)</h3><p>test 方法是使用正则表达式的最简单(最快)的方法. 如果该regexp 与 string<br>匹配, 它返回 true, 否则返回 false. 不要对这个方法使用 g 标识.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let b = /&amp;.+/.test(&apos;frank &amp;amp; beans&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b); // true</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2></blockquote>\n<h3 id=\"string-charAt-pos\"><a href=\"#string-charAt-pos\" class=\"headerlink\" title=\"string.charAt(pos)\"></a>string.charAt(pos)</h3><p>charAt 方法返回在 string 中 pos 位置处的字符串. 如果 pos 小于0或者<br>大于等于字符串的长度, 将返回空字符串.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'Cara'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> initial = name.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(initial); <span class=\"comment\">// 'C'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"string-concat-string…\"><a href=\"#string-concat-string…\" class=\"headerlink\" title=\"string.concat(string…)\"></a>string.concat(string…)</h3><p>concat 方法把其他字符串连接起来返回一个新的字符串. 通常用<code>+</code></p>\n<h3 id=\"string-indexOf-searchString-position\"><a href=\"#string-indexOf-searchString-position\" class=\"headerlink\" title=\"string.indexOf(searchString, position)\"></a>string.indexOf(searchString, position)</h3><p>indexOf 方法在 string 内查找另一个字符串 searchString. 如果被<br>找到返回第一个匹配字符串的位置, 否则返回-1. 可选参数 position<br>可设置从 string 的某个指定位置开始查找.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">'Mississippi'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p = text.indexOf(<span class=\"string\">'ss'</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\">p = text.indexOf(<span class=\"string\">'ss'</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"string-lastIndexOf-searchString-position\"><a href=\"#string-lastIndexOf-searchString-position\" class=\"headerlink\" title=\"string.lastIndexOf(searchString, position)\"></a>string.lastIndexOf(searchString, position)</h3><p>lastIndexOf 跟 indexOf 方法相反, 是从数组的末尾开始查找.<br>返回一个指定的字符串值最后出现的位置, 在一个字符串中的指定位置从后向前搜索.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">'Mississippi'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p = text.lastIndexOf(<span class=\"string\">'ss'</span>); <span class=\"comment\">// 5</span></span><br><span class=\"line\">p = text.lastIndexOf(<span class=\"string\">'ss'</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\">p = text.lastIndexOf(<span class=\"string\">'ss'</span>, <span class=\"number\">6</span>); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"string-match-regexp\"><a href=\"#string-match-regexp\" class=\"headerlink\" title=\"string.match(regexp)\"></a>string.match(regexp)</h3><p>match 方法让字符串和一个正则表达式进行匹配. 它依据<code>g</code>标识符来决定如何<br>进行匹配. 如果没有<code>g</code>标识符, 那么调用 <code>string.match(regexp)</code>的结果与<br>调用<code>regexp.exec(string)</code>的结果相同. 如果有<code>g</code>标识符, 那么它返回一个<br>包含所有匹配项(除捕获分组)的数组.</p>\n<h3 id=\"string-replace-searchValue-replaceValue\"><a href=\"#string-replace-searchValue-replaceValue\" class=\"headerlink\" title=\"string.replace(searchValue, replaceValue)\"></a>string.replace(searchValue, replaceValue)</h3><p>replace 方法对 string 进行查找和替换操作, 并返回一个新的字符串. 参数<br>searchValue 可以是一个字符串或者一个正则表达式对象. 如果是一个字符串,<br>那么 searchValue 只会把第一次匹配的出现的地方替换掉; 如果是正则表达式<br>带有<code>g</code>标识符, 则会替换点所有匹配项.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'1-10-1001'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/-(\\d+)-/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str.replace(reg, <span class=\"string\">'栋$1单元'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str); <span class=\"comment\">// 1栋10单元1001</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"string-search-regexp\"><a href=\"#string-search-regexp\" class=\"headerlink\" title=\"string.search(regexp)\"></a>string.search(regexp)</h3><p>search 方法和 indexOf 方法类似, 只是它只接受一个正则表达式对象作为参数<br>而不是一个字符串. 如果找到匹配, 它返回第一个匹配的首字符位置. 如果没有<br>返回-1. 此方法会忽略<code>g</code>标识符.</p>\n<h3 id=\"string-slice-start-end\"><a href=\"#string-slice-start-end\" class=\"headerlink\" title=\"string.slice(start, end)\"></a>string.slice(start, end)</h3><p>slice 方法复制 string 的一部分构造成一个新的字符串. 如果 start 参数是负数<br>, 他将与 string.length 相加. end 参数是可选的, 默认是 string.length. 如果<br>end 参数是负数, 也会与 string.length 相加. end 参数等于你想取的最后一个字符<br>的位置加1.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// str.length == 39</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'and in it he says \"Any damn fool could'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = str.slice(<span class=\"number\">0</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 'and'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = str.slice(<span class=\"number\">-5</span>); <span class=\"comment\">// 'could'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"string-split-separator-limit\"><a href=\"#string-split-separator-limit\" class=\"headerlink\" title=\"string.split(separator, limit)\"></a>string.split(separator, limit)</h3><p>split 方法把 string 以指定的分隔符构造成一个字符串数组. 可选参数<br>limit 可以限制被分割片段的数量. separator 可以是一个字符串或者一个<br>正则表达式. 此方法会忽略<code>g</code>标识符.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'0123456789'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = str.split(<span class=\"string\">''</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// ['0', '1', '2', '3', '4']</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"string-substring-start-end\"><a href=\"#string-substring-start-end\" class=\"headerlink\" title=\"string.substring(start, end)\"></a>string.substring(start, end)</h3><p>substring 方法和<code>slice</code> 方法一样, 只是不能处理负数. 所以用<code>slice</code>代替它</p>\n<h3 id=\"string-toLocaleLowerCase\"><a href=\"#string-toLocaleLowerCase\" class=\"headerlink\" title=\"string.toLocaleLowerCase()\"></a>string.toLocaleLowerCase()</h3><p>toLocaleLowerCase 方法返回一个新的字符串, 它使用本地化的规则把这个 string<br>中的所有字母转换为小写格式.</p>\n<h3 id=\"string-toLocaleUpperCase\"><a href=\"#string-toLocaleUpperCase\" class=\"headerlink\" title=\"string.toLocaleUpperCase()\"></a>string.toLocaleUpperCase()</h3><p>toLocaleUpperCase 方法返回一个新的字符串, 它使用本地化的规则把这个 string<br>中的所有字母转换为大写格式.</p>\n<p>Created on 17/9/21 by Cara</p>\n"},{"title":"JavaScript 关于运算的小技巧","date":"2017-10-17T14:10:33.000Z","_content":"> #### 1. 使用 `!!` 操作符转换布尔值\n用于检查一个变量是否存在或者是有效值, 对变量使用 `!!variable` 来验证,\n只要变量的值为: 0, null, undefined, NaN都将返回 false, 反之返回 true. 如: \n\n```javascript\n class Foo {\n    constructor ( count ) {\n        this.cash = count;\n        this.myCash = !!count;\n    }\n}\nvar emptyFoo = new Foo(0);\nconsole.log(foo.cash); // 0\nconsole.log(foo.myCash); // false\n\nvar foo = new Foo(100);\nconsole.log(foo.cash); // 100\nconsole.log(foo.myCash); // true\n```\n\n> #### 2. 使用 `+` 将字符串转换为数字\n只适合将字符串数据转换为数字, 给后台传数据的时候经常用到, \n如果不是字符串数据会返回 NaN.\n\n```javascript\nvar toNumber = strNumber => {\n    return +strNumber;\n}\nconsole.log( toNumber(\"123\") ); // 123\nconsole.log( toNumber(\" abc\")); // NaN\n\n// Date也可以使用\nconsole.log( +new Date() ); // 返回时间戳\n```\n\n> #### 3. 并符条件\n经常用到这样的条件判断.\n\n```javascript\nif (isConcat) {\n    Login()\n}\n```\n可以简写成这样 ` isConact && Login() `\n\n### 4. 获取数组中的最后一个元素\n`Array.prototype.slice (begin, end)` 经常用这样的方式来截取数组的元素, \n如果不设置 end 的值, 那么默认会将数组的长度作为 end 值. \n如果将负数作为参数的 begin 值, 就可以获取数组的最后一个元素.\n\n```javascript\nvar arr = [1,2,3,4,5];\nconsole.log( arr.slice(-1) ); // [5]\nconosle.log( arr.slice(-2) ); // [4,5]\n以此类推\n```\n> #### 5. 截断数组\n用来锁定数组的长度, 删除数组中的一些元素. 比如数组一共有10个元素, \n但我只需要前5个元素, 就可以通过 `array.length = 5 ` 来截断数组, 如: \n\n```javascript\nvar arr = [1,2,3,4,5];\nconsole.log( arr.length); // 5\narr.length = 3;\nconsole.log( arr.length ); // 3\nconsole.log( arr ); // [1,2,3]\n```\n\n> #### 6. 将NodeList转换为数组\n如果通过 ` doucment.querySelectorAll('p') ` 获取元素, 它返回的是一个DOM元素的\n数组 ( NodeList ) 对象, 但是这个数组不具有数组的功能,\n比如 ` push() / sort() ` 等. 这就需要将这个 NodeList 转换为真正的数组.\n可以使用 ` [].slice.call( NodeList ) ` 来实现. 如:\n\n```javascript\nvar els = document.querySelectorAll( 'p' );\n[].slice.call( els );\nOR:\nvar arrElement = Array.from( els );\nES6:\nvar arr = [...els]\n```\n> #### 7. 数组元素重排\n```javascript\nvar list = [1,2,3];\nconsole.log(list.sort(()=>{ Math.random() - 0.5}))\n```\n\nCreated on 2017-6-14 by Cara\n","source":"_posts/JavaScript-关于运算的小技巧.md","raw":"---\ntitle: JavaScript 关于运算的小技巧\ndate: 2017-10-17 22:10:33\ntags:\n- JavaScript\ncategories:\n- 笔记📒\n- 复习\n---\n> #### 1. 使用 `!!` 操作符转换布尔值\n用于检查一个变量是否存在或者是有效值, 对变量使用 `!!variable` 来验证,\n只要变量的值为: 0, null, undefined, NaN都将返回 false, 反之返回 true. 如: \n\n```javascript\n class Foo {\n    constructor ( count ) {\n        this.cash = count;\n        this.myCash = !!count;\n    }\n}\nvar emptyFoo = new Foo(0);\nconsole.log(foo.cash); // 0\nconsole.log(foo.myCash); // false\n\nvar foo = new Foo(100);\nconsole.log(foo.cash); // 100\nconsole.log(foo.myCash); // true\n```\n\n> #### 2. 使用 `+` 将字符串转换为数字\n只适合将字符串数据转换为数字, 给后台传数据的时候经常用到, \n如果不是字符串数据会返回 NaN.\n\n```javascript\nvar toNumber = strNumber => {\n    return +strNumber;\n}\nconsole.log( toNumber(\"123\") ); // 123\nconsole.log( toNumber(\" abc\")); // NaN\n\n// Date也可以使用\nconsole.log( +new Date() ); // 返回时间戳\n```\n\n> #### 3. 并符条件\n经常用到这样的条件判断.\n\n```javascript\nif (isConcat) {\n    Login()\n}\n```\n可以简写成这样 ` isConact && Login() `\n\n### 4. 获取数组中的最后一个元素\n`Array.prototype.slice (begin, end)` 经常用这样的方式来截取数组的元素, \n如果不设置 end 的值, 那么默认会将数组的长度作为 end 值. \n如果将负数作为参数的 begin 值, 就可以获取数组的最后一个元素.\n\n```javascript\nvar arr = [1,2,3,4,5];\nconsole.log( arr.slice(-1) ); // [5]\nconosle.log( arr.slice(-2) ); // [4,5]\n以此类推\n```\n> #### 5. 截断数组\n用来锁定数组的长度, 删除数组中的一些元素. 比如数组一共有10个元素, \n但我只需要前5个元素, 就可以通过 `array.length = 5 ` 来截断数组, 如: \n\n```javascript\nvar arr = [1,2,3,4,5];\nconsole.log( arr.length); // 5\narr.length = 3;\nconsole.log( arr.length ); // 3\nconsole.log( arr ); // [1,2,3]\n```\n\n> #### 6. 将NodeList转换为数组\n如果通过 ` doucment.querySelectorAll('p') ` 获取元素, 它返回的是一个DOM元素的\n数组 ( NodeList ) 对象, 但是这个数组不具有数组的功能,\n比如 ` push() / sort() ` 等. 这就需要将这个 NodeList 转换为真正的数组.\n可以使用 ` [].slice.call( NodeList ) ` 来实现. 如:\n\n```javascript\nvar els = document.querySelectorAll( 'p' );\n[].slice.call( els );\nOR:\nvar arrElement = Array.from( els );\nES6:\nvar arr = [...els]\n```\n> #### 7. 数组元素重排\n```javascript\nvar list = [1,2,3];\nconsole.log(list.sort(()=>{ Math.random() - 0.5}))\n```\n\nCreated on 2017-6-14 by Cara\n","slug":"JavaScript-关于运算的小技巧","published":1,"updated":"2018-05-05T09:23:03.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolsc000cklu0grv9im7h","content":"<blockquote>\n<h4 id=\"1-使用-操作符转换布尔值\"><a href=\"#1-使用-操作符转换布尔值\" class=\"headerlink\" title=\"1. 使用 !! 操作符转换布尔值\"></a>1. 使用 <code>!!</code> 操作符转换布尔值</h4><p>用于检查一个变量是否存在或者是有效值, 对变量使用 <code>!!variable</code> 来验证,<br>只要变量的值为: 0, null, undefined, NaN都将返回 false, 反之返回 true. 如: </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> ( count ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cash = count;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.myCash = !!count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> emptyFoo = <span class=\"keyword\">new</span> Foo(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.cash); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.myCash); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.cash); <span class=\"comment\">// 100</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.myCash); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"2-使用-将字符串转换为数字\"><a href=\"#2-使用-将字符串转换为数字\" class=\"headerlink\" title=\"2. 使用 + 将字符串转换为数字\"></a>2. 使用 <code>+</code> 将字符串转换为数字</h4><p>只适合将字符串数据转换为数字, 给后台传数据的时候经常用到,<br>如果不是字符串数据会返回 NaN.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> toNumber = <span class=\"function\"><span class=\"params\">strNumber</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> +strNumber;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( toNumber(<span class=\"string\">\"123\"</span>) ); <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( toNumber(<span class=\"string\">\" abc\"</span>)); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Date也可以使用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() ); <span class=\"comment\">// 返回时间戳</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"3-并符条件\"><a href=\"#3-并符条件\" class=\"headerlink\" title=\"3. 并符条件\"></a>3. 并符条件</h4><p>经常用到这样的条件判断.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isConcat) &#123;</span><br><span class=\"line\">    Login()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以简写成这样 <code>isConact &amp;&amp; Login()</code></p>\n<h3 id=\"4-获取数组中的最后一个元素\"><a href=\"#4-获取数组中的最后一个元素\" class=\"headerlink\" title=\"4. 获取数组中的最后一个元素\"></a>4. 获取数组中的最后一个元素</h3><p><code>Array.prototype.slice (begin, end)</code> 经常用这样的方式来截取数组的元素,<br>如果不设置 end 的值, 那么默认会将数组的长度作为 end 值.<br>如果将负数作为参数的 begin 值, 就可以获取数组的最后一个元素.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr.slice(<span class=\"number\">-1</span>) ); <span class=\"comment\">// [5]</span></span><br><span class=\"line\">conosle.log( arr.slice(<span class=\"number\">-2</span>) ); <span class=\"comment\">// [4,5]</span></span><br><span class=\"line\">以此类推</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"5-截断数组\"><a href=\"#5-截断数组\" class=\"headerlink\" title=\"5. 截断数组\"></a>5. 截断数组</h4><p>用来锁定数组的长度, 删除数组中的一些元素. 比如数组一共有10个元素,<br>但我只需要前5个元素, 就可以通过 <code>array.length = 5</code> 来截断数组, 如: </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr.length); <span class=\"comment\">// 5</span></span><br><span class=\"line\">arr.length = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr.length ); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr ); <span class=\"comment\">// [1,2,3]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"6-将NodeList转换为数组\"><a href=\"#6-将NodeList转换为数组\" class=\"headerlink\" title=\"6. 将NodeList转换为数组\"></a>6. 将NodeList转换为数组</h4><p>如果通过 <code>doucment.querySelectorAll(&#39;p&#39;)</code> 获取元素, 它返回的是一个DOM元素的<br>数组 ( NodeList ) 对象, 但是这个数组不具有数组的功能,<br>比如 <code>push() / sort()</code> 等. 这就需要将这个 NodeList 转换为真正的数组.<br>可以使用 <code>[].slice.call( NodeList )</code> 来实现. 如:</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> els = <span class=\"built_in\">document</span>.querySelectorAll( <span class=\"string\">'p'</span> );</span><br><span class=\"line\">[].slice.call( els );</span><br><span class=\"line\">OR:</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrElement = <span class=\"built_in\">Array</span>.from( els );</span><br><span class=\"line\">ES6:</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [...els]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"7-数组元素重排\"><a href=\"#7-数组元素重排\" class=\"headerlink\" title=\"7. 数组元素重排\"></a>7. 数组元素重排</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(list.sort(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123; <span class=\"built_in\">Math</span>.random() - <span class=\"number\">0.5</span>&#125;))</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>Created on 2017-6-14 by Cara</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h4 id=\"1-使用-操作符转换布尔值\"><a href=\"#1-使用-操作符转换布尔值\" class=\"headerlink\" title=\"1. 使用 !! 操作符转换布尔值\"></a>1. 使用 <code>!!</code> 操作符转换布尔值</h4><p>用于检查一个变量是否存在或者是有效值, 对变量使用 <code>!!variable</code> 来验证,<br>只要变量的值为: 0, null, undefined, NaN都将返回 false, 反之返回 true. 如: </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> ( count ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cash = count;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.myCash = !!count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> emptyFoo = <span class=\"keyword\">new</span> Foo(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.cash); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.myCash); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.cash); <span class=\"comment\">// 100</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.myCash); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"2-使用-将字符串转换为数字\"><a href=\"#2-使用-将字符串转换为数字\" class=\"headerlink\" title=\"2. 使用 + 将字符串转换为数字\"></a>2. 使用 <code>+</code> 将字符串转换为数字</h4><p>只适合将字符串数据转换为数字, 给后台传数据的时候经常用到,<br>如果不是字符串数据会返回 NaN.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> toNumber = <span class=\"function\"><span class=\"params\">strNumber</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> +strNumber;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( toNumber(<span class=\"string\">\"123\"</span>) ); <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( toNumber(<span class=\"string\">\" abc\"</span>)); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Date也可以使用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() ); <span class=\"comment\">// 返回时间戳</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"3-并符条件\"><a href=\"#3-并符条件\" class=\"headerlink\" title=\"3. 并符条件\"></a>3. 并符条件</h4><p>经常用到这样的条件判断.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isConcat) &#123;</span><br><span class=\"line\">    Login()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以简写成这样 <code>isConact &amp;&amp; Login()</code></p>\n<h3 id=\"4-获取数组中的最后一个元素\"><a href=\"#4-获取数组中的最后一个元素\" class=\"headerlink\" title=\"4. 获取数组中的最后一个元素\"></a>4. 获取数组中的最后一个元素</h3><p><code>Array.prototype.slice (begin, end)</code> 经常用这样的方式来截取数组的元素,<br>如果不设置 end 的值, 那么默认会将数组的长度作为 end 值.<br>如果将负数作为参数的 begin 值, 就可以获取数组的最后一个元素.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr.slice(<span class=\"number\">-1</span>) ); <span class=\"comment\">// [5]</span></span><br><span class=\"line\">conosle.log( arr.slice(<span class=\"number\">-2</span>) ); <span class=\"comment\">// [4,5]</span></span><br><span class=\"line\">以此类推</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"5-截断数组\"><a href=\"#5-截断数组\" class=\"headerlink\" title=\"5. 截断数组\"></a>5. 截断数组</h4><p>用来锁定数组的长度, 删除数组中的一些元素. 比如数组一共有10个元素,<br>但我只需要前5个元素, 就可以通过 <code>array.length = 5</code> 来截断数组, 如: </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr.length); <span class=\"comment\">// 5</span></span><br><span class=\"line\">arr.length = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr.length ); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( arr ); <span class=\"comment\">// [1,2,3]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"6-将NodeList转换为数组\"><a href=\"#6-将NodeList转换为数组\" class=\"headerlink\" title=\"6. 将NodeList转换为数组\"></a>6. 将NodeList转换为数组</h4><p>如果通过 <code>doucment.querySelectorAll(&#39;p&#39;)</code> 获取元素, 它返回的是一个DOM元素的<br>数组 ( NodeList ) 对象, 但是这个数组不具有数组的功能,<br>比如 <code>push() / sort()</code> 等. 这就需要将这个 NodeList 转换为真正的数组.<br>可以使用 <code>[].slice.call( NodeList )</code> 来实现. 如:</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> els = <span class=\"built_in\">document</span>.querySelectorAll( <span class=\"string\">'p'</span> );</span><br><span class=\"line\">[].slice.call( els );</span><br><span class=\"line\">OR:</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrElement = <span class=\"built_in\">Array</span>.from( els );</span><br><span class=\"line\">ES6:</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [...els]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"7-数组元素重排\"><a href=\"#7-数组元素重排\" class=\"headerlink\" title=\"7. 数组元素重排\"></a>7. 数组元素重排</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(list.sort(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123; <span class=\"built_in\">Math</span>.random() - <span class=\"number\">0.5</span>&#125;))</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>Created on 2017-6-14 by Cara</p>\n"},{"title":"Inheritance 继承","date":"2017-10-16T14:37:47.000Z","_content":"> # 继承\n在那些基于类的语言, 继承是一种代码重用的形式, 如果一个新的类与一个已存\n在的类拥有大部分相同的功能, 那么就只需要说明两者之间的区别即可. 但是\n JavaScript 并没有类的概念, 但是有很多代码重用的模式, 它可以模拟类的\n模式, 也可以支持其他的模式.\n\n### 伪类\n在 C++ 和 Java中都是用 new 命令来生成示实例, 在使用 new 命令时都会调用类的\n构造函数(constructor), 因此 Brendan Eich ( JavaScript 作者)将 new 引入了 JavaScript,\n从原型对象上生成一个实例对象. 因为 js 没有类, 所以在 new 命令后面跟的是构造函数,\n而不是像 Java 一样跟的是类. 简单的来说就是通过构造器生产对象.\n\n```javascript\n// 先扩展一个方法, 懒得每次打prototype\n// 这个不是必须的\nFunction.prototype.method = function (name, fn) {\n\tthis.prototype[name] = fn;\n\treturn this\t\n}\n\n// 语言精粹里的例子 (其实这一步就是在模仿 new 的实现)\nFunction.method('new', function () {\n\n\t// 创建一个新对象, 它继承构造器函数的原型对象\n\tlet that = Object.create(this.prototype);\n\n\t// 调用构造器函数, 将 this 绑定到新对象上\n\tlet other = this.apply(that, arguments);\n\n\treturn (typeof other === 'object' && other) || that\n})\n\n// 现在定义一个构造器\nlet Bar = function (name) {\n\tthis.name = name;\n}\n\n// 扩展这个构造函数的原型\nBar.prototype.get_name = function () {\n\treturn this.name\n}\nBar.prototype.say = function () {\n\tthis.saying || '';\n} \n\n// 然后构造一个实例\nlet myBar = new Bar('妲己');\nconsole.log(myBar.get_name()) // 妲己\n\n/**\n *  掩盖掉丑陋的 prototype\n */\n\n// 借助一个辅助函数\nFunction.method('inherit', function (parent) {\n\tthis.prototype = new parent();\n\treturn this\n})\n\n// 重新定义一个构造函数\n// 去继承上面的 Bar\nlet Foo = function (name) {\n\tthis.saying = 'wow';\n}\n// 这里 inherit 和 method 都直接返回 this\n// 所以可以采用联级\n.inherit(Bar)\n.method('noise', function () {\n\treturn this.name + this.say()\n})\n\n```\n伪类模式在通过new 命令生产对象时, 会产生内存浪费. 如上面的例子, Foo 构造函数\n就回去重复构造器 Bar 已经完成的工作.\n\n### 原型\n在一个纯粹的原型模式中, 将摒弃类专注于对象. 基于原型的继承相比于类的\n继承在概念上更为简单: 一个新对象可以继承一个旧对象的属性. 通过构造一个有用\n的对象开始, 接着可以构造出更多和这个对象相似的对象.   ----<JavaScript语言精粹> \n\n```javascript\n// 先构造一个基础对象\nconst baseObject = {\n\tname: 'base',\n\tget_name: function () {\n\t\treturn this.name\n\t}\n}\n\n// 接下来构造定制化的对象\nlet myObj = Object.create(baseObject);\nmyObj.name = 'wow';\nmyObj.saying = 'Hi';\nmyObj.purr = n => {\n\tlet str = '';\n\tfor (let i = 0; i < n; i++) {\n\t\tif (str) {\n\t\t\tstr += 'hello'\n\t\t}\n\t\tstr += 'world'\n\t}\n\treturn str\n}\n```\n\n这是一种'差异化继承', 通过制定一个新的对象, 指明它与基本对象的不同.\n\n\n\n### 函数化\n以上两种继承模式都没有实现私有化, 也就是说所有的变量和方法都是公开的, 所以就\n可以开始运用模块模式. 这个函数主要分为四个步骤:\n\n1. 创建一个新的对象\n\n2. 定义私有属性.\n\n3. 给这个新对象扩充特权函数 (暴露接口)\n\n4. 返回这个对象\n\n```javascript\n// spec 对象包含构造器所需要的所有信息\n// my 对象允许其他构造器分享他们的私有属性\n// 以便在我们的构造器中使用\nlet constructor = (spec, my) => {\n\tlet that = {}; // 私有实例变量\n\n\tlet my = my || {};\n\t\n\t// 扩展共享的变量和方法\n\t...\n\n\tthat = 一个新对象\n\n\t// 给 that 添加特权方法 \n\t...\n\n\t// 返回这个对象\n\treturn that\n}\n```\n\n> 语言精粹里的例子\n\n1. 构造器\n```javascript\nconst mammal = spec => {\n\tlet that = {};\n\n\tthat.get_name = _ => spec.name;\n\tthat.says = _ => spec.saying || '';\n\n\treturn that\n}\n\nlet myMammal = mammal({name: 'Herb'});\n```\n\n2. 另一个构造器\n```javascript\nlet cat = spec =>{\n\tspec.saying = spec.saying || 'meow';\n\t// 继承\n\tlet that = mammal(spec);\n\t\n\tthat.purr = n => {\n\t\tlet i, s = '';\n\n\t\tfor (i = 0; i < n; i++) {\n\t\t\tif (s) {\n\t\t\t\ts += '-';\t\n\t\t\t}\n\t\t\ts += 'r';\n\t\t}\n\t\treturn s\n\t};\n\tthat.get_name = _ => {\n\t\treturn that.says() + ' ' + spec.name + ' ' + that.says();\n\t}\n\n\treturn that\n}\n\nlet myCat = car({name: 'Henrietta'});\n```\n\n### 超类\n以上函数化的方式还不能够调用父类的方法并向父类方法传递参数. 以下是测试代码\n在`语言精粹`的例子的基础上稍作改动, 便于自己理解:\n\n```javascript\n// 构造器\nconst mammal = spec => {\n\tlet that = {};\n\n\tthat.get_name = _ => spec.name;\n\tthat.says = _ => spec.saying || 'Hi';\n\n\treturn that\n}\n\nlet myMammal = mammal({name: 'Cara'});\n\nconsole.log(myMammal.says()) // 'Hi'\n\n\n// 构造器2\nconst cat = spec => {\n\tspec.saying = spec.saying || 'meow';\n\n\t// 此时 that 已经包含: get_name 和 says 方法\n\tlet that = mammal(spec);\n\n\tthat.purr = n => {\n\t\tlet str = '';\n\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tif (str) {\n\t\t\t\tstr += '-';\n\t\t\t}\n\t\t\tstr += 'r';\n\t\t}\n\t\treturn str\n\t};\n\tthat.get_name = n => {\n\t\treturn n || \"i dont't have name\"\n\t};\n\n\treturn that\n}\n\nlet myCat = cat({name: 'Henrietta'});\n\n// i dont't have name\nconsole.log(myCat.get_name())\n\n// 这个时候 cat 还不能访问父类方法的能力\n// 所以超类 super 还是有必要的\n\n// 先扩展两个方法\n// 这个方法不能用箭头函数来定义, 否则 this 指向的window\n// 这里 this 需要的是被调用的对象\nFunction.prototype.method =  function (name, fn) {\n\tthis.prototype[name] = fn;\n\treturn this\n}\n\n// 定义调用父类的函数\nObject.method('superior', function (name) {\n\tvar that = this,\n        method = that[name];\n    return n => {\n    \t// this cat function\n    \tconsole.log(n)\n        return method.call(that, n);\n    };\n})\n\n// 来试试调用父类\nconst coolCat = spec => {\n\tlet that = cat(spec);\n\tlet\tsuper_get_name = that.superior('get_name');\n\n\t// n 给父类方法传参\n\tthat.get_name = n => {\n        return 'like ' + super_get_name.call(this, n) + ' baby';\n    };\n\n\treturn that\n}\n\nlet myCoolCat = coolCat({name: 'Bix', saying: 'Hi'});\n\nlet name = myCoolCat.get_name('this cat function');\n\nconsole.log(name) // like this cat function baby\n```\n\n#### 最后随便提一下\n箭头函数的几个使用注意点:\n\n1. 函数体内的 `this` 对象, 就是定义时所在的对象, 而不是使用时所在的对象.\n\n2. 不可以当作构造函数, 也就是说, 不可以使用new命令, 否则会抛出一个错误.\n因为箭头函数没有自己的 `this`, 而是继承外层函数的`this`.\n\n3. 不可以使用 `arguments` 对象, 该对象在函数体内不存在.\n\n4. 不可以使用 `yield` 命令, 因此箭头函数不能用作Generator函数.\n\nCeated on 2017-9-15 by Cara ","source":"_posts/Inheritance-继承.md","raw":"---\ntitle: Inheritance 继承\ndate: 2017-10-16 22:37:47\ntags:\n- JavaScript\ncategories:\n- 复习\n- 笔记📒\n---\n> # 继承\n在那些基于类的语言, 继承是一种代码重用的形式, 如果一个新的类与一个已存\n在的类拥有大部分相同的功能, 那么就只需要说明两者之间的区别即可. 但是\n JavaScript 并没有类的概念, 但是有很多代码重用的模式, 它可以模拟类的\n模式, 也可以支持其他的模式.\n\n### 伪类\n在 C++ 和 Java中都是用 new 命令来生成示实例, 在使用 new 命令时都会调用类的\n构造函数(constructor), 因此 Brendan Eich ( JavaScript 作者)将 new 引入了 JavaScript,\n从原型对象上生成一个实例对象. 因为 js 没有类, 所以在 new 命令后面跟的是构造函数,\n而不是像 Java 一样跟的是类. 简单的来说就是通过构造器生产对象.\n\n```javascript\n// 先扩展一个方法, 懒得每次打prototype\n// 这个不是必须的\nFunction.prototype.method = function (name, fn) {\n\tthis.prototype[name] = fn;\n\treturn this\t\n}\n\n// 语言精粹里的例子 (其实这一步就是在模仿 new 的实现)\nFunction.method('new', function () {\n\n\t// 创建一个新对象, 它继承构造器函数的原型对象\n\tlet that = Object.create(this.prototype);\n\n\t// 调用构造器函数, 将 this 绑定到新对象上\n\tlet other = this.apply(that, arguments);\n\n\treturn (typeof other === 'object' && other) || that\n})\n\n// 现在定义一个构造器\nlet Bar = function (name) {\n\tthis.name = name;\n}\n\n// 扩展这个构造函数的原型\nBar.prototype.get_name = function () {\n\treturn this.name\n}\nBar.prototype.say = function () {\n\tthis.saying || '';\n} \n\n// 然后构造一个实例\nlet myBar = new Bar('妲己');\nconsole.log(myBar.get_name()) // 妲己\n\n/**\n *  掩盖掉丑陋的 prototype\n */\n\n// 借助一个辅助函数\nFunction.method('inherit', function (parent) {\n\tthis.prototype = new parent();\n\treturn this\n})\n\n// 重新定义一个构造函数\n// 去继承上面的 Bar\nlet Foo = function (name) {\n\tthis.saying = 'wow';\n}\n// 这里 inherit 和 method 都直接返回 this\n// 所以可以采用联级\n.inherit(Bar)\n.method('noise', function () {\n\treturn this.name + this.say()\n})\n\n```\n伪类模式在通过new 命令生产对象时, 会产生内存浪费. 如上面的例子, Foo 构造函数\n就回去重复构造器 Bar 已经完成的工作.\n\n### 原型\n在一个纯粹的原型模式中, 将摒弃类专注于对象. 基于原型的继承相比于类的\n继承在概念上更为简单: 一个新对象可以继承一个旧对象的属性. 通过构造一个有用\n的对象开始, 接着可以构造出更多和这个对象相似的对象.   ----<JavaScript语言精粹> \n\n```javascript\n// 先构造一个基础对象\nconst baseObject = {\n\tname: 'base',\n\tget_name: function () {\n\t\treturn this.name\n\t}\n}\n\n// 接下来构造定制化的对象\nlet myObj = Object.create(baseObject);\nmyObj.name = 'wow';\nmyObj.saying = 'Hi';\nmyObj.purr = n => {\n\tlet str = '';\n\tfor (let i = 0; i < n; i++) {\n\t\tif (str) {\n\t\t\tstr += 'hello'\n\t\t}\n\t\tstr += 'world'\n\t}\n\treturn str\n}\n```\n\n这是一种'差异化继承', 通过制定一个新的对象, 指明它与基本对象的不同.\n\n\n\n### 函数化\n以上两种继承模式都没有实现私有化, 也就是说所有的变量和方法都是公开的, 所以就\n可以开始运用模块模式. 这个函数主要分为四个步骤:\n\n1. 创建一个新的对象\n\n2. 定义私有属性.\n\n3. 给这个新对象扩充特权函数 (暴露接口)\n\n4. 返回这个对象\n\n```javascript\n// spec 对象包含构造器所需要的所有信息\n// my 对象允许其他构造器分享他们的私有属性\n// 以便在我们的构造器中使用\nlet constructor = (spec, my) => {\n\tlet that = {}; // 私有实例变量\n\n\tlet my = my || {};\n\t\n\t// 扩展共享的变量和方法\n\t...\n\n\tthat = 一个新对象\n\n\t// 给 that 添加特权方法 \n\t...\n\n\t// 返回这个对象\n\treturn that\n}\n```\n\n> 语言精粹里的例子\n\n1. 构造器\n```javascript\nconst mammal = spec => {\n\tlet that = {};\n\n\tthat.get_name = _ => spec.name;\n\tthat.says = _ => spec.saying || '';\n\n\treturn that\n}\n\nlet myMammal = mammal({name: 'Herb'});\n```\n\n2. 另一个构造器\n```javascript\nlet cat = spec =>{\n\tspec.saying = spec.saying || 'meow';\n\t// 继承\n\tlet that = mammal(spec);\n\t\n\tthat.purr = n => {\n\t\tlet i, s = '';\n\n\t\tfor (i = 0; i < n; i++) {\n\t\t\tif (s) {\n\t\t\t\ts += '-';\t\n\t\t\t}\n\t\t\ts += 'r';\n\t\t}\n\t\treturn s\n\t};\n\tthat.get_name = _ => {\n\t\treturn that.says() + ' ' + spec.name + ' ' + that.says();\n\t}\n\n\treturn that\n}\n\nlet myCat = car({name: 'Henrietta'});\n```\n\n### 超类\n以上函数化的方式还不能够调用父类的方法并向父类方法传递参数. 以下是测试代码\n在`语言精粹`的例子的基础上稍作改动, 便于自己理解:\n\n```javascript\n// 构造器\nconst mammal = spec => {\n\tlet that = {};\n\n\tthat.get_name = _ => spec.name;\n\tthat.says = _ => spec.saying || 'Hi';\n\n\treturn that\n}\n\nlet myMammal = mammal({name: 'Cara'});\n\nconsole.log(myMammal.says()) // 'Hi'\n\n\n// 构造器2\nconst cat = spec => {\n\tspec.saying = spec.saying || 'meow';\n\n\t// 此时 that 已经包含: get_name 和 says 方法\n\tlet that = mammal(spec);\n\n\tthat.purr = n => {\n\t\tlet str = '';\n\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tif (str) {\n\t\t\t\tstr += '-';\n\t\t\t}\n\t\t\tstr += 'r';\n\t\t}\n\t\treturn str\n\t};\n\tthat.get_name = n => {\n\t\treturn n || \"i dont't have name\"\n\t};\n\n\treturn that\n}\n\nlet myCat = cat({name: 'Henrietta'});\n\n// i dont't have name\nconsole.log(myCat.get_name())\n\n// 这个时候 cat 还不能访问父类方法的能力\n// 所以超类 super 还是有必要的\n\n// 先扩展两个方法\n// 这个方法不能用箭头函数来定义, 否则 this 指向的window\n// 这里 this 需要的是被调用的对象\nFunction.prototype.method =  function (name, fn) {\n\tthis.prototype[name] = fn;\n\treturn this\n}\n\n// 定义调用父类的函数\nObject.method('superior', function (name) {\n\tvar that = this,\n        method = that[name];\n    return n => {\n    \t// this cat function\n    \tconsole.log(n)\n        return method.call(that, n);\n    };\n})\n\n// 来试试调用父类\nconst coolCat = spec => {\n\tlet that = cat(spec);\n\tlet\tsuper_get_name = that.superior('get_name');\n\n\t// n 给父类方法传参\n\tthat.get_name = n => {\n        return 'like ' + super_get_name.call(this, n) + ' baby';\n    };\n\n\treturn that\n}\n\nlet myCoolCat = coolCat({name: 'Bix', saying: 'Hi'});\n\nlet name = myCoolCat.get_name('this cat function');\n\nconsole.log(name) // like this cat function baby\n```\n\n#### 最后随便提一下\n箭头函数的几个使用注意点:\n\n1. 函数体内的 `this` 对象, 就是定义时所在的对象, 而不是使用时所在的对象.\n\n2. 不可以当作构造函数, 也就是说, 不可以使用new命令, 否则会抛出一个错误.\n因为箭头函数没有自己的 `this`, 而是继承外层函数的`this`.\n\n3. 不可以使用 `arguments` 对象, 该对象在函数体内不存在.\n\n4. 不可以使用 `yield` 命令, 因此箭头函数不能用作Generator函数.\n\nCeated on 2017-9-15 by Cara ","slug":"Inheritance-继承","published":1,"updated":"2018-05-05T09:23:03.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolse000hklu0ne588sj0","content":"<blockquote>\n<h1 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h1><p>在那些基于类的语言, 继承是一种代码重用的形式, 如果一个新的类与一个已存<br>在的类拥有大部分相同的功能, 那么就只需要说明两者之间的区别即可. 但是<br> JavaScript 并没有类的概念, 但是有很多代码重用的模式, 它可以模拟类的<br>模式, 也可以支持其他的模式.</p>\n</blockquote>\n<h3 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h3><p>在 C++ 和 Java中都是用 new 命令来生成示实例, 在使用 new 命令时都会调用类的<br>构造函数(constructor), 因此 Brendan Eich ( JavaScript 作者)将 new 引入了 JavaScript,<br>从原型对象上生成一个实例对象. 因为 js 没有类, 所以在 new 命令后面跟的是构造函数,<br>而不是像 Java 一样跟的是类. 简单的来说就是通过构造器生产对象.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先扩展一个方法, 懒得每次打prototype</span></span><br><span class=\"line\"><span class=\"comment\">// 这个不是必须的</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.method = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, fn</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.prototype[name] = fn;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 语言精粹里的例子 (其实这一步就是在模仿 new 的实现)</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.method(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个新对象, 它继承构造器函数的原型对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>.prototype);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 调用构造器函数, 将 this 绑定到新对象上</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> other = <span class=\"keyword\">this</span>.apply(that, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> other === <span class=\"string\">'object'</span> &amp;&amp; other) || that</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在定义一个构造器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 扩展这个构造函数的原型</span></span><br><span class=\"line\">Bar.prototype.get_name = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Bar.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.saying || <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 然后构造一个实例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myBar = <span class=\"keyword\">new</span> Bar(<span class=\"string\">'妲己'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myBar.get_name()) <span class=\"comment\">// 妲己</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  掩盖掉丑陋的 prototype</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 借助一个辅助函数</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.method(<span class=\"string\">'inherit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">parent</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.prototype = <span class=\"keyword\">new</span> parent();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重新定义一个构造函数</span></span><br><span class=\"line\"><span class=\"comment\">// 去继承上面的 Bar</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.saying = <span class=\"string\">'wow'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里 inherit 和 method 都直接返回 this</span></span><br><span class=\"line\"><span class=\"comment\">// 所以可以采用联级</span></span><br><span class=\"line\">.inherit(Bar)</span><br><span class=\"line\">.method(<span class=\"string\">'noise'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"keyword\">this</span>.say()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>伪类模式在通过new 命令生产对象时, 会产生内存浪费. 如上面的例子, Foo 构造函数<br>就回去重复构造器 Bar 已经完成的工作.</p>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><p>在一个纯粹的原型模式中, 将摒弃类专注于对象. 基于原型的继承相比于类的<br>继承在概念上更为简单: 一个新对象可以继承一个旧对象的属性. 通过构造一个有用<br>的对象开始, 接着可以构造出更多和这个对象相似的对象.   —-&lt;JavaScript语言精粹&gt; </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先构造一个基础对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> baseObject = &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'base'</span>,</span><br><span class=\"line\">\tget_name: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接下来构造定制化的对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myObj = <span class=\"built_in\">Object</span>.create(baseObject);</span><br><span class=\"line\">myObj.name = <span class=\"string\">'wow'</span>;</span><br><span class=\"line\">myObj.saying = <span class=\"string\">'Hi'</span>;</span><br><span class=\"line\">myObj.purr = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> str = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str) &#123;</span><br><span class=\"line\">\t\t\tstr += <span class=\"string\">'hello'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstr += <span class=\"string\">'world'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一种’差异化继承’, 通过制定一个新的对象, 指明它与基本对象的不同.</p>\n<h3 id=\"函数化\"><a href=\"#函数化\" class=\"headerlink\" title=\"函数化\"></a>函数化</h3><p>以上两种继承模式都没有实现私有化, 也就是说所有的变量和方法都是公开的, 所以就<br>可以开始运用模块模式. 这个函数主要分为四个步骤:</p>\n<ol>\n<li><p>创建一个新的对象</p>\n</li>\n<li><p>定义私有属性.</p>\n</li>\n<li><p>给这个新对象扩充特权函数 (暴露接口)</p>\n</li>\n<li><p>返回这个对象</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// spec 对象包含构造器所需要的所有信息</span></span><br><span class=\"line\"><span class=\"comment\">// my 对象允许其他构造器分享他们的私有属性</span></span><br><span class=\"line\"><span class=\"comment\">// 以便在我们的构造器中使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">constructor</span> = (spec, my) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = &#123;&#125;; <span class=\"comment\">// 私有实例变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> my = my || &#123;&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 扩展共享的变量和方法</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\tthat = 一个新对象</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 给 that 添加特权方法 </span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 返回这个对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> that</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>语言精粹里的例子</p>\n</blockquote>\n<ol>\n<li><p>构造器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mammal = <span class=\"function\"><span class=\"params\">spec</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tthat.get_name = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> spec.name;</span><br><span class=\"line\">\tthat.says = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> spec.saying || <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myMammal = mammal(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'Herb'</span>&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>另一个构造器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cat = <span class=\"function\"><span class=\"params\">spec</span> =&gt;</span>&#123;</span><br><span class=\"line\">\tspec.saying = spec.saying || <span class=\"string\">'meow'</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 继承</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = mammal(spec);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tthat.purr = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> i, s = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (s) &#123;</span><br><span class=\"line\">\t\t\t\ts += <span class=\"string\">'-'</span>;\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ts += <span class=\"string\">'r'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tthat.get_name = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> that.says() + <span class=\"string\">' '</span> + spec.name + <span class=\"string\">' '</span> + that.says();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myCat = car(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'Henrietta'</span>&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"超类\"><a href=\"#超类\" class=\"headerlink\" title=\"超类\"></a>超类</h3><p>以上函数化的方式还不能够调用父类的方法并向父类方法传递参数. 以下是测试代码<br>在<code>语言精粹</code>的例子的基础上稍作改动, 便于自己理解:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mammal = <span class=\"function\"><span class=\"params\">spec</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tthat.get_name = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> spec.name;</span><br><span class=\"line\">\tthat.says = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> spec.saying || <span class=\"string\">'Hi'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myMammal = mammal(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'Cara'</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myMammal.says()) <span class=\"comment\">// 'Hi'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造器2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cat = <span class=\"function\"><span class=\"params\">spec</span> =&gt;</span> &#123;</span><br><span class=\"line\">\tspec.saying = spec.saying || <span class=\"string\">'meow'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 此时 that 已经包含: get_name 和 says 方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = mammal(spec);</span><br><span class=\"line\"></span><br><span class=\"line\">\tthat.purr = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> str = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (str) &#123;</span><br><span class=\"line\">\t\t\t\tstr += <span class=\"string\">'-'</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tstr += <span class=\"string\">'r'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tthat.get_name = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n || <span class=\"string\">\"i dont't have name\"</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myCat = cat(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'Henrietta'</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// i dont't have name</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myCat.get_name())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个时候 cat 还不能访问父类方法的能力</span></span><br><span class=\"line\"><span class=\"comment\">// 所以超类 super 还是有必要的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先扩展两个方法</span></span><br><span class=\"line\"><span class=\"comment\">// 这个方法不能用箭头函数来定义, 否则 this 指向的window</span></span><br><span class=\"line\"><span class=\"comment\">// 这里 this 需要的是被调用的对象</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.method =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, fn</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.prototype[name] = fn;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义调用父类的函数</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.method(<span class=\"string\">'superior'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">        method = that[name];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// this cat function</span></span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> method.call(that, n);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 来试试调用父类</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> coolCat = <span class=\"function\"><span class=\"params\">spec</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = cat(spec);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span>\tsuper_get_name = that.superior(<span class=\"string\">'get_name'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// n 给父类方法传参</span></span><br><span class=\"line\">\tthat.get_name = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'like '</span> + super_get_name.call(<span class=\"keyword\">this</span>, n) + <span class=\"string\">' baby'</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myCoolCat = coolCat(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'Bix'</span>, <span class=\"attr\">saying</span>: <span class=\"string\">'Hi'</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = myCoolCat.get_name(<span class=\"string\">'this cat function'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name) <span class=\"comment\">// like this cat function baby</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"最后随便提一下\"><a href=\"#最后随便提一下\" class=\"headerlink\" title=\"最后随便提一下\"></a>最后随便提一下</h4><p>箭头函数的几个使用注意点:</p>\n<ol>\n<li><p>函数体内的 <code>this</code> 对象, 就是定义时所在的对象, 而不是使用时所在的对象.</p>\n</li>\n<li><p>不可以当作构造函数, 也就是说, 不可以使用new命令, 否则会抛出一个错误.<br>因为箭头函数没有自己的 <code>this</code>, 而是继承外层函数的<code>this</code>.</p>\n</li>\n<li><p>不可以使用 <code>arguments</code> 对象, 该对象在函数体内不存在.</p>\n</li>\n<li><p>不可以使用 <code>yield</code> 命令, 因此箭头函数不能用作Generator函数.</p>\n</li>\n</ol>\n<p>Ceated on 2017-9-15 by Cara </p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h1 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h1><p>在那些基于类的语言, 继承是一种代码重用的形式, 如果一个新的类与一个已存<br>在的类拥有大部分相同的功能, 那么就只需要说明两者之间的区别即可. 但是<br> JavaScript 并没有类的概念, 但是有很多代码重用的模式, 它可以模拟类的<br>模式, 也可以支持其他的模式.</p>\n</blockquote>\n<h3 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h3><p>在 C++ 和 Java中都是用 new 命令来生成示实例, 在使用 new 命令时都会调用类的<br>构造函数(constructor), 因此 Brendan Eich ( JavaScript 作者)将 new 引入了 JavaScript,<br>从原型对象上生成一个实例对象. 因为 js 没有类, 所以在 new 命令后面跟的是构造函数,<br>而不是像 Java 一样跟的是类. 简单的来说就是通过构造器生产对象.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先扩展一个方法, 懒得每次打prototype</span></span><br><span class=\"line\"><span class=\"comment\">// 这个不是必须的</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.method = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, fn</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.prototype[name] = fn;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 语言精粹里的例子 (其实这一步就是在模仿 new 的实现)</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.method(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个新对象, 它继承构造器函数的原型对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>.prototype);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 调用构造器函数, 将 this 绑定到新对象上</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> other = <span class=\"keyword\">this</span>.apply(that, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> other === <span class=\"string\">'object'</span> &amp;&amp; other) || that</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在定义一个构造器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 扩展这个构造函数的原型</span></span><br><span class=\"line\">Bar.prototype.get_name = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Bar.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.saying || <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 然后构造一个实例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myBar = <span class=\"keyword\">new</span> Bar(<span class=\"string\">'妲己'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myBar.get_name()) <span class=\"comment\">// 妲己</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  掩盖掉丑陋的 prototype</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 借助一个辅助函数</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.method(<span class=\"string\">'inherit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">parent</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.prototype = <span class=\"keyword\">new</span> parent();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重新定义一个构造函数</span></span><br><span class=\"line\"><span class=\"comment\">// 去继承上面的 Bar</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.saying = <span class=\"string\">'wow'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里 inherit 和 method 都直接返回 this</span></span><br><span class=\"line\"><span class=\"comment\">// 所以可以采用联级</span></span><br><span class=\"line\">.inherit(Bar)</span><br><span class=\"line\">.method(<span class=\"string\">'noise'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"keyword\">this</span>.say()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>伪类模式在通过new 命令生产对象时, 会产生内存浪费. 如上面的例子, Foo 构造函数<br>就回去重复构造器 Bar 已经完成的工作.</p>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><p>在一个纯粹的原型模式中, 将摒弃类专注于对象. 基于原型的继承相比于类的<br>继承在概念上更为简单: 一个新对象可以继承一个旧对象的属性. 通过构造一个有用<br>的对象开始, 接着可以构造出更多和这个对象相似的对象.   —-&lt;JavaScript语言精粹&gt; </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先构造一个基础对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> baseObject = &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'base'</span>,</span><br><span class=\"line\">\tget_name: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接下来构造定制化的对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myObj = <span class=\"built_in\">Object</span>.create(baseObject);</span><br><span class=\"line\">myObj.name = <span class=\"string\">'wow'</span>;</span><br><span class=\"line\">myObj.saying = <span class=\"string\">'Hi'</span>;</span><br><span class=\"line\">myObj.purr = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> str = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str) &#123;</span><br><span class=\"line\">\t\t\tstr += <span class=\"string\">'hello'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstr += <span class=\"string\">'world'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一种’差异化继承’, 通过制定一个新的对象, 指明它与基本对象的不同.</p>\n<h3 id=\"函数化\"><a href=\"#函数化\" class=\"headerlink\" title=\"函数化\"></a>函数化</h3><p>以上两种继承模式都没有实现私有化, 也就是说所有的变量和方法都是公开的, 所以就<br>可以开始运用模块模式. 这个函数主要分为四个步骤:</p>\n<ol>\n<li><p>创建一个新的对象</p>\n</li>\n<li><p>定义私有属性.</p>\n</li>\n<li><p>给这个新对象扩充特权函数 (暴露接口)</p>\n</li>\n<li><p>返回这个对象</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// spec 对象包含构造器所需要的所有信息</span></span><br><span class=\"line\"><span class=\"comment\">// my 对象允许其他构造器分享他们的私有属性</span></span><br><span class=\"line\"><span class=\"comment\">// 以便在我们的构造器中使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">constructor</span> = (spec, my) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = &#123;&#125;; <span class=\"comment\">// 私有实例变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> my = my || &#123;&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 扩展共享的变量和方法</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\tthat = 一个新对象</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 给 that 添加特权方法 </span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 返回这个对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> that</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>语言精粹里的例子</p>\n</blockquote>\n<ol>\n<li><p>构造器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mammal = <span class=\"function\"><span class=\"params\">spec</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tthat.get_name = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> spec.name;</span><br><span class=\"line\">\tthat.says = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> spec.saying || <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myMammal = mammal(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'Herb'</span>&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>另一个构造器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cat = <span class=\"function\"><span class=\"params\">spec</span> =&gt;</span>&#123;</span><br><span class=\"line\">\tspec.saying = spec.saying || <span class=\"string\">'meow'</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 继承</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = mammal(spec);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tthat.purr = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> i, s = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (s) &#123;</span><br><span class=\"line\">\t\t\t\ts += <span class=\"string\">'-'</span>;\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ts += <span class=\"string\">'r'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tthat.get_name = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> that.says() + <span class=\"string\">' '</span> + spec.name + <span class=\"string\">' '</span> + that.says();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myCat = car(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'Henrietta'</span>&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"超类\"><a href=\"#超类\" class=\"headerlink\" title=\"超类\"></a>超类</h3><p>以上函数化的方式还不能够调用父类的方法并向父类方法传递参数. 以下是测试代码<br>在<code>语言精粹</code>的例子的基础上稍作改动, 便于自己理解:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mammal = <span class=\"function\"><span class=\"params\">spec</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tthat.get_name = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> spec.name;</span><br><span class=\"line\">\tthat.says = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> spec.saying || <span class=\"string\">'Hi'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myMammal = mammal(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'Cara'</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myMammal.says()) <span class=\"comment\">// 'Hi'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造器2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cat = <span class=\"function\"><span class=\"params\">spec</span> =&gt;</span> &#123;</span><br><span class=\"line\">\tspec.saying = spec.saying || <span class=\"string\">'meow'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 此时 that 已经包含: get_name 和 says 方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = mammal(spec);</span><br><span class=\"line\"></span><br><span class=\"line\">\tthat.purr = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> str = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (str) &#123;</span><br><span class=\"line\">\t\t\t\tstr += <span class=\"string\">'-'</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tstr += <span class=\"string\">'r'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tthat.get_name = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n || <span class=\"string\">\"i dont't have name\"</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myCat = cat(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'Henrietta'</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// i dont't have name</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myCat.get_name())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个时候 cat 还不能访问父类方法的能力</span></span><br><span class=\"line\"><span class=\"comment\">// 所以超类 super 还是有必要的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先扩展两个方法</span></span><br><span class=\"line\"><span class=\"comment\">// 这个方法不能用箭头函数来定义, 否则 this 指向的window</span></span><br><span class=\"line\"><span class=\"comment\">// 这里 this 需要的是被调用的对象</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.method =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, fn</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.prototype[name] = fn;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义调用父类的函数</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.method(<span class=\"string\">'superior'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">        method = that[name];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// this cat function</span></span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> method.call(that, n);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 来试试调用父类</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> coolCat = <span class=\"function\"><span class=\"params\">spec</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = cat(spec);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span>\tsuper_get_name = that.superior(<span class=\"string\">'get_name'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// n 给父类方法传参</span></span><br><span class=\"line\">\tthat.get_name = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'like '</span> + super_get_name.call(<span class=\"keyword\">this</span>, n) + <span class=\"string\">' baby'</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myCoolCat = coolCat(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'Bix'</span>, <span class=\"attr\">saying</span>: <span class=\"string\">'Hi'</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = myCoolCat.get_name(<span class=\"string\">'this cat function'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name) <span class=\"comment\">// like this cat function baby</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"最后随便提一下\"><a href=\"#最后随便提一下\" class=\"headerlink\" title=\"最后随便提一下\"></a>最后随便提一下</h4><p>箭头函数的几个使用注意点:</p>\n<ol>\n<li><p>函数体内的 <code>this</code> 对象, 就是定义时所在的对象, 而不是使用时所在的对象.</p>\n</li>\n<li><p>不可以当作构造函数, 也就是说, 不可以使用new命令, 否则会抛出一个错误.<br>因为箭头函数没有自己的 <code>this</code>, 而是继承外层函数的<code>this</code>.</p>\n</li>\n<li><p>不可以使用 <code>arguments</code> 对象, 该对象在函数体内不存在.</p>\n</li>\n<li><p>不可以使用 <code>yield</code> 命令, 因此箭头函数不能用作Generator函数.</p>\n</li>\n</ol>\n<p>Ceated on 2017-9-15 by Cara </p>\n"},{"title":" JavaScript 模块化","date":"2017-10-17T13:49:59.000Z","_content":"使用函数和闭包来构造模块. 模块是一个提供接口却隐藏状态与现实的函数或对象.\n通过模块可以摒弃全局变量的使用, 模块模式的一般形式是: 一个定义私有变量和函数的函数;\n利用闭包创建可以访问私有变量和函数的特权函数. \n------ << JavaScript语言精粹 >>\n\n```javascript\nconst serial_maker = _ => {\n\t// 私有变量\n\tlet prefix = '';\n\tlet num = 0;\n\n\treturn {\n\t\t// 特权方法\n\t\tset_prefix: str => {\n\t\t\tprefix = String(str);\n\t\t},\n\t\tset_num: n => {\n\t\t\tnum = +n;\n\t\t},\n\t\tget_sum: _ => {\n\t\t\tlet result = prefix + num;\n\t\t\tnum++;\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nlet seqer = serial_maker();\nseqer.set_prefix('Hi');\nseqer.set_num(0101);\n\nconsole.log(seqer.get_sum()) // 'Hi0101'\n```\n\n### CommonJs 与 AMD\n因为有了模块的概念, 所以我们能将很多重复性的代码封装成一个模块, 想用什么\n功能就加载什么模块, 也能更方便是使用别人的代码. 但是这样就会要求大家都用\n同样的方式封装模块, 所以就有了 CommonJs 和 AMD 来规范大家的写法.\n\n- CommonJs\nNode.js的模块就是参照 CommonJs 来实现的, 在服务器端是一定会用到模块的. CommonJs\n 是同步加载, 也就是说当引入一个模块必须等待该模块加载完成之后, 才会执行接下来的代码.\n对于服务器来说所有的模块都放在本地, 所以等待的时间很短; 但对于浏览器来说, 所有的模块\n都放在服务器, 所以等待的时间完全取决于网速, 就很容易出现假死的状态.\n\n```javascript\nvar math = require('math');\n\nmath.add(2, 3);\n```\n\n- AMD\nAMD是\"Asynchronous Module Definition\"的缩写, 意思就是\"异步模块定义\". 它就是采用异步\n加载, 因此模块的加载并不影响后面的语句执行. 将所有依赖于这个模块的语句都放在一个定义的回调\n函数中执行, 这样等待模块加载完成之后就会去执行这个回调函数.\n\n```javascript\nrequire([module], callback);\n\nrequire(['module'], module => {\n\tmodule.increment(1, 2)\n}) \n\n```\n\n### export / export default \n在JavaScript ES6中，export与export default均可用于导出常量/函数/文件/模块等,\n以便在其它文件或模块中通过import将其导入使用.\n\n- export \nexport 可以导出多个\n\n```javascript\n// types.js\nexport const foo = 'foo';\nexport const fn = n => n+1;\n\n// 在 index.html 引入\nimport {foo, fn} from 'types.js'\n```\n\n- export default\n只能导出一个\n\n```javascript\n// types.js\nexport default const foo = 'foo';\n\n// 在 index.html 引入\nimport foo from 'types.js'\n// 等价于\nimport {default as foo} from 'types.js'\n```\n\nCreated on 2017-9-15 by Cara\n","source":"_posts/JavaScript-模块化.md","raw":"---\ntitle: ' JavaScript 模块化'\ndate: 2017-10-17 21:49:59\ntags:\n- JavaScript\ncategories:\n- 笔记📒\n- 复习\n---\n使用函数和闭包来构造模块. 模块是一个提供接口却隐藏状态与现实的函数或对象.\n通过模块可以摒弃全局变量的使用, 模块模式的一般形式是: 一个定义私有变量和函数的函数;\n利用闭包创建可以访问私有变量和函数的特权函数. \n------ << JavaScript语言精粹 >>\n\n```javascript\nconst serial_maker = _ => {\n\t// 私有变量\n\tlet prefix = '';\n\tlet num = 0;\n\n\treturn {\n\t\t// 特权方法\n\t\tset_prefix: str => {\n\t\t\tprefix = String(str);\n\t\t},\n\t\tset_num: n => {\n\t\t\tnum = +n;\n\t\t},\n\t\tget_sum: _ => {\n\t\t\tlet result = prefix + num;\n\t\t\tnum++;\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nlet seqer = serial_maker();\nseqer.set_prefix('Hi');\nseqer.set_num(0101);\n\nconsole.log(seqer.get_sum()) // 'Hi0101'\n```\n\n### CommonJs 与 AMD\n因为有了模块的概念, 所以我们能将很多重复性的代码封装成一个模块, 想用什么\n功能就加载什么模块, 也能更方便是使用别人的代码. 但是这样就会要求大家都用\n同样的方式封装模块, 所以就有了 CommonJs 和 AMD 来规范大家的写法.\n\n- CommonJs\nNode.js的模块就是参照 CommonJs 来实现的, 在服务器端是一定会用到模块的. CommonJs\n 是同步加载, 也就是说当引入一个模块必须等待该模块加载完成之后, 才会执行接下来的代码.\n对于服务器来说所有的模块都放在本地, 所以等待的时间很短; 但对于浏览器来说, 所有的模块\n都放在服务器, 所以等待的时间完全取决于网速, 就很容易出现假死的状态.\n\n```javascript\nvar math = require('math');\n\nmath.add(2, 3);\n```\n\n- AMD\nAMD是\"Asynchronous Module Definition\"的缩写, 意思就是\"异步模块定义\". 它就是采用异步\n加载, 因此模块的加载并不影响后面的语句执行. 将所有依赖于这个模块的语句都放在一个定义的回调\n函数中执行, 这样等待模块加载完成之后就会去执行这个回调函数.\n\n```javascript\nrequire([module], callback);\n\nrequire(['module'], module => {\n\tmodule.increment(1, 2)\n}) \n\n```\n\n### export / export default \n在JavaScript ES6中，export与export default均可用于导出常量/函数/文件/模块等,\n以便在其它文件或模块中通过import将其导入使用.\n\n- export \nexport 可以导出多个\n\n```javascript\n// types.js\nexport const foo = 'foo';\nexport const fn = n => n+1;\n\n// 在 index.html 引入\nimport {foo, fn} from 'types.js'\n```\n\n- export default\n只能导出一个\n\n```javascript\n// types.js\nexport default const foo = 'foo';\n\n// 在 index.html 引入\nimport foo from 'types.js'\n// 等价于\nimport {default as foo} from 'types.js'\n```\n\nCreated on 2017-9-15 by Cara\n","slug":"JavaScript-模块化","published":1,"updated":"2018-05-05T09:23:03.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolsg000kklu03dfn3foi","content":"<p>使用函数和闭包来构造模块. 模块是一个提供接口却隐藏状态与现实的函数或对象.<br>通过模块可以摒弃全局变量的使用, 模块模式的一般形式是: 一个定义私有变量和函数的函数;<br>利用闭包创建可以访问私有变量和函数的特权函数.<br>—— &lt;&lt; JavaScript语言精粹 &gt;&gt;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> serial_maker = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 私有变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> prefix = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 特权方法</span></span><br><span class=\"line\">\t\tset_prefix: <span class=\"function\"><span class=\"params\">str</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\tprefix = <span class=\"built_in\">String</span>(str);</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tset_num: <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\tnum = +n;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tget_sum: <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> result = prefix + num;</span><br><span class=\"line\">\t\t\tnum++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> seqer = serial_maker();</span><br><span class=\"line\">seqer.set_prefix(<span class=\"string\">'Hi'</span>);</span><br><span class=\"line\">seqer.set_num(<span class=\"number\">0101</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(seqer.get_sum()) <span class=\"comment\">// 'Hi0101'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"CommonJs-与-AMD\"><a href=\"#CommonJs-与-AMD\" class=\"headerlink\" title=\"CommonJs 与 AMD\"></a>CommonJs 与 AMD</h3><p>因为有了模块的概念, 所以我们能将很多重复性的代码封装成一个模块, 想用什么<br>功能就加载什么模块, 也能更方便是使用别人的代码. 但是这样就会要求大家都用<br>同样的方式封装模块, 所以就有了 CommonJs 和 AMD 来规范大家的写法.</p>\n<ul>\n<li>CommonJs<br>Node.js的模块就是参照 CommonJs 来实现的, 在服务器端是一定会用到模块的. CommonJs<br>是同步加载, 也就是说当引入一个模块必须等待该模块加载完成之后, 才会执行接下来的代码.<br>对于服务器来说所有的模块都放在本地, 所以等待的时间很短; 但对于浏览器来说, 所有的模块<br>都放在服务器, 所以等待的时间完全取决于网速, 就很容易出现假死的状态.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>AMD<br>AMD是”Asynchronous Module Definition”的缩写, 意思就是”异步模块定义”. 它就是采用异步<br>加载, 因此模块的加载并不影响后面的语句执行. 将所有依赖于这个模块的语句都放在一个定义的回调<br>函数中执行, 这样等待模块加载完成之后就会去执行这个回调函数.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"built_in\">module</span>], callback);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'module'</span>], <span class=\"built_in\">module</span> =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>.increment(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"export-export-default\"><a href=\"#export-export-default\" class=\"headerlink\" title=\"export / export default\"></a>export / export default</h3><p>在JavaScript ES6中，export与export default均可用于导出常量/函数/文件/模块等,<br>以便在其它文件或模块中通过import将其导入使用.</p>\n<ul>\n<li>export<br>export 可以导出多个</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// types.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> foo = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n+<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 index.html 引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;foo, fn&#125; <span class=\"keyword\">from</span> <span class=\"string\">'types.js'</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>export default<br>只能导出一个</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// types.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">const</span> foo = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 index.html 引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'types.js'</span></span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> foo&#125; <span class=\"keyword\">from</span> <span class=\"string\">'types.js'</span></span><br></pre></td></tr></table></figure>\n<p>Created on 2017-9-15 by Cara</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用函数和闭包来构造模块. 模块是一个提供接口却隐藏状态与现实的函数或对象.<br>通过模块可以摒弃全局变量的使用, 模块模式的一般形式是: 一个定义私有变量和函数的函数;<br>利用闭包创建可以访问私有变量和函数的特权函数.<br>—— &lt;&lt; JavaScript语言精粹 &gt;&gt;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> serial_maker = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 私有变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> prefix = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 特权方法</span></span><br><span class=\"line\">\t\tset_prefix: <span class=\"function\"><span class=\"params\">str</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\tprefix = <span class=\"built_in\">String</span>(str);</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tset_num: <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\tnum = +n;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tget_sum: <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> result = prefix + num;</span><br><span class=\"line\">\t\t\tnum++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> seqer = serial_maker();</span><br><span class=\"line\">seqer.set_prefix(<span class=\"string\">'Hi'</span>);</span><br><span class=\"line\">seqer.set_num(<span class=\"number\">0101</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(seqer.get_sum()) <span class=\"comment\">// 'Hi0101'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"CommonJs-与-AMD\"><a href=\"#CommonJs-与-AMD\" class=\"headerlink\" title=\"CommonJs 与 AMD\"></a>CommonJs 与 AMD</h3><p>因为有了模块的概念, 所以我们能将很多重复性的代码封装成一个模块, 想用什么<br>功能就加载什么模块, 也能更方便是使用别人的代码. 但是这样就会要求大家都用<br>同样的方式封装模块, 所以就有了 CommonJs 和 AMD 来规范大家的写法.</p>\n<ul>\n<li>CommonJs<br>Node.js的模块就是参照 CommonJs 来实现的, 在服务器端是一定会用到模块的. CommonJs<br>是同步加载, 也就是说当引入一个模块必须等待该模块加载完成之后, 才会执行接下来的代码.<br>对于服务器来说所有的模块都放在本地, 所以等待的时间很短; 但对于浏览器来说, 所有的模块<br>都放在服务器, 所以等待的时间完全取决于网速, 就很容易出现假死的状态.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>AMD<br>AMD是”Asynchronous Module Definition”的缩写, 意思就是”异步模块定义”. 它就是采用异步<br>加载, 因此模块的加载并不影响后面的语句执行. 将所有依赖于这个模块的语句都放在一个定义的回调<br>函数中执行, 这样等待模块加载完成之后就会去执行这个回调函数.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"built_in\">module</span>], callback);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'module'</span>], <span class=\"built_in\">module</span> =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>.increment(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"export-export-default\"><a href=\"#export-export-default\" class=\"headerlink\" title=\"export / export default\"></a>export / export default</h3><p>在JavaScript ES6中，export与export default均可用于导出常量/函数/文件/模块等,<br>以便在其它文件或模块中通过import将其导入使用.</p>\n<ul>\n<li>export<br>export 可以导出多个</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// types.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> foo = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n+<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 index.html 引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;foo, fn&#125; <span class=\"keyword\">from</span> <span class=\"string\">'types.js'</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>export default<br>只能导出一个</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// types.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">const</span> foo = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 index.html 引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'types.js'</span></span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> foo&#125; <span class=\"keyword\">from</span> <span class=\"string\">'types.js'</span></span><br></pre></td></tr></table></figure>\n<p>Created on 2017-9-15 by Cara</p>\n"},{"title":"JavaScript 深浅拷贝","date":"2017-10-16T13:45:01.000Z","_content":"\n> ### 浅拷贝\n浅拷贝只能拷贝顶层属性基本数据类型, 也就是如果父对象的属性是一个对象或数组, 那么子对象获取到的只是一个内存地址而不是一个真正的对象, 所以一旦修改父对象也会跟着被篡改.\n\n```javascript\n    function shallowCopy ( parent ) {\n        let o = {};\n        for (let i in parent) {\n             o[i] = parent[i]\n        }\n        return o\n    }\n```\n\n> ### 深拷贝\n深拷贝也就是能够实现数组和对象拷贝, 深拷贝与浅拷贝对比, 深拷贝会在堆区开辟新的一块来储存新的对象. 两个对象对应的是两个不同的内存地址, 所以修改其中一个对象的属性并不会影响到另一个对象的属性. 实现深拷贝也有两种方式: 一种是递归/ 一种是JSON.\n\n1. 递归\n```javascript\n    function deepCopy (parent, child = {}) {\n        for (let i in parent) {\n            if (typeof parent[i] === 'object') {\n                child[i] = (parent[i].constructor == Array) ? [] : {};\n                deepCopy(parent[i], child[i])\n            } else {\n                 child[i] = parent[i]\n            }\n        }\n    }\n```\n\n2. JSON解析(严格的 JSON 格式)\n```javascript\n    var o = {\n        age: '18',\n        friends: ['老张', '老王'],\n        job: {\n           main: '睡觉',\n           sub: '躺着'\n        }\n    };\n    var result = JSON.parse( JSON.stringify(o));\n    result.name = 'cara';\n    result.friends.push('老李');\n    console.dir(o);\n    console.dir(result)\n```\n\n以上两种方式无法解析一下几种情况:\n- RegExp 对象\n- 函数\n- 会摒弃对象的 constructor , 所有构造函数都会指向 Object\n- 对象循环引用也会报错\n\n所以要面对不同的对象, 做不同的处理方式, 就需要检查一下对象的类型:\n\n```js\n// 检查类型\nconst Type = _ => {\n    const Types = {}\n    for (let i = 0, type; type = ['Array', 'Date', 'RegExp'][i++];) {\n        Types['is' + type] = (obj) => {\n            if (typeof obj !== 'object') return\n            return Object.prototype.toString.call(obj) === `[object ${type}]`\n        }\n    }\n    return Types\n}\nconst types = Type()\n\n// 获取正则影响范围\nconst getRegExp = (reg) => {\n    if (reg.globlal) return 'g'\n    if (reg.ignoreCase) return 'i'\n    if (reg.multiline) return 'm'\n}\n\nconst clone = (oldObj = {}) => {\n    let oldObjs = []\n\n    const _clone = oldObj => {\n        let newObj, proto\n        // 不同类型, 不同处理方式\n        if (types.isArray(oldObj)) {\n            newObj = []\n        }\n        if (types.isDate(oldObj)) {\n            newObj = new Date(oldObj.getTime())\n        }\n        if (types.isRegExp(oldObj)) {\n            newObj = new RegExp(oldObj.source, getRegExp(oldObj))\n        } else {\n            // 斩断原型链\n            proto = Object.getPrototypeOf(oldObj)\n            newObj = Object.create(proto)\n        }\n        // 如果之前已经遍历过该对象, 直接返回该对象\n        let hasBeen = oldObjs.indexOf(oldObj)\n        if (hasBeen !== -1) {\n            return oldObjs[hasBeen]\n        }\n        // 记录操作过的对象\n        oldObjs.push(oldObj)\n        // 递归\n        for (let i in oldObj) {\n            newObj[i] = _clone(oldObj[i])\n        }\n        return newObj\n    }\n    return _clone(oldObj)\n}\n```\n\n👇测试一波:\n```js\n// 测试\nfunction person(name) {\n    this.name = name;\n}\nconst Cara = new person('Cara');\n\nfunction say() {\n    console.log('hello world!');\n}\n\nconst oldObj = {\n    a: say,\n    c: new RegExp('ab+c', 'i'),\n    d: Cara,\n};\noldObj.b = oldObj;\n\n\nconst newObj = clone(oldObj)\n\nconsole.log(newObj.a, oldObj.a) \n// [Function: say] [Function: say]\nconsole.log(newObj.b, oldObj.b)\n// { \n//     a: [Function: say], \n//     c: /ab+c/i, \n//     d: person { name: 'Messi' }, \n//     b: [Circular] \n// } \n// { \n//     a: [Function: say], \n//     c: /ab+c/i, \n//     d: person { name: 'Messi' }, \n//     b: [Circular] \n// }\nconsole.log(newObj.c, oldObj.c)\n// /ab+c/i /ab+c/i\nconsole.log(newObj.d.constructor, oldObj.d.constructor)\n// [Function: person][Function: person] \n```\n目前我们上面说的几种坑就得以解决, 不过这还不是最完整的方案, 还有一些 ES6 里面的对象也需要我们做特殊的处理, 不过现在这个版本在日常还是够用了. 另外在生产环境中还是建议用 `lodash` 的 `_.cloneDeep`\n\nCreated on 2017-8-15 by cara","source":"_posts/JavaScript-深浅拷贝.md","raw":"---\ntitle: JavaScript 深浅拷贝\ndate: 2017-10-16 21:45:01\ntags:\n- JavaScript\ncategories:\n- 笔记📒\n---\n\n> ### 浅拷贝\n浅拷贝只能拷贝顶层属性基本数据类型, 也就是如果父对象的属性是一个对象或数组, 那么子对象获取到的只是一个内存地址而不是一个真正的对象, 所以一旦修改父对象也会跟着被篡改.\n\n```javascript\n    function shallowCopy ( parent ) {\n        let o = {};\n        for (let i in parent) {\n             o[i] = parent[i]\n        }\n        return o\n    }\n```\n\n> ### 深拷贝\n深拷贝也就是能够实现数组和对象拷贝, 深拷贝与浅拷贝对比, 深拷贝会在堆区开辟新的一块来储存新的对象. 两个对象对应的是两个不同的内存地址, 所以修改其中一个对象的属性并不会影响到另一个对象的属性. 实现深拷贝也有两种方式: 一种是递归/ 一种是JSON.\n\n1. 递归\n```javascript\n    function deepCopy (parent, child = {}) {\n        for (let i in parent) {\n            if (typeof parent[i] === 'object') {\n                child[i] = (parent[i].constructor == Array) ? [] : {};\n                deepCopy(parent[i], child[i])\n            } else {\n                 child[i] = parent[i]\n            }\n        }\n    }\n```\n\n2. JSON解析(严格的 JSON 格式)\n```javascript\n    var o = {\n        age: '18',\n        friends: ['老张', '老王'],\n        job: {\n           main: '睡觉',\n           sub: '躺着'\n        }\n    };\n    var result = JSON.parse( JSON.stringify(o));\n    result.name = 'cara';\n    result.friends.push('老李');\n    console.dir(o);\n    console.dir(result)\n```\n\n以上两种方式无法解析一下几种情况:\n- RegExp 对象\n- 函数\n- 会摒弃对象的 constructor , 所有构造函数都会指向 Object\n- 对象循环引用也会报错\n\n所以要面对不同的对象, 做不同的处理方式, 就需要检查一下对象的类型:\n\n```js\n// 检查类型\nconst Type = _ => {\n    const Types = {}\n    for (let i = 0, type; type = ['Array', 'Date', 'RegExp'][i++];) {\n        Types['is' + type] = (obj) => {\n            if (typeof obj !== 'object') return\n            return Object.prototype.toString.call(obj) === `[object ${type}]`\n        }\n    }\n    return Types\n}\nconst types = Type()\n\n// 获取正则影响范围\nconst getRegExp = (reg) => {\n    if (reg.globlal) return 'g'\n    if (reg.ignoreCase) return 'i'\n    if (reg.multiline) return 'm'\n}\n\nconst clone = (oldObj = {}) => {\n    let oldObjs = []\n\n    const _clone = oldObj => {\n        let newObj, proto\n        // 不同类型, 不同处理方式\n        if (types.isArray(oldObj)) {\n            newObj = []\n        }\n        if (types.isDate(oldObj)) {\n            newObj = new Date(oldObj.getTime())\n        }\n        if (types.isRegExp(oldObj)) {\n            newObj = new RegExp(oldObj.source, getRegExp(oldObj))\n        } else {\n            // 斩断原型链\n            proto = Object.getPrototypeOf(oldObj)\n            newObj = Object.create(proto)\n        }\n        // 如果之前已经遍历过该对象, 直接返回该对象\n        let hasBeen = oldObjs.indexOf(oldObj)\n        if (hasBeen !== -1) {\n            return oldObjs[hasBeen]\n        }\n        // 记录操作过的对象\n        oldObjs.push(oldObj)\n        // 递归\n        for (let i in oldObj) {\n            newObj[i] = _clone(oldObj[i])\n        }\n        return newObj\n    }\n    return _clone(oldObj)\n}\n```\n\n👇测试一波:\n```js\n// 测试\nfunction person(name) {\n    this.name = name;\n}\nconst Cara = new person('Cara');\n\nfunction say() {\n    console.log('hello world!');\n}\n\nconst oldObj = {\n    a: say,\n    c: new RegExp('ab+c', 'i'),\n    d: Cara,\n};\noldObj.b = oldObj;\n\n\nconst newObj = clone(oldObj)\n\nconsole.log(newObj.a, oldObj.a) \n// [Function: say] [Function: say]\nconsole.log(newObj.b, oldObj.b)\n// { \n//     a: [Function: say], \n//     c: /ab+c/i, \n//     d: person { name: 'Messi' }, \n//     b: [Circular] \n// } \n// { \n//     a: [Function: say], \n//     c: /ab+c/i, \n//     d: person { name: 'Messi' }, \n//     b: [Circular] \n// }\nconsole.log(newObj.c, oldObj.c)\n// /ab+c/i /ab+c/i\nconsole.log(newObj.d.constructor, oldObj.d.constructor)\n// [Function: person][Function: person] \n```\n目前我们上面说的几种坑就得以解决, 不过这还不是最完整的方案, 还有一些 ES6 里面的对象也需要我们做特殊的处理, 不过现在这个版本在日常还是够用了. 另外在生产环境中还是建议用 `lodash` 的 `_.cloneDeep`\n\nCreated on 2017-8-15 by cara","slug":"JavaScript-深浅拷贝","published":1,"updated":"2018-05-05T09:23:03.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolsj000pklu0tofsng0m","content":"<blockquote>\n<h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><p>浅拷贝只能拷贝顶层属性基本数据类型, 也就是如果父对象的属性是一个对象或数组, 那么子对象获取到的只是一个内存地址而不是一个真正的对象, 所以一旦修改父对象也会跟着被篡改.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopy</span> (<span class=\"params\"> parent </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> o = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> parent) &#123;</span><br><span class=\"line\">         o[i] = parent[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><p>深拷贝也就是能够实现数组和对象拷贝, 深拷贝与浅拷贝对比, 深拷贝会在堆区开辟新的一块来储存新的对象. 两个对象对应的是两个不同的内存地址, 所以修改其中一个对象的属性并不会影响到另一个对象的属性. 实现深拷贝也有两种方式: 一种是递归/ 一种是JSON.</p>\n</blockquote>\n<ol>\n<li><p>递归</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span> (<span class=\"params\">parent, child = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> parent) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> parent[i] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">            child[i] = (parent[i].constructor == <span class=\"built_in\">Array</span>) ? [] : &#123;&#125;;</span><br><span class=\"line\">            deepCopy(parent[i], child[i])</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">             child[i] = parent[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>JSON解析(严格的 JSON 格式)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    age: <span class=\"string\">'18'</span>,</span><br><span class=\"line\">    friends: [<span class=\"string\">'老张'</span>, <span class=\"string\">'老王'</span>],</span><br><span class=\"line\">    job: &#123;</span><br><span class=\"line\">       main: <span class=\"string\">'睡觉'</span>,</span><br><span class=\"line\">       sub: <span class=\"string\">'躺着'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"built_in\">JSON</span>.parse( <span class=\"built_in\">JSON</span>.stringify(o));</span><br><span class=\"line\">result.name = <span class=\"string\">'cara'</span>;</span><br><span class=\"line\">result.friends.push(<span class=\"string\">'老李'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(o);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(result)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>以上两种方式无法解析一下几种情况:</p>\n<ul>\n<li>RegExp 对象</li>\n<li>函数</li>\n<li>会摒弃对象的 constructor , 所有构造函数都会指向 Object</li>\n<li>对象循环引用也会报错</li>\n</ul>\n<p>所以要面对不同的对象, 做不同的处理方式, 就需要检查一下对象的类型:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Type = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> Types = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, type; type = [<span class=\"string\">'Array'</span>, <span class=\"string\">'Date'</span>, <span class=\"string\">'RegExp'</span>][i++];) &#123;</span><br><span class=\"line\">        Types[<span class=\"string\">'is'</span> + type] = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">`[object <span class=\"subst\">$&#123;type&#125;</span>]`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Types</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> types = Type()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取正则影响范围</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getRegExp = <span class=\"function\">(<span class=\"params\">reg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reg.globlal) <span class=\"keyword\">return</span> <span class=\"string\">'g'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reg.ignoreCase) <span class=\"keyword\">return</span> <span class=\"string\">'i'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reg.multiline) <span class=\"keyword\">return</span> <span class=\"string\">'m'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> clone = <span class=\"function\">(<span class=\"params\">oldObj = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldObjs = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> _clone = <span class=\"function\"><span class=\"params\">oldObj</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newObj, proto</span><br><span class=\"line\">        <span class=\"comment\">// 不同类型, 不同处理方式</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (types.isArray(oldObj)) &#123;</span><br><span class=\"line\">            newObj = []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (types.isDate(oldObj)) &#123;</span><br><span class=\"line\">            newObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(oldObj.getTime())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (types.isRegExp(oldObj)) &#123;</span><br><span class=\"line\">            newObj = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(oldObj.source, getRegExp(oldObj))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 斩断原型链</span></span><br><span class=\"line\">            proto = <span class=\"built_in\">Object</span>.getPrototypeOf(oldObj)</span><br><span class=\"line\">            newObj = <span class=\"built_in\">Object</span>.create(proto)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果之前已经遍历过该对象, 直接返回该对象</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> hasBeen = oldObjs.indexOf(oldObj)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasBeen !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldObjs[hasBeen]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 记录操作过的对象</span></span><br><span class=\"line\">        oldObjs.push(oldObj)</span><br><span class=\"line\">        <span class=\"comment\">// 递归</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> oldObj) &#123;</span><br><span class=\"line\">            newObj[i] = _clone(oldObj[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _clone(oldObj)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>👇测试一波:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Cara = <span class=\"keyword\">new</span> person(<span class=\"string\">'Cara'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world!'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> oldObj = &#123;</span><br><span class=\"line\">    a: say,</span><br><span class=\"line\">    c: <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'ab+c'</span>, <span class=\"string\">'i'</span>),</span><br><span class=\"line\">    d: Cara,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">oldObj.b = oldObj;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newObj = clone(oldObj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.a, oldObj.a) </span><br><span class=\"line\"><span class=\"comment\">// [Function: say] [Function: say]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.b, oldObj.b)</span><br><span class=\"line\"><span class=\"comment\">// &#123; </span></span><br><span class=\"line\"><span class=\"comment\">//     a: [Function: say], </span></span><br><span class=\"line\"><span class=\"comment\">//     c: /ab+c/i, </span></span><br><span class=\"line\"><span class=\"comment\">//     d: person &#123; name: 'Messi' &#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//     b: [Circular] </span></span><br><span class=\"line\"><span class=\"comment\">// &#125; </span></span><br><span class=\"line\"><span class=\"comment\">// &#123; </span></span><br><span class=\"line\"><span class=\"comment\">//     a: [Function: say], </span></span><br><span class=\"line\"><span class=\"comment\">//     c: /ab+c/i, </span></span><br><span class=\"line\"><span class=\"comment\">//     d: person &#123; name: 'Messi' &#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//     b: [Circular] </span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.c, oldObj.c)</span><br><span class=\"line\"><span class=\"comment\">// /ab+c/i /ab+c/i</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.d.constructor, oldObj.d.constructor)</span><br><span class=\"line\"><span class=\"comment\">// [Function: person][Function: person]</span></span><br></pre></td></tr></table></figure></p>\n<p>目前我们上面说的几种坑就得以解决, 不过这还不是最完整的方案, 还有一些 ES6 里面的对象也需要我们做特殊的处理, 不过现在这个版本在日常还是够用了. 另外在生产环境中还是建议用 <code>lodash</code> 的 <code>_.cloneDeep</code></p>\n<p>Created on 2017-8-15 by cara</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><p>浅拷贝只能拷贝顶层属性基本数据类型, 也就是如果父对象的属性是一个对象或数组, 那么子对象获取到的只是一个内存地址而不是一个真正的对象, 所以一旦修改父对象也会跟着被篡改.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopy</span> (<span class=\"params\"> parent </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> o = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> parent) &#123;</span><br><span class=\"line\">         o[i] = parent[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><p>深拷贝也就是能够实现数组和对象拷贝, 深拷贝与浅拷贝对比, 深拷贝会在堆区开辟新的一块来储存新的对象. 两个对象对应的是两个不同的内存地址, 所以修改其中一个对象的属性并不会影响到另一个对象的属性. 实现深拷贝也有两种方式: 一种是递归/ 一种是JSON.</p>\n</blockquote>\n<ol>\n<li><p>递归</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span> (<span class=\"params\">parent, child = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> parent) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> parent[i] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">            child[i] = (parent[i].constructor == <span class=\"built_in\">Array</span>) ? [] : &#123;&#125;;</span><br><span class=\"line\">            deepCopy(parent[i], child[i])</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">             child[i] = parent[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>JSON解析(严格的 JSON 格式)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    age: <span class=\"string\">'18'</span>,</span><br><span class=\"line\">    friends: [<span class=\"string\">'老张'</span>, <span class=\"string\">'老王'</span>],</span><br><span class=\"line\">    job: &#123;</span><br><span class=\"line\">       main: <span class=\"string\">'睡觉'</span>,</span><br><span class=\"line\">       sub: <span class=\"string\">'躺着'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"built_in\">JSON</span>.parse( <span class=\"built_in\">JSON</span>.stringify(o));</span><br><span class=\"line\">result.name = <span class=\"string\">'cara'</span>;</span><br><span class=\"line\">result.friends.push(<span class=\"string\">'老李'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(o);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(result)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>以上两种方式无法解析一下几种情况:</p>\n<ul>\n<li>RegExp 对象</li>\n<li>函数</li>\n<li>会摒弃对象的 constructor , 所有构造函数都会指向 Object</li>\n<li>对象循环引用也会报错</li>\n</ul>\n<p>所以要面对不同的对象, 做不同的处理方式, 就需要检查一下对象的类型:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Type = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> Types = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, type; type = [<span class=\"string\">'Array'</span>, <span class=\"string\">'Date'</span>, <span class=\"string\">'RegExp'</span>][i++];) &#123;</span><br><span class=\"line\">        Types[<span class=\"string\">'is'</span> + type] = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">`[object <span class=\"subst\">$&#123;type&#125;</span>]`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Types</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> types = Type()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取正则影响范围</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getRegExp = <span class=\"function\">(<span class=\"params\">reg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reg.globlal) <span class=\"keyword\">return</span> <span class=\"string\">'g'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reg.ignoreCase) <span class=\"keyword\">return</span> <span class=\"string\">'i'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reg.multiline) <span class=\"keyword\">return</span> <span class=\"string\">'m'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> clone = <span class=\"function\">(<span class=\"params\">oldObj = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldObjs = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> _clone = <span class=\"function\"><span class=\"params\">oldObj</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newObj, proto</span><br><span class=\"line\">        <span class=\"comment\">// 不同类型, 不同处理方式</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (types.isArray(oldObj)) &#123;</span><br><span class=\"line\">            newObj = []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (types.isDate(oldObj)) &#123;</span><br><span class=\"line\">            newObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(oldObj.getTime())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (types.isRegExp(oldObj)) &#123;</span><br><span class=\"line\">            newObj = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(oldObj.source, getRegExp(oldObj))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 斩断原型链</span></span><br><span class=\"line\">            proto = <span class=\"built_in\">Object</span>.getPrototypeOf(oldObj)</span><br><span class=\"line\">            newObj = <span class=\"built_in\">Object</span>.create(proto)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果之前已经遍历过该对象, 直接返回该对象</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> hasBeen = oldObjs.indexOf(oldObj)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasBeen !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldObjs[hasBeen]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 记录操作过的对象</span></span><br><span class=\"line\">        oldObjs.push(oldObj)</span><br><span class=\"line\">        <span class=\"comment\">// 递归</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> oldObj) &#123;</span><br><span class=\"line\">            newObj[i] = _clone(oldObj[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _clone(oldObj)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>👇测试一波:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Cara = <span class=\"keyword\">new</span> person(<span class=\"string\">'Cara'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world!'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> oldObj = &#123;</span><br><span class=\"line\">    a: say,</span><br><span class=\"line\">    c: <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'ab+c'</span>, <span class=\"string\">'i'</span>),</span><br><span class=\"line\">    d: Cara,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">oldObj.b = oldObj;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newObj = clone(oldObj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.a, oldObj.a) </span><br><span class=\"line\"><span class=\"comment\">// [Function: say] [Function: say]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.b, oldObj.b)</span><br><span class=\"line\"><span class=\"comment\">// &#123; </span></span><br><span class=\"line\"><span class=\"comment\">//     a: [Function: say], </span></span><br><span class=\"line\"><span class=\"comment\">//     c: /ab+c/i, </span></span><br><span class=\"line\"><span class=\"comment\">//     d: person &#123; name: 'Messi' &#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//     b: [Circular] </span></span><br><span class=\"line\"><span class=\"comment\">// &#125; </span></span><br><span class=\"line\"><span class=\"comment\">// &#123; </span></span><br><span class=\"line\"><span class=\"comment\">//     a: [Function: say], </span></span><br><span class=\"line\"><span class=\"comment\">//     c: /ab+c/i, </span></span><br><span class=\"line\"><span class=\"comment\">//     d: person &#123; name: 'Messi' &#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//     b: [Circular] </span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.c, oldObj.c)</span><br><span class=\"line\"><span class=\"comment\">// /ab+c/i /ab+c/i</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.d.constructor, oldObj.d.constructor)</span><br><span class=\"line\"><span class=\"comment\">// [Function: person][Function: person]</span></span><br></pre></td></tr></table></figure></p>\n<p>目前我们上面说的几种坑就得以解决, 不过这还不是最完整的方案, 还有一些 ES6 里面的对象也需要我们做特殊的处理, 不过现在这个版本在日常还是够用了. 另外在生产环境中还是建议用 <code>lodash</code> 的 <code>_.cloneDeep</code></p>\n<p>Created on 2017-8-15 by cara</p>\n"},{"title":"Quick Sort","date":"2017-10-17T13:42:33.000Z","_content":"\n快速排序的实现, 参考资料[阮一峰](http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html)\n\n> ## 思路\n快排法的思想， 分为以下三步\n1.  在数据集中， 选择任意一个数据作为参照物（一般取中间位置的元素）。\n2. 所有小于参照物的元素都放在左边，大于参照物的元素都放在右边。\n3. 对左右两边的子集递归， 至到排序完成。\n\n## 例子\n- 非原地快速排序\n```javascript\nvar array = [11, 65, 23, 108, 99, 11, 55, 11, 33, 100, 108, 100];\n\nconsole.time('快排');\nconst quickSort = array => {\n    // 数组只剩一个元素时停止\n    if (array.length <= 1) return array;\n    // 取参照物\n    let pivotIndex = Math.floor(array.length / 2),\n        // 这里用splice删除参照物避免重复循环\n        pivot = array.splice(pivotIndex, 1),\n        leftArr = [],\n        rightArr = [];\n    // 分区\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] < pivot) {\n            leftArr.push(array[i]);\n        } else {\n            rightArr.push(array[i]);\n        }\n    }\n    return quickSort(leftArr).concat(pivot, quickSort(rightArr));\n}\nconsole.log(quickSort(array)); // [ 11, 11, 11, 23, 33, 55, 65, 99, 100, 100, 108, 108 ]\n\nconsole.timeEnd('快排'); // 4ms 左右\n```\n- 原地快速排序\n```javascript\nconsole.time('快排2');\n// 互换\nconst swap = (items, firstIndex, secondIndex) => {\n    let temp = items[firstIndex];\n    items[firstIndex] = items[secondIndex];\n    items[secondIndex] = temp;\n}\n// 分区\nconst partition = (items, left, right) => {\n    let pivot = items[Math.floor((right + left) / 2)],\n        i = left,\n        j = right;\n\n    while (i <= j) {\n        while (items[i] < pivot) {\n            i++;\n        }\n        while (items[j] > pivot) {\n            j--;\n        }\n        if (i <= j) {   \n            swap(items, i, j);\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n// 排序\nconst quickSortTwo = (items, left, right) => {\n    let index;\n    if (items.length > 1) {\n        left = typeof left != \"number\" ? 0 : left;\n        right = typeof right != \"number\" ? items.length - 1 : right;\n\n        index = partition(items, left, right);\n\n        if (left < index - 1) {\n            quickSortTwo(items, left, index - 1);\n        }\n\n        if (index < right) {\n            quickSortTwo(items, index, right);\n        }\n    }\n    return items;\n}\n\nconsole.log(quickSortTwo(array));\nconsole.timeEnd('快排2');\n```\n\n- 原生sort\n```javascript\nconsole.time('原生');\narray.sort((a, b) => {\n    if (a > b) return 1\n    else if (a < b) return -1\n    else return 0\n});\nconsole.log(array);\n// 5ms 左右\nconsole.timeEnd('原生')\n```\n三种方法， 当数组达到1W时差距就比较大了，原生需要17ms左右，原地快排需要13ms左右，而非原地快排则需要88ms左右。\n\nCreated on 2017-9-7 by Cara","source":"_posts/Quick-Sort.md","raw":"---\ntitle: Quick Sort\ndate: 2017-10-17 21:42:33\ntags:\n- JavaScript\ncategories:\n- 笔记📒\n---\n\n快速排序的实现, 参考资料[阮一峰](http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html)\n\n> ## 思路\n快排法的思想， 分为以下三步\n1.  在数据集中， 选择任意一个数据作为参照物（一般取中间位置的元素）。\n2. 所有小于参照物的元素都放在左边，大于参照物的元素都放在右边。\n3. 对左右两边的子集递归， 至到排序完成。\n\n## 例子\n- 非原地快速排序\n```javascript\nvar array = [11, 65, 23, 108, 99, 11, 55, 11, 33, 100, 108, 100];\n\nconsole.time('快排');\nconst quickSort = array => {\n    // 数组只剩一个元素时停止\n    if (array.length <= 1) return array;\n    // 取参照物\n    let pivotIndex = Math.floor(array.length / 2),\n        // 这里用splice删除参照物避免重复循环\n        pivot = array.splice(pivotIndex, 1),\n        leftArr = [],\n        rightArr = [];\n    // 分区\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] < pivot) {\n            leftArr.push(array[i]);\n        } else {\n            rightArr.push(array[i]);\n        }\n    }\n    return quickSort(leftArr).concat(pivot, quickSort(rightArr));\n}\nconsole.log(quickSort(array)); // [ 11, 11, 11, 23, 33, 55, 65, 99, 100, 100, 108, 108 ]\n\nconsole.timeEnd('快排'); // 4ms 左右\n```\n- 原地快速排序\n```javascript\nconsole.time('快排2');\n// 互换\nconst swap = (items, firstIndex, secondIndex) => {\n    let temp = items[firstIndex];\n    items[firstIndex] = items[secondIndex];\n    items[secondIndex] = temp;\n}\n// 分区\nconst partition = (items, left, right) => {\n    let pivot = items[Math.floor((right + left) / 2)],\n        i = left,\n        j = right;\n\n    while (i <= j) {\n        while (items[i] < pivot) {\n            i++;\n        }\n        while (items[j] > pivot) {\n            j--;\n        }\n        if (i <= j) {   \n            swap(items, i, j);\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n// 排序\nconst quickSortTwo = (items, left, right) => {\n    let index;\n    if (items.length > 1) {\n        left = typeof left != \"number\" ? 0 : left;\n        right = typeof right != \"number\" ? items.length - 1 : right;\n\n        index = partition(items, left, right);\n\n        if (left < index - 1) {\n            quickSortTwo(items, left, index - 1);\n        }\n\n        if (index < right) {\n            quickSortTwo(items, index, right);\n        }\n    }\n    return items;\n}\n\nconsole.log(quickSortTwo(array));\nconsole.timeEnd('快排2');\n```\n\n- 原生sort\n```javascript\nconsole.time('原生');\narray.sort((a, b) => {\n    if (a > b) return 1\n    else if (a < b) return -1\n    else return 0\n});\nconsole.log(array);\n// 5ms 左右\nconsole.timeEnd('原生')\n```\n三种方法， 当数组达到1W时差距就比较大了，原生需要17ms左右，原地快排需要13ms左右，而非原地快排则需要88ms左右。\n\nCreated on 2017-9-7 by Cara","slug":"Quick-Sort","published":1,"updated":"2018-05-05T09:23:03.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolsk000rklu0nd1xop63","content":"<p>快速排序的实现, 参考资料<a href=\"http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html\" target=\"_blank\" rel=\"noopener\">阮一峰</a></p>\n<blockquote>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>快排法的思想， 分为以下三步</p>\n<ol>\n<li>在数据集中， 选择任意一个数据作为参照物（一般取中间位置的元素）。</li>\n<li>所有小于参照物的元素都放在左边，大于参照物的元素都放在右边。</li>\n<li>对左右两边的子集递归， 至到排序完成。</li>\n</ol>\n</blockquote>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><ul>\n<li><p>非原地快速排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">11</span>, <span class=\"number\">65</span>, <span class=\"number\">23</span>, <span class=\"number\">108</span>, <span class=\"number\">99</span>, <span class=\"number\">11</span>, <span class=\"number\">55</span>, <span class=\"number\">11</span>, <span class=\"number\">33</span>, <span class=\"number\">100</span>, <span class=\"number\">108</span>, <span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'快排'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> quickSort = <span class=\"function\"><span class=\"params\">array</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组只剩一个元素时停止</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    <span class=\"comment\">// 取参照物</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivotIndex = <span class=\"built_in\">Math</span>.floor(array.length / <span class=\"number\">2</span>),</span><br><span class=\"line\">        <span class=\"comment\">// 这里用splice删除参照物避免重复循环</span></span><br><span class=\"line\">        pivot = array.splice(pivotIndex, <span class=\"number\">1</span>),</span><br><span class=\"line\">        leftArr = [],</span><br><span class=\"line\">        rightArr = [];</span><br><span class=\"line\">    <span class=\"comment\">// 分区</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[i] &lt; pivot) &#123;</span><br><span class=\"line\">            leftArr.push(array[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            rightArr.push(array[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort(leftArr).concat(pivot, quickSort(rightArr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(quickSort(array)); <span class=\"comment\">// [ 11, 11, 11, 23, 33, 55, 65, 99, 100, 100, 108, 108 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'快排'</span>); <span class=\"comment\">// 4ms 左右</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原地快速排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'快排2'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 互换</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> swap = <span class=\"function\">(<span class=\"params\">items, firstIndex, secondIndex</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = items[firstIndex];</span><br><span class=\"line\">    items[firstIndex] = items[secondIndex];</span><br><span class=\"line\">    items[secondIndex] = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 分区</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> partition = <span class=\"function\">(<span class=\"params\">items, left, right</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivot = items[<span class=\"built_in\">Math</span>.floor((right + left) / <span class=\"number\">2</span>)],</span><br><span class=\"line\">        i = left,</span><br><span class=\"line\">        j = right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (items[i] &lt; pivot) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (items[j] &gt; pivot) &#123;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt;= j) &#123;   </span><br><span class=\"line\">            swap(items, i, j);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 排序</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> quickSortTwo = <span class=\"function\">(<span class=\"params\">items, left, right</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (items.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        left = <span class=\"keyword\">typeof</span> left != <span class=\"string\">\"number\"</span> ? <span class=\"number\">0</span> : left;</span><br><span class=\"line\">        right = <span class=\"keyword\">typeof</span> right != <span class=\"string\">\"number\"</span> ? items.length - <span class=\"number\">1</span> : right;</span><br><span class=\"line\"></span><br><span class=\"line\">        index = partition(items, left, right);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; index - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            quickSortTwo(items, left, index - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; right) &#123;</span><br><span class=\"line\">            quickSortTwo(items, index, right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(quickSortTwo(array));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'快排2'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生sort</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'原生'</span>);</span><br><span class=\"line\">array.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &gt; b) <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a &lt; b) <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);</span><br><span class=\"line\"><span class=\"comment\">// 5ms 左右</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'原生'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>三种方法， 当数组达到1W时差距就比较大了，原生需要17ms左右，原地快排需要13ms左右，而非原地快排则需要88ms左右。</p>\n<p>Created on 2017-9-7 by Cara</p>\n","site":{"data":{}},"excerpt":"","more":"<p>快速排序的实现, 参考资料<a href=\"http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html\" target=\"_blank\" rel=\"noopener\">阮一峰</a></p>\n<blockquote>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>快排法的思想， 分为以下三步</p>\n<ol>\n<li>在数据集中， 选择任意一个数据作为参照物（一般取中间位置的元素）。</li>\n<li>所有小于参照物的元素都放在左边，大于参照物的元素都放在右边。</li>\n<li>对左右两边的子集递归， 至到排序完成。</li>\n</ol>\n</blockquote>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><ul>\n<li><p>非原地快速排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">11</span>, <span class=\"number\">65</span>, <span class=\"number\">23</span>, <span class=\"number\">108</span>, <span class=\"number\">99</span>, <span class=\"number\">11</span>, <span class=\"number\">55</span>, <span class=\"number\">11</span>, <span class=\"number\">33</span>, <span class=\"number\">100</span>, <span class=\"number\">108</span>, <span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'快排'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> quickSort = <span class=\"function\"><span class=\"params\">array</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组只剩一个元素时停止</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    <span class=\"comment\">// 取参照物</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivotIndex = <span class=\"built_in\">Math</span>.floor(array.length / <span class=\"number\">2</span>),</span><br><span class=\"line\">        <span class=\"comment\">// 这里用splice删除参照物避免重复循环</span></span><br><span class=\"line\">        pivot = array.splice(pivotIndex, <span class=\"number\">1</span>),</span><br><span class=\"line\">        leftArr = [],</span><br><span class=\"line\">        rightArr = [];</span><br><span class=\"line\">    <span class=\"comment\">// 分区</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[i] &lt; pivot) &#123;</span><br><span class=\"line\">            leftArr.push(array[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            rightArr.push(array[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort(leftArr).concat(pivot, quickSort(rightArr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(quickSort(array)); <span class=\"comment\">// [ 11, 11, 11, 23, 33, 55, 65, 99, 100, 100, 108, 108 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'快排'</span>); <span class=\"comment\">// 4ms 左右</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原地快速排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'快排2'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 互换</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> swap = <span class=\"function\">(<span class=\"params\">items, firstIndex, secondIndex</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = items[firstIndex];</span><br><span class=\"line\">    items[firstIndex] = items[secondIndex];</span><br><span class=\"line\">    items[secondIndex] = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 分区</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> partition = <span class=\"function\">(<span class=\"params\">items, left, right</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivot = items[<span class=\"built_in\">Math</span>.floor((right + left) / <span class=\"number\">2</span>)],</span><br><span class=\"line\">        i = left,</span><br><span class=\"line\">        j = right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (items[i] &lt; pivot) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (items[j] &gt; pivot) &#123;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt;= j) &#123;   </span><br><span class=\"line\">            swap(items, i, j);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 排序</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> quickSortTwo = <span class=\"function\">(<span class=\"params\">items, left, right</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (items.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        left = <span class=\"keyword\">typeof</span> left != <span class=\"string\">\"number\"</span> ? <span class=\"number\">0</span> : left;</span><br><span class=\"line\">        right = <span class=\"keyword\">typeof</span> right != <span class=\"string\">\"number\"</span> ? items.length - <span class=\"number\">1</span> : right;</span><br><span class=\"line\"></span><br><span class=\"line\">        index = partition(items, left, right);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; index - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            quickSortTwo(items, left, index - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; right) &#123;</span><br><span class=\"line\">            quickSortTwo(items, index, right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(quickSortTwo(array));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'快排2'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原生sort</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'原生'</span>);</span><br><span class=\"line\">array.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &gt; b) <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a &lt; b) <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);</span><br><span class=\"line\"><span class=\"comment\">// 5ms 左右</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'原生'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>三种方法， 当数组达到1W时差距就比较大了，原生需要17ms左右，原地快排需要13ms左右，而非原地快排则需要88ms左右。</p>\n<p>Created on 2017-9-7 by Cara</p>\n"},{"title":"Promise 分析及实现","date":"2018-01-04T11:07:22.000Z","_content":"Promise 是 ES6中中收录的异步操作封装, 通常在回调/ 事件/ 消息等异步操作中有显著的优势, 让我们在更方便的操作异步也让代码更加清晰.包括 ES7中的 Async/Await 也是对异步操作的封装, 不过 Async 更像是 Generator 的语法糖.\n\n### 基础实现\n学习[剖析 Promise 之基础篇](https://tech.meituan.com/promise-insight.html)用一个最常见的应用来剖析 `Promise`, 通过异步获取用户 Id, 然后作一些处理. 平常我们最常用的是回调的方式来处理, 下面用 `Promise` 的方式来处理.\n```javascript\nconst getUserId = _ => {\n    new Promise((resolve, reject) => {\n        axios.get('http://example.com/api', params: param).then(res => {\n            resolve(JSON.parse(res).id)\n        })\n    })\n}\ngetUserId().then(id => {\n    console.log(id)\n    // do something...\n})\n```\ngetUserId 函数返回一个 `Promise`, 在他的 `then` 方法中放入异步操作成功之后的回调函数. 这种方式明显比我们之前常用的回调函数更加方便而且易读, 也更加容易避免 callback hell.\n\n那么满足这样的场景的`Promise`是怎样实现的呢, 下面我们可以简单的实现一下最基础的`Promise`:\n```javascript\nfunction Promise (fn) {\n    let value = null\n    let deferreds = []\n    \n    // 4. 存入异步成功需要的回调函数\n    // 此时指向两个回调函数 id => {}\n    this.then = function (onFulfilled) {\n        deferreds.push(onFulfilled)\n        return this\n    }\n    \n    // 3. 执行 deferreds 队列中的回调函数\n    // 此时 value 为123\n    function resolve (value) {\n        deferreds.map(deferred => {\n            deferred(value)\n        })\n    }\n    \n    // 1. 执行创建 Promise 实例时传入的函数\n    // 并传入 resolve 供在适当时触发回调\n    fn(resolve)\n}\n\nconst getUserId = _ => {\n    return new Promise(resolve => {\n        // 2. 执行 resolve\n        resolve(123)\n    })\n}\ngetUserId().then( id => {\n    console.log('this is callback!')\n    console.log(id) // 123\n}).then(id => {\n    console.log('this is second callback!')\n    console.log(id) // 123\n})\n```\n - 调用 `then` 方法将回调函数存入 deferreds 队列.\n - 创建 `Promise` 实例时传入函数和 `resolve`, `resolve` 用于在适当的时间触发回调函数.\n - 真正执行回调函数的是 `deferreds` 队列中的元素.\n - `resolve` 函数接受一个参数, 用于回调函数使用, 即异步操作的返回结果.\n\n可能大家已经发现, 以上代码并不能真正执行到回调函数.根据上面标注的序号就是代码的执行顺序, 这是因为现在还是同步函数, `Promise` 函数中的 `resolve` 函数会先于 `this.then` 函数执行,此时 `deferreds` 队列中还是空的, 以至于后面的回调函数也无法执行. 所以我们要保证回调以异步的方式执行, 以保证执行顺序. 可以通过 `setTimeout` 将 `resolve` 中的回调函数放在执行栈的末尾.\n```javascript\nfunction resolve (value) {\n    // 将执行的回调的逻辑放入执行栈末尾\n    setTimeout(function () {\n        deferreds.map(deferred => {\n            deferred(value)\n        })    \n    }, 0)\n}\n```\n现在就可以看到, then 中的回调函数能够正常执行了.\n\n#### 引入状态\n现在我们引入规范 `Promises/A+` 中所说的 States, 它有三个互斥的状态: pending/ fulfilled/ rejected.\n\n现在我们来改进下代码:\n```javascript\nfunction Promise (fn) {\n    let value = null\n    let deferreds = []\n    let state = 'pending'\n    \n    this.then = function (onFulfilled) {\n        if (state === 'pending') {\n            deferreds.push(onFulfilled)\n            return this\n        }\n        onFulfilled(value)\n        return this\n    }\n    \n    function resolve (newValue) {\n        value = newValue\n        state = 'fulfilled'\n        setTimeout(_ => {\n            deferreds.map(deferred => {\n                deferred(value)\n            })\n        }, 0)\n    }\n    fn(resolve)\n}\n```\n\n### 串行 Promise\n串行 `Promise` 是指当 promise 达到 fuifilled 状态之后, 再进行下一个 promise. 比如上例中的我们拿到 userId 之后还需要用这个 userId 去获取用户的名称/ 住址/ 手机号等其他信息.\n\n使用的伪代码类似这样:\n```javascript\ngetUserId()\n    .then(getUserInfoById)\n    .then(userInfo => {\n        // do something\n    })\n    \nconst getUserInfoById = id => {\n    return new Promise(resolve => {\n        axios.get('http://example.com/api', params: {\n            id: 123\n        }).then(response => {\n            resolve(JSON.parse(response).info)\n        })\n    })\n}\nconst getUserId = _ => {\n    return new Promise(resolve => {\n        resolve(123)\n    })\n}\n```\n串行的困难在于如何将前后的 `Promise` 衔接起来, 首先对 `then` 方法改造:\n```javascript\nthis.then = function (onFulfilled) {\n    // bridge promise\n    return new Promise(resolve => {\n        handle({\n            onFulfilled: onFulfilled || null,\n            resolve: resolve\n        })\n    })\n}\n\nlet handle = deferred => {\n    if (state === 'pending') {\n        deferreds.push(deferred)\n        return\n    }\n    let ret = deferred.onFulfilled(value)\n    deferred.resolve(ret)\n}\n```\n- `then` 方法中返回一个新创建的 Promise 实例作为返回值, 这是串行的基础, 由于返回类型一样所以依然支持链式.\n- `then` 方法中的形参 `onFulfilled` 和新创建的 Promise 实例中的 `resolve` 均放入当前 promise 的 deferreds 队列中.\n- `handle` 方法作为当前 promise 的内部方法, 较之前的 `then` 方法只增加了一行`deferred.resolve(ret)`.\n\n在当前 promise 的异步成功之后执行 `handle` 方法时, 先执行 `onFulfilled` 方法, 然后将其返回值作为 `resolve` 方法的实参传入.\n\n再改造 `resolve` 方法, 把代码整理一下:\n```javascript\nfunction Promise (fn) {\n    let value = null\n    let deferreds = []\n    let state = 'pending'\n    \n    this.then = function (onFulfilled) {\n        // 创建一个新的 Promise作为返回值\n        // 将当前 promise 的回调函数和新创建的 resolve\n        // 放入 deferreds 队列\n        return new Promise (resolve => {\n            handle({\n                onFulfilled: onFulfilled || null\n                resolve: resolve\n            })\n        })\n    }\n    const handle = deferred => {\n        // 初始化状态时, 往 deferreds 队列添加\n        if (state === 'pending') {\n            deferreds.push(deferred)\n            return\n        }\n        // 当前 promise 达到 'fulfilled' 状态之后\n        // 先执行回调函数, 再将回调函数的返回值(ret)\n        // 传递给 resolve 函数\n        let ret = deferred.onFulfilled(value)\n        deferred.resolve(ret)\n    }\n    \n    const resolve = newValue => {\n        if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\n            let then = newValue.then\n            if (typeof then === 'function') {\n                then.call(newValue, resolve)\n                return\n            }\n        }\n        value = newValue\n        state = 'fulfilled'\n        setTimeout(_ => {\n            deferreds.map(deferred => {\n                handle(deferred)\n            })\n        }, 0)\n    }\n    // 执行 promise 实例中的回调函数\n    fn(resolve)\n}\n\ngetUserId()\n    .then(getUserInfoById)\n    .then(userInfo => {\n        // do something\n        console.log('this is second callback')\n    })\n```\n现在 `resolve` 支持传入一个 promise 实例的参数了, 执行顺序如下:\n1. `getUserId` 生成的 promise1, 进入 Promise 函数执行 `fn(resolve)` 由于`getUserId` 的内部是一个异步操作, 下一步会直接执行 `this.then(onFulfilled)`.\n2. `this.then()` 返回一个新的 promise2 函数( 即: bridge promise)作为链式调用, promise2 重新实例化再执行 `fn(resolve)`, 则进入`handle({...})` 此时 handle 的参数为 getUserInfoById 和 resolve2, 接着被 push 到 `deferreds1` 队列中; 再接着执行下一个`this.then()` 生成 promise3, `deferreds2` 队列中 push 进第二个 then 的匿名函数(userInfo => {...}) 和 resolve3.\n3. 执行`resolve(123)`, 进入 `resolve(newValue)` 执行`handle(deferred)` 此时 deferred 为 getUserInfoById 和 resolve2, 执行 handle 内部的 `deferred.onFulfilled(value)` 也就是 getUserInfoById 方法从而生成 promise4, 再到 `deferred.resolve(ret)` 这个时候 ret 就为 promise4, 传入 `resolve(newValue)` 执行 `then.call(promise4, resolve2)`.\n4. 接着上一步进入 `this.then()` 生成 promise5(bridge promise), deferred4 压入 resolve2 和 resolve5; 在执行 getUserInfoById 中的 `resolve({name: 'cara'...})`, 进入 setTimeout 中的 `handle(deferred)`, 到 handle 函数内部 `deferred.onFulfilled(value)` 其实执行的是 `resolve2({...})` resolve2中的 `deferred` 保存的是的 `uerInfo => {}` 匿名函数和 `resolve3`; `deferred.resolve` 其实执行的是 `resolve5`, 由于 resolve3 和 resolve5 中的 `deferred` 都是空的于是完成整个流程.\n\n接下来再加入错误处理和异常判断:\n```javascript\nfunction Promise(fn) {\n    var state = 'pending',\n        value = null,\n        deferreds = [];\n\n    this.then = function (onFulfilled, onRejected) {\n        return new Promise(function (resolve, reject) {\n            handle({\n                onFulfilled: onFulfilled || null,\n                onRejected: onRejected || null,\n                resolve: resolve,\n                reject: reject\n            });\n        });\n    };\n\n    function handle(deferred) {\n        if (state === 'pending') {\n            deferreds.push(deferred);\n            return;\n        }\n\n        var cb = state === 'fulfilled' \n            ? deferred.onFulfilled \n            : deferred.onRejected,\n                ret;\n        if (cb === null) {\n            cb = state === 'fulfilled' \n                ? deferred.resolve \n                : deferred.reject;\n            cb(value);\n            return;\n        }\n        try {\n            ret = cb(value);\n            deferred.resolve(ret);\n        } catch (e) {\n            deferred.reject(e);\n        }\n    }\n\n    function resolve(newValue) {\n        if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\n            var then = newValue.then;\n            if (typeof then === 'function') {\n                then.call(newValue, resolve, reject);\n                return;\n            }\n        }\n        state = 'fulfilled';\n        value = newValue;\n        finale();\n    }\n\n    function reject(reason) {\n        state = 'rejected';\n        value = reason;\n        finale();\n    }\n\n    function finale() {\n        setTimeout(function () {\n            deferreds.forEach(function (deferred) {\n                handle(deferred);\n            });\n        }, 0);\n    }\n\n    fn(resolve, reject);\n}\n```\n**之前的文字描述不好理解, 所以还是画了一个执行流程图**\n![promise执行过程](/img/Promise执行过程.png)\n\n没有画 `reject` 的情况, 因为`reject` 跟 `resolve` 的流程是一样的, 两个一起画显得更乱就单独把 `resolve` 拎出来. 在加入 `handle` 和 `resolve` 在 promise 函数中作为内部方法后实在不易理解. 主要就是通过闭包来保存 promise 对象的变量引用, 将回调函数和 resolve 函数保存在缓存队列中, 在通过 resolve 完成链式调用.\n    \n## 其他实现\n看完之前的那篇文章实在觉得有点难理解, 于是又找了其他的实现方式[JS Promise的实现原理](http://bruce-xu.github.io/blogs/js/promise)比之前那篇更好理解一些, 所以还是记录一下好了.\n\n> 这篇文章作者说到的 `Promise` 重点:\n> 1. `Promise` 是一个承诺, 所以不管成功与否都要有一个执行结果, 因此 Promise 构造函数有一个函数类型的参数 `resolver` 来作为与该 promise 对象关联的任务.\n> 2. 三种状态不可逆转.\n> 3. `resolver` 函数封装了需要执行的异步操作, 内部: `resolve` 和 `reject` 两个参数; 分别代表执行成功和执行失败需要执行的操作.\n> 4. `then` 提供成功或失败的响应处理, 于是有了`onResolve` 和 `onReject`.\n> 5. `then` 方法返回一个新的 promise(bridge promise), 提供链式操作及串行, 如果直接返回 this 那么就是并行显然不符合我们的需求. 前一个 promise 需要知道下一个 promise 对象是谁及其任务引用, 而后一个 promise 要提供一个给前一个 promise 成功或失败时需要执行的任务, 因此添加一个闭包\n> 6. `makeCallback` 调用将 promise 及其关联任务传递进去, 返回一个新函数, 前一个 promise 对象就将持有返回函数的引用, 调用返回函数时就能访问到 promise 对象和关联任务.\n> 7. `resolve` 和 `reject` 函数在异步成功或失败的时候调用, 并传递成功的数据和失败的原因.\n> 8. `run` 函数执行异步相关的回调函数.\n\n### 代码结构\n\n- 构造函数\n\n```javascript\nfunction Promise (resolver) {\n    // 状态\n    this._status = 'pending'\n    \n    // 成功队列\n    this._doneCallbacks = []\n    // 失败队列\n    this._failCallbacks = []\n    \n    // 传递关联任务\n    resolver(resolve, reject)\n}\n```\n- `then` 方法\n\n```javascript\nthis.prototype.then = function (onResolve, onReject) {\n    // 添加闭包调用\n    let promise = new Promise(_ => {})\n    \n    // 保存对上一个 promise 的引用\n    this._doneCallbacks.push(makeCallback(promise, onResolve, 'reslove'))\n    this._failCallbacks.push(makeCallback(promise, onReject, 'reject'))\n    \n    return promise\n}\n```\n- `makeCallback` 函数\n\n```javascript\n// promise 对象/ 回调函数(关联任务)/ 类型\nfunction makeCallback (promise, callback, action) {\n    return function promiseCallback (value) {\n    \n    }\n}\n```\n- `resolve` 函数和 `reject` 函数\n这两个函数都需要一个参数来接收结果, 由于状态只能转换一次所以两个函数都需要判断状态.\n\n```javascript\n// 成功\n// promise: 属于哪个 promise 对象\n// data: 异步操作的结果\nfunction resolve (promise, data) {\n    // 已经被 resolve 过的话直接返回\n    if (promise._status !== 'pending') return\n    \n    // 修改 promise 状态\n    promise._status = 'fulfilled'\n    // 保存异步操作的值\n    promise._value = data\n    \n    // 执行相关回调函数\n    run(promise)\n}\n\n// 失败\n// promise: 属于哪个 promise 对象\n// reason: 失败原因\nfunction reject (promise, reason) {\n    if (promise._status !== 'pending') return\n    \n    promise._status = 'rejected'\n    promise._value = reason\n    \n    run(promise)\n}\n```\n- `run` 函数\n用来执行异步相关的回调函数.\n\n```javascript\nfunction run (promise) {\n    // then 方法中也会调用, 此处再做一次判断\n    if (promise._status === 'pending') return\n    \n    let value = promise._value\n    // 是否成功\n    let callbacks = promise._status === 'fulfilled'\n        ? promise._doneCallbacks\n        : promise._failCallbacks\n    \n    // 这里需要异步\n    setTimeout(_ => {\n        // 执行回调函数\n        callbacks.map(cb => cb(value))\n    }, 0)\n    \n    promise._doneCallbacks = []\n    promise._failCallbacks = []\n}\n```\n**`run` 函数中的 callbacks 就是 `makeCallback` 所返回的函数**\n\n- 完善 `makeCallback` 函数\n\n```javascript\nfunction makeCallback (promise, callback, action) {\n    return function promiseCallback (value) {\n        // 如果 callback 是个函数, 使用前一个 promise\n        // 传递的值作为 callback 的参数\n        if (typeof callback === 'function') {\n            let x\n            try {\n                x = callback(value)\n            }catch (e) {\n                // 异常时, 用当前 promise 的 reject\n                reject(promise, e)\n            }\n            \n            // 如果 callback 返回的是当前的 promise\n            // 要抛出异常\n            if (x === promise) {\n                let reason = new Error('Error: return value could not be same with the promise')\n                reject(promise, reason)\n            }\n            // 如果返回值是一个 promise 对象\n            // 则当返回 promise 对象被 reoslve/ reject后\n            // 再执行当前的 promise 的 resolve/ reject\n            else if (x instanceof Promise) {\n                x.then(\n                    function (data) {\n                        resolve(promise, data)\n                    },\n                    function (reason) {\n                        reject(promise, reason)\n                    }\n                )\n            }else {\n                let then\n                (function resolveThenable (x) {\n                    // 如果返回的是一个 Thenable 对象\n                    if (x && (typeof x === 'object' || typeof x === 'function')) {\n                        try {\n                            then = x.then\n                        }catch (e) {\n                            reject(promise, e)\n                            return\n                        }\n                        \n                        if (typeof then === 'function') {\n                            // 调用 Thenable 对象的 then方法\n                            // 传递进去的 resolvePromise 和 rejectPromise 以及下面两个匿名函数\n                            // 可能会重复调用, 但是规范只能有其中一个被调用一次, 其他要被忽略\n                            let invoked = false\n                            try {\n                                then.call(x,\n                                    function (y) {\n                                        if (invoked) return\n                                        invoked = true\n                                        \n                                        // 避免两个 promise 恒等\n                                        if (y === x) {\n                                            throw new Error('Error: return value could not be same with the promise')\n                                        }\n                                        \n                                    // y 有可能还是 thenable 对象    \n                                    resolveThenable(y)\n                                    },\n                                    function (e) {\n                                        if (invoked) return\n                                        invoked = true\n                                        \n                                        reject(promise, e)\n                                    }\n                                )\n                            }catch (e) {\n                                    // 如果`resolvePromise`和`rejectPromise`方法被调用后，再抛出异常，则忽略异常\n                                    // 否则用异常对象reject此Promise对象\n                                if (!invoked) {\n                                    reject(promise, e)\n                                }\n                            }\n                        }else {\n                            resolve(promise, x)\n                        }\n                    }else {\n                        resolve(promise, x)\n                    }\n                }(x))\n            }\n        }\n        // 如果没有传 callback直接使用前一个 promise\n        // 传过来的值 resolve/reject 当前 promise 对象\n        else {\n            action === 'resolve'\n                ? resolve(promise, value)\n                : reject(promise, value)\n        }\n    }\n}\n```\n\n#### 总结\n我一开始是先看的**剖析 Promise 之基础篇**, 前半部分确实很亲民, 但是到加入 `hanlde` 和改造 `resolve` 函数 就开始懵了, 然后懵懵懂懂的去看**JS Promise 的原理实现**, 不过在最复杂的 `makeCallback` 函数中解释有点一笔带过的意思. 不过看了这篇帮助我理解之前的**剖析 Promise 之基础篇**, 就返回去看基础篇画了一遍流程图才算看懂, 里面的闭包用的太精妙了.\n\n> 参考文章\n> [剖析 Promise 之基础篇](https://tech.meituan.com/promise-insight.html)\n> [JS Promise 的原理实现](http://bruce-xu.github.io/blogs/js/promise)\n> [剖析Promise内部结构](https://github.com/xieranmaya/blog/issues/3)\n\nCreated on 2017-12-26 by Cara\n","source":"_posts/Promise-分析及实现.md","raw":"---\ntitle: Promise 分析及实现\ndate: 2018-01-04 19:07:22\ntags:\n- JavaScript\ncategories:\n- 笔记📒\n---\nPromise 是 ES6中中收录的异步操作封装, 通常在回调/ 事件/ 消息等异步操作中有显著的优势, 让我们在更方便的操作异步也让代码更加清晰.包括 ES7中的 Async/Await 也是对异步操作的封装, 不过 Async 更像是 Generator 的语法糖.\n\n### 基础实现\n学习[剖析 Promise 之基础篇](https://tech.meituan.com/promise-insight.html)用一个最常见的应用来剖析 `Promise`, 通过异步获取用户 Id, 然后作一些处理. 平常我们最常用的是回调的方式来处理, 下面用 `Promise` 的方式来处理.\n```javascript\nconst getUserId = _ => {\n    new Promise((resolve, reject) => {\n        axios.get('http://example.com/api', params: param).then(res => {\n            resolve(JSON.parse(res).id)\n        })\n    })\n}\ngetUserId().then(id => {\n    console.log(id)\n    // do something...\n})\n```\ngetUserId 函数返回一个 `Promise`, 在他的 `then` 方法中放入异步操作成功之后的回调函数. 这种方式明显比我们之前常用的回调函数更加方便而且易读, 也更加容易避免 callback hell.\n\n那么满足这样的场景的`Promise`是怎样实现的呢, 下面我们可以简单的实现一下最基础的`Promise`:\n```javascript\nfunction Promise (fn) {\n    let value = null\n    let deferreds = []\n    \n    // 4. 存入异步成功需要的回调函数\n    // 此时指向两个回调函数 id => {}\n    this.then = function (onFulfilled) {\n        deferreds.push(onFulfilled)\n        return this\n    }\n    \n    // 3. 执行 deferreds 队列中的回调函数\n    // 此时 value 为123\n    function resolve (value) {\n        deferreds.map(deferred => {\n            deferred(value)\n        })\n    }\n    \n    // 1. 执行创建 Promise 实例时传入的函数\n    // 并传入 resolve 供在适当时触发回调\n    fn(resolve)\n}\n\nconst getUserId = _ => {\n    return new Promise(resolve => {\n        // 2. 执行 resolve\n        resolve(123)\n    })\n}\ngetUserId().then( id => {\n    console.log('this is callback!')\n    console.log(id) // 123\n}).then(id => {\n    console.log('this is second callback!')\n    console.log(id) // 123\n})\n```\n - 调用 `then` 方法将回调函数存入 deferreds 队列.\n - 创建 `Promise` 实例时传入函数和 `resolve`, `resolve` 用于在适当的时间触发回调函数.\n - 真正执行回调函数的是 `deferreds` 队列中的元素.\n - `resolve` 函数接受一个参数, 用于回调函数使用, 即异步操作的返回结果.\n\n可能大家已经发现, 以上代码并不能真正执行到回调函数.根据上面标注的序号就是代码的执行顺序, 这是因为现在还是同步函数, `Promise` 函数中的 `resolve` 函数会先于 `this.then` 函数执行,此时 `deferreds` 队列中还是空的, 以至于后面的回调函数也无法执行. 所以我们要保证回调以异步的方式执行, 以保证执行顺序. 可以通过 `setTimeout` 将 `resolve` 中的回调函数放在执行栈的末尾.\n```javascript\nfunction resolve (value) {\n    // 将执行的回调的逻辑放入执行栈末尾\n    setTimeout(function () {\n        deferreds.map(deferred => {\n            deferred(value)\n        })    \n    }, 0)\n}\n```\n现在就可以看到, then 中的回调函数能够正常执行了.\n\n#### 引入状态\n现在我们引入规范 `Promises/A+` 中所说的 States, 它有三个互斥的状态: pending/ fulfilled/ rejected.\n\n现在我们来改进下代码:\n```javascript\nfunction Promise (fn) {\n    let value = null\n    let deferreds = []\n    let state = 'pending'\n    \n    this.then = function (onFulfilled) {\n        if (state === 'pending') {\n            deferreds.push(onFulfilled)\n            return this\n        }\n        onFulfilled(value)\n        return this\n    }\n    \n    function resolve (newValue) {\n        value = newValue\n        state = 'fulfilled'\n        setTimeout(_ => {\n            deferreds.map(deferred => {\n                deferred(value)\n            })\n        }, 0)\n    }\n    fn(resolve)\n}\n```\n\n### 串行 Promise\n串行 `Promise` 是指当 promise 达到 fuifilled 状态之后, 再进行下一个 promise. 比如上例中的我们拿到 userId 之后还需要用这个 userId 去获取用户的名称/ 住址/ 手机号等其他信息.\n\n使用的伪代码类似这样:\n```javascript\ngetUserId()\n    .then(getUserInfoById)\n    .then(userInfo => {\n        // do something\n    })\n    \nconst getUserInfoById = id => {\n    return new Promise(resolve => {\n        axios.get('http://example.com/api', params: {\n            id: 123\n        }).then(response => {\n            resolve(JSON.parse(response).info)\n        })\n    })\n}\nconst getUserId = _ => {\n    return new Promise(resolve => {\n        resolve(123)\n    })\n}\n```\n串行的困难在于如何将前后的 `Promise` 衔接起来, 首先对 `then` 方法改造:\n```javascript\nthis.then = function (onFulfilled) {\n    // bridge promise\n    return new Promise(resolve => {\n        handle({\n            onFulfilled: onFulfilled || null,\n            resolve: resolve\n        })\n    })\n}\n\nlet handle = deferred => {\n    if (state === 'pending') {\n        deferreds.push(deferred)\n        return\n    }\n    let ret = deferred.onFulfilled(value)\n    deferred.resolve(ret)\n}\n```\n- `then` 方法中返回一个新创建的 Promise 实例作为返回值, 这是串行的基础, 由于返回类型一样所以依然支持链式.\n- `then` 方法中的形参 `onFulfilled` 和新创建的 Promise 实例中的 `resolve` 均放入当前 promise 的 deferreds 队列中.\n- `handle` 方法作为当前 promise 的内部方法, 较之前的 `then` 方法只增加了一行`deferred.resolve(ret)`.\n\n在当前 promise 的异步成功之后执行 `handle` 方法时, 先执行 `onFulfilled` 方法, 然后将其返回值作为 `resolve` 方法的实参传入.\n\n再改造 `resolve` 方法, 把代码整理一下:\n```javascript\nfunction Promise (fn) {\n    let value = null\n    let deferreds = []\n    let state = 'pending'\n    \n    this.then = function (onFulfilled) {\n        // 创建一个新的 Promise作为返回值\n        // 将当前 promise 的回调函数和新创建的 resolve\n        // 放入 deferreds 队列\n        return new Promise (resolve => {\n            handle({\n                onFulfilled: onFulfilled || null\n                resolve: resolve\n            })\n        })\n    }\n    const handle = deferred => {\n        // 初始化状态时, 往 deferreds 队列添加\n        if (state === 'pending') {\n            deferreds.push(deferred)\n            return\n        }\n        // 当前 promise 达到 'fulfilled' 状态之后\n        // 先执行回调函数, 再将回调函数的返回值(ret)\n        // 传递给 resolve 函数\n        let ret = deferred.onFulfilled(value)\n        deferred.resolve(ret)\n    }\n    \n    const resolve = newValue => {\n        if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\n            let then = newValue.then\n            if (typeof then === 'function') {\n                then.call(newValue, resolve)\n                return\n            }\n        }\n        value = newValue\n        state = 'fulfilled'\n        setTimeout(_ => {\n            deferreds.map(deferred => {\n                handle(deferred)\n            })\n        }, 0)\n    }\n    // 执行 promise 实例中的回调函数\n    fn(resolve)\n}\n\ngetUserId()\n    .then(getUserInfoById)\n    .then(userInfo => {\n        // do something\n        console.log('this is second callback')\n    })\n```\n现在 `resolve` 支持传入一个 promise 实例的参数了, 执行顺序如下:\n1. `getUserId` 生成的 promise1, 进入 Promise 函数执行 `fn(resolve)` 由于`getUserId` 的内部是一个异步操作, 下一步会直接执行 `this.then(onFulfilled)`.\n2. `this.then()` 返回一个新的 promise2 函数( 即: bridge promise)作为链式调用, promise2 重新实例化再执行 `fn(resolve)`, 则进入`handle({...})` 此时 handle 的参数为 getUserInfoById 和 resolve2, 接着被 push 到 `deferreds1` 队列中; 再接着执行下一个`this.then()` 生成 promise3, `deferreds2` 队列中 push 进第二个 then 的匿名函数(userInfo => {...}) 和 resolve3.\n3. 执行`resolve(123)`, 进入 `resolve(newValue)` 执行`handle(deferred)` 此时 deferred 为 getUserInfoById 和 resolve2, 执行 handle 内部的 `deferred.onFulfilled(value)` 也就是 getUserInfoById 方法从而生成 promise4, 再到 `deferred.resolve(ret)` 这个时候 ret 就为 promise4, 传入 `resolve(newValue)` 执行 `then.call(promise4, resolve2)`.\n4. 接着上一步进入 `this.then()` 生成 promise5(bridge promise), deferred4 压入 resolve2 和 resolve5; 在执行 getUserInfoById 中的 `resolve({name: 'cara'...})`, 进入 setTimeout 中的 `handle(deferred)`, 到 handle 函数内部 `deferred.onFulfilled(value)` 其实执行的是 `resolve2({...})` resolve2中的 `deferred` 保存的是的 `uerInfo => {}` 匿名函数和 `resolve3`; `deferred.resolve` 其实执行的是 `resolve5`, 由于 resolve3 和 resolve5 中的 `deferred` 都是空的于是完成整个流程.\n\n接下来再加入错误处理和异常判断:\n```javascript\nfunction Promise(fn) {\n    var state = 'pending',\n        value = null,\n        deferreds = [];\n\n    this.then = function (onFulfilled, onRejected) {\n        return new Promise(function (resolve, reject) {\n            handle({\n                onFulfilled: onFulfilled || null,\n                onRejected: onRejected || null,\n                resolve: resolve,\n                reject: reject\n            });\n        });\n    };\n\n    function handle(deferred) {\n        if (state === 'pending') {\n            deferreds.push(deferred);\n            return;\n        }\n\n        var cb = state === 'fulfilled' \n            ? deferred.onFulfilled \n            : deferred.onRejected,\n                ret;\n        if (cb === null) {\n            cb = state === 'fulfilled' \n                ? deferred.resolve \n                : deferred.reject;\n            cb(value);\n            return;\n        }\n        try {\n            ret = cb(value);\n            deferred.resolve(ret);\n        } catch (e) {\n            deferred.reject(e);\n        }\n    }\n\n    function resolve(newValue) {\n        if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\n            var then = newValue.then;\n            if (typeof then === 'function') {\n                then.call(newValue, resolve, reject);\n                return;\n            }\n        }\n        state = 'fulfilled';\n        value = newValue;\n        finale();\n    }\n\n    function reject(reason) {\n        state = 'rejected';\n        value = reason;\n        finale();\n    }\n\n    function finale() {\n        setTimeout(function () {\n            deferreds.forEach(function (deferred) {\n                handle(deferred);\n            });\n        }, 0);\n    }\n\n    fn(resolve, reject);\n}\n```\n**之前的文字描述不好理解, 所以还是画了一个执行流程图**\n![promise执行过程](/img/Promise执行过程.png)\n\n没有画 `reject` 的情况, 因为`reject` 跟 `resolve` 的流程是一样的, 两个一起画显得更乱就单独把 `resolve` 拎出来. 在加入 `handle` 和 `resolve` 在 promise 函数中作为内部方法后实在不易理解. 主要就是通过闭包来保存 promise 对象的变量引用, 将回调函数和 resolve 函数保存在缓存队列中, 在通过 resolve 完成链式调用.\n    \n## 其他实现\n看完之前的那篇文章实在觉得有点难理解, 于是又找了其他的实现方式[JS Promise的实现原理](http://bruce-xu.github.io/blogs/js/promise)比之前那篇更好理解一些, 所以还是记录一下好了.\n\n> 这篇文章作者说到的 `Promise` 重点:\n> 1. `Promise` 是一个承诺, 所以不管成功与否都要有一个执行结果, 因此 Promise 构造函数有一个函数类型的参数 `resolver` 来作为与该 promise 对象关联的任务.\n> 2. 三种状态不可逆转.\n> 3. `resolver` 函数封装了需要执行的异步操作, 内部: `resolve` 和 `reject` 两个参数; 分别代表执行成功和执行失败需要执行的操作.\n> 4. `then` 提供成功或失败的响应处理, 于是有了`onResolve` 和 `onReject`.\n> 5. `then` 方法返回一个新的 promise(bridge promise), 提供链式操作及串行, 如果直接返回 this 那么就是并行显然不符合我们的需求. 前一个 promise 需要知道下一个 promise 对象是谁及其任务引用, 而后一个 promise 要提供一个给前一个 promise 成功或失败时需要执行的任务, 因此添加一个闭包\n> 6. `makeCallback` 调用将 promise 及其关联任务传递进去, 返回一个新函数, 前一个 promise 对象就将持有返回函数的引用, 调用返回函数时就能访问到 promise 对象和关联任务.\n> 7. `resolve` 和 `reject` 函数在异步成功或失败的时候调用, 并传递成功的数据和失败的原因.\n> 8. `run` 函数执行异步相关的回调函数.\n\n### 代码结构\n\n- 构造函数\n\n```javascript\nfunction Promise (resolver) {\n    // 状态\n    this._status = 'pending'\n    \n    // 成功队列\n    this._doneCallbacks = []\n    // 失败队列\n    this._failCallbacks = []\n    \n    // 传递关联任务\n    resolver(resolve, reject)\n}\n```\n- `then` 方法\n\n```javascript\nthis.prototype.then = function (onResolve, onReject) {\n    // 添加闭包调用\n    let promise = new Promise(_ => {})\n    \n    // 保存对上一个 promise 的引用\n    this._doneCallbacks.push(makeCallback(promise, onResolve, 'reslove'))\n    this._failCallbacks.push(makeCallback(promise, onReject, 'reject'))\n    \n    return promise\n}\n```\n- `makeCallback` 函数\n\n```javascript\n// promise 对象/ 回调函数(关联任务)/ 类型\nfunction makeCallback (promise, callback, action) {\n    return function promiseCallback (value) {\n    \n    }\n}\n```\n- `resolve` 函数和 `reject` 函数\n这两个函数都需要一个参数来接收结果, 由于状态只能转换一次所以两个函数都需要判断状态.\n\n```javascript\n// 成功\n// promise: 属于哪个 promise 对象\n// data: 异步操作的结果\nfunction resolve (promise, data) {\n    // 已经被 resolve 过的话直接返回\n    if (promise._status !== 'pending') return\n    \n    // 修改 promise 状态\n    promise._status = 'fulfilled'\n    // 保存异步操作的值\n    promise._value = data\n    \n    // 执行相关回调函数\n    run(promise)\n}\n\n// 失败\n// promise: 属于哪个 promise 对象\n// reason: 失败原因\nfunction reject (promise, reason) {\n    if (promise._status !== 'pending') return\n    \n    promise._status = 'rejected'\n    promise._value = reason\n    \n    run(promise)\n}\n```\n- `run` 函数\n用来执行异步相关的回调函数.\n\n```javascript\nfunction run (promise) {\n    // then 方法中也会调用, 此处再做一次判断\n    if (promise._status === 'pending') return\n    \n    let value = promise._value\n    // 是否成功\n    let callbacks = promise._status === 'fulfilled'\n        ? promise._doneCallbacks\n        : promise._failCallbacks\n    \n    // 这里需要异步\n    setTimeout(_ => {\n        // 执行回调函数\n        callbacks.map(cb => cb(value))\n    }, 0)\n    \n    promise._doneCallbacks = []\n    promise._failCallbacks = []\n}\n```\n**`run` 函数中的 callbacks 就是 `makeCallback` 所返回的函数**\n\n- 完善 `makeCallback` 函数\n\n```javascript\nfunction makeCallback (promise, callback, action) {\n    return function promiseCallback (value) {\n        // 如果 callback 是个函数, 使用前一个 promise\n        // 传递的值作为 callback 的参数\n        if (typeof callback === 'function') {\n            let x\n            try {\n                x = callback(value)\n            }catch (e) {\n                // 异常时, 用当前 promise 的 reject\n                reject(promise, e)\n            }\n            \n            // 如果 callback 返回的是当前的 promise\n            // 要抛出异常\n            if (x === promise) {\n                let reason = new Error('Error: return value could not be same with the promise')\n                reject(promise, reason)\n            }\n            // 如果返回值是一个 promise 对象\n            // 则当返回 promise 对象被 reoslve/ reject后\n            // 再执行当前的 promise 的 resolve/ reject\n            else if (x instanceof Promise) {\n                x.then(\n                    function (data) {\n                        resolve(promise, data)\n                    },\n                    function (reason) {\n                        reject(promise, reason)\n                    }\n                )\n            }else {\n                let then\n                (function resolveThenable (x) {\n                    // 如果返回的是一个 Thenable 对象\n                    if (x && (typeof x === 'object' || typeof x === 'function')) {\n                        try {\n                            then = x.then\n                        }catch (e) {\n                            reject(promise, e)\n                            return\n                        }\n                        \n                        if (typeof then === 'function') {\n                            // 调用 Thenable 对象的 then方法\n                            // 传递进去的 resolvePromise 和 rejectPromise 以及下面两个匿名函数\n                            // 可能会重复调用, 但是规范只能有其中一个被调用一次, 其他要被忽略\n                            let invoked = false\n                            try {\n                                then.call(x,\n                                    function (y) {\n                                        if (invoked) return\n                                        invoked = true\n                                        \n                                        // 避免两个 promise 恒等\n                                        if (y === x) {\n                                            throw new Error('Error: return value could not be same with the promise')\n                                        }\n                                        \n                                    // y 有可能还是 thenable 对象    \n                                    resolveThenable(y)\n                                    },\n                                    function (e) {\n                                        if (invoked) return\n                                        invoked = true\n                                        \n                                        reject(promise, e)\n                                    }\n                                )\n                            }catch (e) {\n                                    // 如果`resolvePromise`和`rejectPromise`方法被调用后，再抛出异常，则忽略异常\n                                    // 否则用异常对象reject此Promise对象\n                                if (!invoked) {\n                                    reject(promise, e)\n                                }\n                            }\n                        }else {\n                            resolve(promise, x)\n                        }\n                    }else {\n                        resolve(promise, x)\n                    }\n                }(x))\n            }\n        }\n        // 如果没有传 callback直接使用前一个 promise\n        // 传过来的值 resolve/reject 当前 promise 对象\n        else {\n            action === 'resolve'\n                ? resolve(promise, value)\n                : reject(promise, value)\n        }\n    }\n}\n```\n\n#### 总结\n我一开始是先看的**剖析 Promise 之基础篇**, 前半部分确实很亲民, 但是到加入 `hanlde` 和改造 `resolve` 函数 就开始懵了, 然后懵懵懂懂的去看**JS Promise 的原理实现**, 不过在最复杂的 `makeCallback` 函数中解释有点一笔带过的意思. 不过看了这篇帮助我理解之前的**剖析 Promise 之基础篇**, 就返回去看基础篇画了一遍流程图才算看懂, 里面的闭包用的太精妙了.\n\n> 参考文章\n> [剖析 Promise 之基础篇](https://tech.meituan.com/promise-insight.html)\n> [JS Promise 的原理实现](http://bruce-xu.github.io/blogs/js/promise)\n> [剖析Promise内部结构](https://github.com/xieranmaya/blog/issues/3)\n\nCreated on 2017-12-26 by Cara\n","slug":"Promise-分析及实现","published":1,"updated":"2018-05-05T09:23:03.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolsm000wklu0gz2f09vg","content":"<p>Promise 是 ES6中中收录的异步操作封装, 通常在回调/ 事件/ 消息等异步操作中有显著的优势, 让我们在更方便的操作异步也让代码更加清晰.包括 ES7中的 Async/Await 也是对异步操作的封装, 不过 Async 更像是 Generator 的语法糖.</p>\n<h3 id=\"基础实现\"><a href=\"#基础实现\" class=\"headerlink\" title=\"基础实现\"></a>基础实现</h3><p>学习<a href=\"https://tech.meituan.com/promise-insight.html\" target=\"_blank\" rel=\"noopener\">剖析 Promise 之基础篇</a>用一个最常见的应用来剖析 <code>Promise</code>, 通过异步获取用户 Id, 然后作一些处理. 平常我们最常用的是回调的方式来处理, 下面用 <code>Promise</code> 的方式来处理.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getUserId = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        axios.get(<span class=\"string\">'http://example.com/api'</span>, <span class=\"attr\">params</span>: param).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            resolve(<span class=\"built_in\">JSON</span>.parse(res).id)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getUserId().then(<span class=\"function\"><span class=\"params\">id</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id)</span><br><span class=\"line\">    <span class=\"comment\">// do something...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>getUserId 函数返回一个 <code>Promise</code>, 在他的 <code>then</code> 方法中放入异步操作成功之后的回调函数. 这种方式明显比我们之前常用的回调函数更加方便而且易读, 也更加容易避免 callback hell.</p>\n<p>那么满足这样的场景的<code>Promise</code>是怎样实现的呢, 下面我们可以简单的实现一下最基础的<code>Promise</code>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> deferreds = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 4. 存入异步成功需要的回调函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 此时指向两个回调函数 id =&gt; &#123;&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled</span>) </span>&#123;</span><br><span class=\"line\">        deferreds.push(onFulfilled)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 3. 执行 deferreds 队列中的回调函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 此时 value 为123</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        deferreds.map(<span class=\"function\"><span class=\"params\">deferred</span> =&gt;</span> &#123;</span><br><span class=\"line\">            deferred(value)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 1. 执行创建 Promise 实例时传入的函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 并传入 resolve 供在适当时触发回调</span></span><br><span class=\"line\">    fn(resolve)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getUserId = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 执行 resolve</span></span><br><span class=\"line\">        resolve(<span class=\"number\">123</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getUserId().then( <span class=\"function\"><span class=\"params\">id</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is callback!'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id) <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">id</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is second callback!'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id) <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>调用 <code>then</code> 方法将回调函数存入 deferreds 队列.</li>\n<li>创建 <code>Promise</code> 实例时传入函数和 <code>resolve</code>, <code>resolve</code> 用于在适当的时间触发回调函数.</li>\n<li>真正执行回调函数的是 <code>deferreds</code> 队列中的元素.</li>\n<li><code>resolve</code> 函数接受一个参数, 用于回调函数使用, 即异步操作的返回结果.</li>\n</ul>\n<p>可能大家已经发现, 以上代码并不能真正执行到回调函数.根据上面标注的序号就是代码的执行顺序, 这是因为现在还是同步函数, <code>Promise</code> 函数中的 <code>resolve</code> 函数会先于 <code>this.then</code> 函数执行,此时 <code>deferreds</code> 队列中还是空的, 以至于后面的回调函数也无法执行. 所以我们要保证回调以异步的方式执行, 以保证执行顺序. 可以通过 <code>setTimeout</code> 将 <code>resolve</code> 中的回调函数放在执行栈的末尾.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将执行的回调的逻辑放入执行栈末尾</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        deferreds.map(<span class=\"function\"><span class=\"params\">deferred</span> =&gt;</span> &#123;</span><br><span class=\"line\">            deferred(value)</span><br><span class=\"line\">        &#125;)    </span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在就可以看到, then 中的回调函数能够正常执行了.</p>\n<h4 id=\"引入状态\"><a href=\"#引入状态\" class=\"headerlink\" title=\"引入状态\"></a>引入状态</h4><p>现在我们引入规范 <code>Promises/A+</code> 中所说的 States, 它有三个互斥的状态: pending/ fulfilled/ rejected.</p>\n<p>现在我们来改进下代码:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> deferreds = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> state = <span class=\"string\">'pending'</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            deferreds.push(onFulfilled)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        onFulfilled(value)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">        value = newValue</span><br><span class=\"line\">        state = <span class=\"string\">'fulfilled'</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">            deferreds.map(<span class=\"function\"><span class=\"params\">deferred</span> =&gt;</span> &#123;</span><br><span class=\"line\">                deferred(value)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(resolve)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"串行-Promise\"><a href=\"#串行-Promise\" class=\"headerlink\" title=\"串行 Promise\"></a>串行 Promise</h3><p>串行 <code>Promise</code> 是指当 promise 达到 fuifilled 状态之后, 再进行下一个 promise. 比如上例中的我们拿到 userId 之后还需要用这个 userId 去获取用户的名称/ 住址/ 手机号等其他信息.</p>\n<p>使用的伪代码类似这样:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUserId()</span><br><span class=\"line\">    .then(getUserInfoById)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">userInfo</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">const</span> getUserInfoById = <span class=\"function\"><span class=\"params\">id</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        axios.get(<span class=\"string\">'http://example.com/api'</span>, <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">            id: <span class=\"number\">123</span></span><br><span class=\"line\">        &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">            resolve(<span class=\"built_in\">JSON</span>.parse(response).info)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getUserId = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"number\">123</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>串行的困难在于如何将前后的 <code>Promise</code> 衔接起来, 首先对 <code>then</code> 方法改造:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// bridge promise</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        handle(&#123;</span><br><span class=\"line\">            onFulfilled: onFulfilled || <span class=\"literal\">null</span>,</span><br><span class=\"line\">            resolve: resolve</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> handle = <span class=\"function\"><span class=\"params\">deferred</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        deferreds.push(deferred)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = deferred.onFulfilled(value)</span><br><span class=\"line\">    deferred.resolve(ret)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>then</code> 方法中返回一个新创建的 Promise 实例作为返回值, 这是串行的基础, 由于返回类型一样所以依然支持链式.</li>\n<li><code>then</code> 方法中的形参 <code>onFulfilled</code> 和新创建的 Promise 实例中的 <code>resolve</code> 均放入当前 promise 的 deferreds 队列中.</li>\n<li><code>handle</code> 方法作为当前 promise 的内部方法, 较之前的 <code>then</code> 方法只增加了一行<code>deferred.resolve(ret)</code>.</li>\n</ul>\n<p>在当前 promise 的异步成功之后执行 <code>handle</code> 方法时, 先执行 <code>onFulfilled</code> 方法, 然后将其返回值作为 <code>resolve</code> 方法的实参传入.</p>\n<p>再改造 <code>resolve</code> 方法, 把代码整理一下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> deferreds = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> state = <span class=\"string\">'pending'</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个新的 Promise作为返回值</span></span><br><span class=\"line\">        <span class=\"comment\">// 将当前 promise 的回调函数和新创建的 resolve</span></span><br><span class=\"line\">        <span class=\"comment\">// 放入 deferreds 队列</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span> (<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">            handle(&#123;</span><br><span class=\"line\">                onFulfilled: onFulfilled || <span class=\"literal\">null</span></span><br><span class=\"line\">                resolve: resolve</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handle = <span class=\"function\"><span class=\"params\">deferred</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化状态时, 往 deferreds 队列添加</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            deferreds.push(deferred)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当前 promise 达到 'fulfilled' 状态之后</span></span><br><span class=\"line\">        <span class=\"comment\">// 先执行回调函数, 再将回调函数的返回值(ret)</span></span><br><span class=\"line\">        <span class=\"comment\">// 传递给 resolve 函数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> ret = deferred.onFulfilled(value)</span><br><span class=\"line\">        deferred.resolve(ret)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> resolve = <span class=\"function\"><span class=\"params\">newValue</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newValue &amp;&amp; (<span class=\"keyword\">typeof</span> newValue === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> newValue === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> then = newValue.then</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                then.call(newValue, resolve)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value = newValue</span><br><span class=\"line\">        state = <span class=\"string\">'fulfilled'</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">            deferreds.map(<span class=\"function\"><span class=\"params\">deferred</span> =&gt;</span> &#123;</span><br><span class=\"line\">                handle(deferred)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 执行 promise 实例中的回调函数</span></span><br><span class=\"line\">    fn(resolve)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getUserId()</span><br><span class=\"line\">    .then(getUserInfoById)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">userInfo</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is second callback'</span>)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>现在 <code>resolve</code> 支持传入一个 promise 实例的参数了, 执行顺序如下:</p>\n<ol>\n<li><code>getUserId</code> 生成的 promise1, 进入 Promise 函数执行 <code>fn(resolve)</code> 由于<code>getUserId</code> 的内部是一个异步操作, 下一步会直接执行 <code>this.then(onFulfilled)</code>.</li>\n<li><code>this.then()</code> 返回一个新的 promise2 函数( 即: bridge promise)作为链式调用, promise2 重新实例化再执行 <code>fn(resolve)</code>, 则进入<code>handle({...})</code> 此时 handle 的参数为 getUserInfoById 和 resolve2, 接着被 push 到 <code>deferreds1</code> 队列中; 再接着执行下一个<code>this.then()</code> 生成 promise3, <code>deferreds2</code> 队列中 push 进第二个 then 的匿名函数(userInfo =&gt; {…}) 和 resolve3.</li>\n<li>执行<code>resolve(123)</code>, 进入 <code>resolve(newValue)</code> 执行<code>handle(deferred)</code> 此时 deferred 为 getUserInfoById 和 resolve2, 执行 handle 内部的 <code>deferred.onFulfilled(value)</code> 也就是 getUserInfoById 方法从而生成 promise4, 再到 <code>deferred.resolve(ret)</code> 这个时候 ret 就为 promise4, 传入 <code>resolve(newValue)</code> 执行 <code>then.call(promise4, resolve2)</code>.</li>\n<li>接着上一步进入 <code>this.then()</code> 生成 promise5(bridge promise), deferred4 压入 resolve2 和 resolve5; 在执行 getUserInfoById 中的 <code>resolve({name: &#39;cara&#39;...})</code>, 进入 setTimeout 中的 <code>handle(deferred)</code>, 到 handle 函数内部 <code>deferred.onFulfilled(value)</code> 其实执行的是 <code>resolve2({...})</code> resolve2中的 <code>deferred</code> 保存的是的 <code>uerInfo =&gt; {}</code> 匿名函数和 <code>resolve3</code>; <code>deferred.resolve</code> 其实执行的是 <code>resolve5</code>, 由于 resolve3 和 resolve5 中的 <code>deferred</code> 都是空的于是完成整个流程.</li>\n</ol>\n<p>接下来再加入错误处理和异常判断:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> state = <span class=\"string\">'pending'</span>,</span><br><span class=\"line\">        value = <span class=\"literal\">null</span>,</span><br><span class=\"line\">        deferreds = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            handle(&#123;</span><br><span class=\"line\">                onFulfilled: onFulfilled || <span class=\"literal\">null</span>,</span><br><span class=\"line\">                onRejected: onRejected || <span class=\"literal\">null</span>,</span><br><span class=\"line\">                resolve: resolve,</span><br><span class=\"line\">                reject: reject</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span>(<span class=\"params\">deferred</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            deferreds.push(deferred);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cb = state === <span class=\"string\">'fulfilled'</span> </span><br><span class=\"line\">            ? deferred.onFulfilled </span><br><span class=\"line\">            : deferred.onRejected,</span><br><span class=\"line\">                ret;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cb === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            cb = state === <span class=\"string\">'fulfilled'</span> </span><br><span class=\"line\">                ? deferred.resolve </span><br><span class=\"line\">                : deferred.reject;</span><br><span class=\"line\">            cb(value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ret = cb(value);</span><br><span class=\"line\">            deferred.resolve(ret);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            deferred.reject(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newValue &amp;&amp; (<span class=\"keyword\">typeof</span> newValue === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> newValue === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> then = newValue.then;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                then.call(newValue, resolve, reject);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        value = newValue;</span><br><span class=\"line\">        finale();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        value = reason;</span><br><span class=\"line\">        finale();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">finale</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            deferreds.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">deferred</span>) </span>&#123;</span><br><span class=\"line\">                handle(deferred);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fn(resolve, reject);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>之前的文字描述不好理解, 所以还是画了一个执行流程图</strong><br><img src=\"/img/Promise执行过程.png\" alt=\"promise执行过程\"></p>\n<p>没有画 <code>reject</code> 的情况, 因为<code>reject</code> 跟 <code>resolve</code> 的流程是一样的, 两个一起画显得更乱就单独把 <code>resolve</code> 拎出来. 在加入 <code>handle</code> 和 <code>resolve</code> 在 promise 函数中作为内部方法后实在不易理解. 主要就是通过闭包来保存 promise 对象的变量引用, 将回调函数和 resolve 函数保存在缓存队列中, 在通过 resolve 完成链式调用.</p>\n<h2 id=\"其他实现\"><a href=\"#其他实现\" class=\"headerlink\" title=\"其他实现\"></a>其他实现</h2><p>看完之前的那篇文章实在觉得有点难理解, 于是又找了其他的实现方式<a href=\"http://bruce-xu.github.io/blogs/js/promise\" target=\"_blank\" rel=\"noopener\">JS Promise的实现原理</a>比之前那篇更好理解一些, 所以还是记录一下好了.</p>\n<blockquote>\n<p>这篇文章作者说到的 <code>Promise</code> 重点:</p>\n<ol>\n<li><code>Promise</code> 是一个承诺, 所以不管成功与否都要有一个执行结果, 因此 Promise 构造函数有一个函数类型的参数 <code>resolver</code> 来作为与该 promise 对象关联的任务.</li>\n<li>三种状态不可逆转.</li>\n<li><code>resolver</code> 函数封装了需要执行的异步操作, 内部: <code>resolve</code> 和 <code>reject</code> 两个参数; 分别代表执行成功和执行失败需要执行的操作.</li>\n<li><code>then</code> 提供成功或失败的响应处理, 于是有了<code>onResolve</code> 和 <code>onReject</code>.</li>\n<li><code>then</code> 方法返回一个新的 promise(bridge promise), 提供链式操作及串行, 如果直接返回 this 那么就是并行显然不符合我们的需求. 前一个 promise 需要知道下一个 promise 对象是谁及其任务引用, 而后一个 promise 要提供一个给前一个 promise 成功或失败时需要执行的任务, 因此添加一个闭包</li>\n<li><code>makeCallback</code> 调用将 promise 及其关联任务传递进去, 返回一个新函数, 前一个 promise 对象就将持有返回函数的引用, 调用返回函数时就能访问到 promise 对象和关联任务.</li>\n<li><code>resolve</code> 和 <code>reject</code> 函数在异步成功或失败的时候调用, 并传递成功的数据和失败的原因.</li>\n<li><code>run</code> 函数执行异步相关的回调函数.</li>\n</ol>\n</blockquote>\n<h3 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h3><ul>\n<li>构造函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">resolver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 状态</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._status = <span class=\"string\">'pending'</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 成功队列</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._doneCallbacks = []</span><br><span class=\"line\">    <span class=\"comment\">// 失败队列</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._failCallbacks = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 传递关联任务</span></span><br><span class=\"line\">    resolver(resolve, reject)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>then</code> 方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolve, onReject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 添加闭包调用</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 保存对上一个 promise 的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._doneCallbacks.push(makeCallback(promise, onResolve, <span class=\"string\">'reslove'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._failCallbacks.push(makeCallback(promise, onReject, <span class=\"string\">'reject'</span>))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>makeCallback</code> 函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise 对象/ 回调函数(关联任务)/ 类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeCallback</span> (<span class=\"params\">promise, callback, action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promiseCallback</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>resolve</code> 函数和 <code>reject</code> 函数<br>这两个函数都需要一个参数来接收结果, 由于状态只能转换一次所以两个函数都需要判断状态.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 成功</span></span><br><span class=\"line\"><span class=\"comment\">// promise: 属于哪个 promise 对象</span></span><br><span class=\"line\"><span class=\"comment\">// data: 异步操作的结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span> (<span class=\"params\">promise, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 已经被 resolve 过的话直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (promise._status !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 修改 promise 状态</span></span><br><span class=\"line\">    promise._status = <span class=\"string\">'fulfilled'</span></span><br><span class=\"line\">    <span class=\"comment\">// 保存异步操作的值</span></span><br><span class=\"line\">    promise._value = data</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 执行相关回调函数</span></span><br><span class=\"line\">    run(promise)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 失败</span></span><br><span class=\"line\"><span class=\"comment\">// promise: 属于哪个 promise 对象</span></span><br><span class=\"line\"><span class=\"comment\">// reason: 失败原因</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span> (<span class=\"params\">promise, reason</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (promise._status !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    promise._status = <span class=\"string\">'rejected'</span></span><br><span class=\"line\">    promise._value = reason</span><br><span class=\"line\">    </span><br><span class=\"line\">    run(promise)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>run</code> 函数<br>用来执行异步相关的回调函数.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span> (<span class=\"params\">promise</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// then 方法中也会调用, 此处再做一次判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (promise._status === <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = promise._value</span><br><span class=\"line\">    <span class=\"comment\">// 是否成功</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> callbacks = promise._status === <span class=\"string\">'fulfilled'</span></span><br><span class=\"line\">        ? promise._doneCallbacks</span><br><span class=\"line\">        : promise._failCallbacks</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 这里需要异步</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行回调函数</span></span><br><span class=\"line\">        callbacks.map(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> cb(value))</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    promise._doneCallbacks = []</span><br><span class=\"line\">    promise._failCallbacks = []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><code>run</code> 函数中的 callbacks 就是 <code>makeCallback</code> 所返回的函数</strong></p>\n<ul>\n<li>完善 <code>makeCallback</code> 函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeCallback</span> (<span class=\"params\">promise, callback, action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promiseCallback</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 callback 是个函数, 使用前一个 promise</span></span><br><span class=\"line\">        <span class=\"comment\">// 传递的值作为 callback 的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                x = callback(value)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 异常时, 用当前 promise 的 reject</span></span><br><span class=\"line\">                reject(promise, e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 如果 callback 返回的是当前的 promise</span></span><br><span class=\"line\">            <span class=\"comment\">// 要抛出异常</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x === promise) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> reason = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Error: return value could not be same with the promise'</span>)</span><br><span class=\"line\">                reject(promise, reason)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果返回值是一个 promise 对象</span></span><br><span class=\"line\">            <span class=\"comment\">// 则当返回 promise 对象被 reoslve/ reject后</span></span><br><span class=\"line\">            <span class=\"comment\">// 再执行当前的 promise 的 resolve/ reject</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                x.then(</span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                        resolve(promise, data)</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        reject(promise, reason)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> then</span><br><span class=\"line\">                (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolveThenable</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果返回的是一个 Thenable 对象</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            then = x.then</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                            reject(promise, e)</span><br><span class=\"line\">                            <span class=\"keyword\">return</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        </span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 调用 Thenable 对象的 then方法</span></span><br><span class=\"line\">                            <span class=\"comment\">// 传递进去的 resolvePromise 和 rejectPromise 以及下面两个匿名函数</span></span><br><span class=\"line\">                            <span class=\"comment\">// 可能会重复调用, 但是规范只能有其中一个被调用一次, 其他要被忽略</span></span><br><span class=\"line\">                            <span class=\"keyword\">let</span> invoked = <span class=\"literal\">false</span></span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                then.call(x,</span><br><span class=\"line\">                                    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">                                        <span class=\"keyword\">if</span> (invoked) <span class=\"keyword\">return</span></span><br><span class=\"line\">                                        invoked = <span class=\"literal\">true</span></span><br><span class=\"line\">                                        </span><br><span class=\"line\">                                        <span class=\"comment\">// 避免两个 promise 恒等</span></span><br><span class=\"line\">                                        <span class=\"keyword\">if</span> (y === x) &#123;</span><br><span class=\"line\">                                            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Error: return value could not be same with the promise'</span>)</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                        </span><br><span class=\"line\">                                    <span class=\"comment\">// y 有可能还是 thenable 对象    </span></span><br><span class=\"line\">                                    resolveThenable(y)</span><br><span class=\"line\">                                    &#125;,</span><br><span class=\"line\">                                    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">                                        <span class=\"keyword\">if</span> (invoked) <span class=\"keyword\">return</span></span><br><span class=\"line\">                                        invoked = <span class=\"literal\">true</span></span><br><span class=\"line\">                                        </span><br><span class=\"line\">                                        reject(promise, e)</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                )</span><br><span class=\"line\">                            &#125;<span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                                    <span class=\"comment\">// 如果`resolvePromise`和`rejectPromise`方法被调用后，再抛出异常，则忽略异常</span></span><br><span class=\"line\">                                    <span class=\"comment\">// 否则用异常对象reject此Promise对象</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!invoked) &#123;</span><br><span class=\"line\">                                    reject(promise, e)</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            resolve(promise, x)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(promise, x)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;(x))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没有传 callback直接使用前一个 promise</span></span><br><span class=\"line\">        <span class=\"comment\">// 传过来的值 resolve/reject 当前 promise 对象</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            action === <span class=\"string\">'resolve'</span></span><br><span class=\"line\">                ? resolve(promise, value)</span><br><span class=\"line\">                : reject(promise, value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>我一开始是先看的<strong>剖析 Promise 之基础篇</strong>, 前半部分确实很亲民, 但是到加入 <code>hanlde</code> 和改造 <code>resolve</code> 函数 就开始懵了, 然后懵懵懂懂的去看<strong>JS Promise 的原理实现</strong>, 不过在最复杂的 <code>makeCallback</code> 函数中解释有点一笔带过的意思. 不过看了这篇帮助我理解之前的<strong>剖析 Promise 之基础篇</strong>, 就返回去看基础篇画了一遍流程图才算看懂, 里面的闭包用的太精妙了.</p>\n<blockquote>\n<p>参考文章<br><a href=\"https://tech.meituan.com/promise-insight.html\" target=\"_blank\" rel=\"noopener\">剖析 Promise 之基础篇</a><br><a href=\"http://bruce-xu.github.io/blogs/js/promise\" target=\"_blank\" rel=\"noopener\">JS Promise 的原理实现</a><br><a href=\"https://github.com/xieranmaya/blog/issues/3\" target=\"_blank\" rel=\"noopener\">剖析Promise内部结构</a></p>\n</blockquote>\n<p>Created on 2017-12-26 by Cara</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Promise 是 ES6中中收录的异步操作封装, 通常在回调/ 事件/ 消息等异步操作中有显著的优势, 让我们在更方便的操作异步也让代码更加清晰.包括 ES7中的 Async/Await 也是对异步操作的封装, 不过 Async 更像是 Generator 的语法糖.</p>\n<h3 id=\"基础实现\"><a href=\"#基础实现\" class=\"headerlink\" title=\"基础实现\"></a>基础实现</h3><p>学习<a href=\"https://tech.meituan.com/promise-insight.html\" target=\"_blank\" rel=\"noopener\">剖析 Promise 之基础篇</a>用一个最常见的应用来剖析 <code>Promise</code>, 通过异步获取用户 Id, 然后作一些处理. 平常我们最常用的是回调的方式来处理, 下面用 <code>Promise</code> 的方式来处理.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getUserId = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        axios.get(<span class=\"string\">'http://example.com/api'</span>, <span class=\"attr\">params</span>: param).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            resolve(<span class=\"built_in\">JSON</span>.parse(res).id)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getUserId().then(<span class=\"function\"><span class=\"params\">id</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id)</span><br><span class=\"line\">    <span class=\"comment\">// do something...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>getUserId 函数返回一个 <code>Promise</code>, 在他的 <code>then</code> 方法中放入异步操作成功之后的回调函数. 这种方式明显比我们之前常用的回调函数更加方便而且易读, 也更加容易避免 callback hell.</p>\n<p>那么满足这样的场景的<code>Promise</code>是怎样实现的呢, 下面我们可以简单的实现一下最基础的<code>Promise</code>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> deferreds = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 4. 存入异步成功需要的回调函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 此时指向两个回调函数 id =&gt; &#123;&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled</span>) </span>&#123;</span><br><span class=\"line\">        deferreds.push(onFulfilled)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 3. 执行 deferreds 队列中的回调函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 此时 value 为123</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        deferreds.map(<span class=\"function\"><span class=\"params\">deferred</span> =&gt;</span> &#123;</span><br><span class=\"line\">            deferred(value)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 1. 执行创建 Promise 实例时传入的函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 并传入 resolve 供在适当时触发回调</span></span><br><span class=\"line\">    fn(resolve)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getUserId = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 执行 resolve</span></span><br><span class=\"line\">        resolve(<span class=\"number\">123</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getUserId().then( <span class=\"function\"><span class=\"params\">id</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is callback!'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id) <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">id</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is second callback!'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id) <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>调用 <code>then</code> 方法将回调函数存入 deferreds 队列.</li>\n<li>创建 <code>Promise</code> 实例时传入函数和 <code>resolve</code>, <code>resolve</code> 用于在适当的时间触发回调函数.</li>\n<li>真正执行回调函数的是 <code>deferreds</code> 队列中的元素.</li>\n<li><code>resolve</code> 函数接受一个参数, 用于回调函数使用, 即异步操作的返回结果.</li>\n</ul>\n<p>可能大家已经发现, 以上代码并不能真正执行到回调函数.根据上面标注的序号就是代码的执行顺序, 这是因为现在还是同步函数, <code>Promise</code> 函数中的 <code>resolve</code> 函数会先于 <code>this.then</code> 函数执行,此时 <code>deferreds</code> 队列中还是空的, 以至于后面的回调函数也无法执行. 所以我们要保证回调以异步的方式执行, 以保证执行顺序. 可以通过 <code>setTimeout</code> 将 <code>resolve</code> 中的回调函数放在执行栈的末尾.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将执行的回调的逻辑放入执行栈末尾</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        deferreds.map(<span class=\"function\"><span class=\"params\">deferred</span> =&gt;</span> &#123;</span><br><span class=\"line\">            deferred(value)</span><br><span class=\"line\">        &#125;)    </span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在就可以看到, then 中的回调函数能够正常执行了.</p>\n<h4 id=\"引入状态\"><a href=\"#引入状态\" class=\"headerlink\" title=\"引入状态\"></a>引入状态</h4><p>现在我们引入规范 <code>Promises/A+</code> 中所说的 States, 它有三个互斥的状态: pending/ fulfilled/ rejected.</p>\n<p>现在我们来改进下代码:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> deferreds = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> state = <span class=\"string\">'pending'</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            deferreds.push(onFulfilled)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        onFulfilled(value)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">        value = newValue</span><br><span class=\"line\">        state = <span class=\"string\">'fulfilled'</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">            deferreds.map(<span class=\"function\"><span class=\"params\">deferred</span> =&gt;</span> &#123;</span><br><span class=\"line\">                deferred(value)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(resolve)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"串行-Promise\"><a href=\"#串行-Promise\" class=\"headerlink\" title=\"串行 Promise\"></a>串行 Promise</h3><p>串行 <code>Promise</code> 是指当 promise 达到 fuifilled 状态之后, 再进行下一个 promise. 比如上例中的我们拿到 userId 之后还需要用这个 userId 去获取用户的名称/ 住址/ 手机号等其他信息.</p>\n<p>使用的伪代码类似这样:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUserId()</span><br><span class=\"line\">    .then(getUserInfoById)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">userInfo</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">const</span> getUserInfoById = <span class=\"function\"><span class=\"params\">id</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        axios.get(<span class=\"string\">'http://example.com/api'</span>, <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">            id: <span class=\"number\">123</span></span><br><span class=\"line\">        &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">            resolve(<span class=\"built_in\">JSON</span>.parse(response).info)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getUserId = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"number\">123</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>串行的困难在于如何将前后的 <code>Promise</code> 衔接起来, 首先对 <code>then</code> 方法改造:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// bridge promise</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        handle(&#123;</span><br><span class=\"line\">            onFulfilled: onFulfilled || <span class=\"literal\">null</span>,</span><br><span class=\"line\">            resolve: resolve</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> handle = <span class=\"function\"><span class=\"params\">deferred</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        deferreds.push(deferred)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = deferred.onFulfilled(value)</span><br><span class=\"line\">    deferred.resolve(ret)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>then</code> 方法中返回一个新创建的 Promise 实例作为返回值, 这是串行的基础, 由于返回类型一样所以依然支持链式.</li>\n<li><code>then</code> 方法中的形参 <code>onFulfilled</code> 和新创建的 Promise 实例中的 <code>resolve</code> 均放入当前 promise 的 deferreds 队列中.</li>\n<li><code>handle</code> 方法作为当前 promise 的内部方法, 较之前的 <code>then</code> 方法只增加了一行<code>deferred.resolve(ret)</code>.</li>\n</ul>\n<p>在当前 promise 的异步成功之后执行 <code>handle</code> 方法时, 先执行 <code>onFulfilled</code> 方法, 然后将其返回值作为 <code>resolve</code> 方法的实参传入.</p>\n<p>再改造 <code>resolve</code> 方法, 把代码整理一下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> deferreds = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> state = <span class=\"string\">'pending'</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个新的 Promise作为返回值</span></span><br><span class=\"line\">        <span class=\"comment\">// 将当前 promise 的回调函数和新创建的 resolve</span></span><br><span class=\"line\">        <span class=\"comment\">// 放入 deferreds 队列</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span> (<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">            handle(&#123;</span><br><span class=\"line\">                onFulfilled: onFulfilled || <span class=\"literal\">null</span></span><br><span class=\"line\">                resolve: resolve</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handle = <span class=\"function\"><span class=\"params\">deferred</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化状态时, 往 deferreds 队列添加</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            deferreds.push(deferred)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当前 promise 达到 'fulfilled' 状态之后</span></span><br><span class=\"line\">        <span class=\"comment\">// 先执行回调函数, 再将回调函数的返回值(ret)</span></span><br><span class=\"line\">        <span class=\"comment\">// 传递给 resolve 函数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> ret = deferred.onFulfilled(value)</span><br><span class=\"line\">        deferred.resolve(ret)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> resolve = <span class=\"function\"><span class=\"params\">newValue</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newValue &amp;&amp; (<span class=\"keyword\">typeof</span> newValue === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> newValue === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> then = newValue.then</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                then.call(newValue, resolve)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value = newValue</span><br><span class=\"line\">        state = <span class=\"string\">'fulfilled'</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">            deferreds.map(<span class=\"function\"><span class=\"params\">deferred</span> =&gt;</span> &#123;</span><br><span class=\"line\">                handle(deferred)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 执行 promise 实例中的回调函数</span></span><br><span class=\"line\">    fn(resolve)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getUserId()</span><br><span class=\"line\">    .then(getUserInfoById)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">userInfo</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is second callback'</span>)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>现在 <code>resolve</code> 支持传入一个 promise 实例的参数了, 执行顺序如下:</p>\n<ol>\n<li><code>getUserId</code> 生成的 promise1, 进入 Promise 函数执行 <code>fn(resolve)</code> 由于<code>getUserId</code> 的内部是一个异步操作, 下一步会直接执行 <code>this.then(onFulfilled)</code>.</li>\n<li><code>this.then()</code> 返回一个新的 promise2 函数( 即: bridge promise)作为链式调用, promise2 重新实例化再执行 <code>fn(resolve)</code>, 则进入<code>handle({...})</code> 此时 handle 的参数为 getUserInfoById 和 resolve2, 接着被 push 到 <code>deferreds1</code> 队列中; 再接着执行下一个<code>this.then()</code> 生成 promise3, <code>deferreds2</code> 队列中 push 进第二个 then 的匿名函数(userInfo =&gt; {…}) 和 resolve3.</li>\n<li>执行<code>resolve(123)</code>, 进入 <code>resolve(newValue)</code> 执行<code>handle(deferred)</code> 此时 deferred 为 getUserInfoById 和 resolve2, 执行 handle 内部的 <code>deferred.onFulfilled(value)</code> 也就是 getUserInfoById 方法从而生成 promise4, 再到 <code>deferred.resolve(ret)</code> 这个时候 ret 就为 promise4, 传入 <code>resolve(newValue)</code> 执行 <code>then.call(promise4, resolve2)</code>.</li>\n<li>接着上一步进入 <code>this.then()</code> 生成 promise5(bridge promise), deferred4 压入 resolve2 和 resolve5; 在执行 getUserInfoById 中的 <code>resolve({name: &#39;cara&#39;...})</code>, 进入 setTimeout 中的 <code>handle(deferred)</code>, 到 handle 函数内部 <code>deferred.onFulfilled(value)</code> 其实执行的是 <code>resolve2({...})</code> resolve2中的 <code>deferred</code> 保存的是的 <code>uerInfo =&gt; {}</code> 匿名函数和 <code>resolve3</code>; <code>deferred.resolve</code> 其实执行的是 <code>resolve5</code>, 由于 resolve3 和 resolve5 中的 <code>deferred</code> 都是空的于是完成整个流程.</li>\n</ol>\n<p>接下来再加入错误处理和异常判断:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> state = <span class=\"string\">'pending'</span>,</span><br><span class=\"line\">        value = <span class=\"literal\">null</span>,</span><br><span class=\"line\">        deferreds = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            handle(&#123;</span><br><span class=\"line\">                onFulfilled: onFulfilled || <span class=\"literal\">null</span>,</span><br><span class=\"line\">                onRejected: onRejected || <span class=\"literal\">null</span>,</span><br><span class=\"line\">                resolve: resolve,</span><br><span class=\"line\">                reject: reject</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span>(<span class=\"params\">deferred</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">            deferreds.push(deferred);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cb = state === <span class=\"string\">'fulfilled'</span> </span><br><span class=\"line\">            ? deferred.onFulfilled </span><br><span class=\"line\">            : deferred.onRejected,</span><br><span class=\"line\">                ret;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cb === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            cb = state === <span class=\"string\">'fulfilled'</span> </span><br><span class=\"line\">                ? deferred.resolve </span><br><span class=\"line\">                : deferred.reject;</span><br><span class=\"line\">            cb(value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ret = cb(value);</span><br><span class=\"line\">            deferred.resolve(ret);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            deferred.reject(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newValue &amp;&amp; (<span class=\"keyword\">typeof</span> newValue === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> newValue === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> then = newValue.then;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                then.call(newValue, resolve, reject);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        value = newValue;</span><br><span class=\"line\">        finale();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">        state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        value = reason;</span><br><span class=\"line\">        finale();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">finale</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            deferreds.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">deferred</span>) </span>&#123;</span><br><span class=\"line\">                handle(deferred);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fn(resolve, reject);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>之前的文字描述不好理解, 所以还是画了一个执行流程图</strong><br><img src=\"/img/Promise执行过程.png\" alt=\"promise执行过程\"></p>\n<p>没有画 <code>reject</code> 的情况, 因为<code>reject</code> 跟 <code>resolve</code> 的流程是一样的, 两个一起画显得更乱就单独把 <code>resolve</code> 拎出来. 在加入 <code>handle</code> 和 <code>resolve</code> 在 promise 函数中作为内部方法后实在不易理解. 主要就是通过闭包来保存 promise 对象的变量引用, 将回调函数和 resolve 函数保存在缓存队列中, 在通过 resolve 完成链式调用.</p>\n<h2 id=\"其他实现\"><a href=\"#其他实现\" class=\"headerlink\" title=\"其他实现\"></a>其他实现</h2><p>看完之前的那篇文章实在觉得有点难理解, 于是又找了其他的实现方式<a href=\"http://bruce-xu.github.io/blogs/js/promise\" target=\"_blank\" rel=\"noopener\">JS Promise的实现原理</a>比之前那篇更好理解一些, 所以还是记录一下好了.</p>\n<blockquote>\n<p>这篇文章作者说到的 <code>Promise</code> 重点:</p>\n<ol>\n<li><code>Promise</code> 是一个承诺, 所以不管成功与否都要有一个执行结果, 因此 Promise 构造函数有一个函数类型的参数 <code>resolver</code> 来作为与该 promise 对象关联的任务.</li>\n<li>三种状态不可逆转.</li>\n<li><code>resolver</code> 函数封装了需要执行的异步操作, 内部: <code>resolve</code> 和 <code>reject</code> 两个参数; 分别代表执行成功和执行失败需要执行的操作.</li>\n<li><code>then</code> 提供成功或失败的响应处理, 于是有了<code>onResolve</code> 和 <code>onReject</code>.</li>\n<li><code>then</code> 方法返回一个新的 promise(bridge promise), 提供链式操作及串行, 如果直接返回 this 那么就是并行显然不符合我们的需求. 前一个 promise 需要知道下一个 promise 对象是谁及其任务引用, 而后一个 promise 要提供一个给前一个 promise 成功或失败时需要执行的任务, 因此添加一个闭包</li>\n<li><code>makeCallback</code> 调用将 promise 及其关联任务传递进去, 返回一个新函数, 前一个 promise 对象就将持有返回函数的引用, 调用返回函数时就能访问到 promise 对象和关联任务.</li>\n<li><code>resolve</code> 和 <code>reject</code> 函数在异步成功或失败的时候调用, 并传递成功的数据和失败的原因.</li>\n<li><code>run</code> 函数执行异步相关的回调函数.</li>\n</ol>\n</blockquote>\n<h3 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h3><ul>\n<li>构造函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">resolver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 状态</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._status = <span class=\"string\">'pending'</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 成功队列</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._doneCallbacks = []</span><br><span class=\"line\">    <span class=\"comment\">// 失败队列</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._failCallbacks = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 传递关联任务</span></span><br><span class=\"line\">    resolver(resolve, reject)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>then</code> 方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolve, onReject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 添加闭包调用</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 保存对上一个 promise 的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._doneCallbacks.push(makeCallback(promise, onResolve, <span class=\"string\">'reslove'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._failCallbacks.push(makeCallback(promise, onReject, <span class=\"string\">'reject'</span>))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>makeCallback</code> 函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise 对象/ 回调函数(关联任务)/ 类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeCallback</span> (<span class=\"params\">promise, callback, action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promiseCallback</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>resolve</code> 函数和 <code>reject</code> 函数<br>这两个函数都需要一个参数来接收结果, 由于状态只能转换一次所以两个函数都需要判断状态.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 成功</span></span><br><span class=\"line\"><span class=\"comment\">// promise: 属于哪个 promise 对象</span></span><br><span class=\"line\"><span class=\"comment\">// data: 异步操作的结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span> (<span class=\"params\">promise, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 已经被 resolve 过的话直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (promise._status !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 修改 promise 状态</span></span><br><span class=\"line\">    promise._status = <span class=\"string\">'fulfilled'</span></span><br><span class=\"line\">    <span class=\"comment\">// 保存异步操作的值</span></span><br><span class=\"line\">    promise._value = data</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 执行相关回调函数</span></span><br><span class=\"line\">    run(promise)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 失败</span></span><br><span class=\"line\"><span class=\"comment\">// promise: 属于哪个 promise 对象</span></span><br><span class=\"line\"><span class=\"comment\">// reason: 失败原因</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span> (<span class=\"params\">promise, reason</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (promise._status !== <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    promise._status = <span class=\"string\">'rejected'</span></span><br><span class=\"line\">    promise._value = reason</span><br><span class=\"line\">    </span><br><span class=\"line\">    run(promise)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>run</code> 函数<br>用来执行异步相关的回调函数.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span> (<span class=\"params\">promise</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// then 方法中也会调用, 此处再做一次判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (promise._status === <span class=\"string\">'pending'</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = promise._value</span><br><span class=\"line\">    <span class=\"comment\">// 是否成功</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> callbacks = promise._status === <span class=\"string\">'fulfilled'</span></span><br><span class=\"line\">        ? promise._doneCallbacks</span><br><span class=\"line\">        : promise._failCallbacks</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 这里需要异步</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行回调函数</span></span><br><span class=\"line\">        callbacks.map(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> cb(value))</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    promise._doneCallbacks = []</span><br><span class=\"line\">    promise._failCallbacks = []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><code>run</code> 函数中的 callbacks 就是 <code>makeCallback</code> 所返回的函数</strong></p>\n<ul>\n<li>完善 <code>makeCallback</code> 函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeCallback</span> (<span class=\"params\">promise, callback, action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promiseCallback</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 callback 是个函数, 使用前一个 promise</span></span><br><span class=\"line\">        <span class=\"comment\">// 传递的值作为 callback 的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                x = callback(value)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 异常时, 用当前 promise 的 reject</span></span><br><span class=\"line\">                reject(promise, e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 如果 callback 返回的是当前的 promise</span></span><br><span class=\"line\">            <span class=\"comment\">// 要抛出异常</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x === promise) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> reason = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Error: return value could not be same with the promise'</span>)</span><br><span class=\"line\">                reject(promise, reason)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果返回值是一个 promise 对象</span></span><br><span class=\"line\">            <span class=\"comment\">// 则当返回 promise 对象被 reoslve/ reject后</span></span><br><span class=\"line\">            <span class=\"comment\">// 再执行当前的 promise 的 resolve/ reject</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">                x.then(</span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                        resolve(promise, data)</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">                        reject(promise, reason)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> then</span><br><span class=\"line\">                (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolveThenable</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果返回的是一个 Thenable 对象</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (x &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            then = x.then</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                            reject(promise, e)</span><br><span class=\"line\">                            <span class=\"keyword\">return</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        </span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 调用 Thenable 对象的 then方法</span></span><br><span class=\"line\">                            <span class=\"comment\">// 传递进去的 resolvePromise 和 rejectPromise 以及下面两个匿名函数</span></span><br><span class=\"line\">                            <span class=\"comment\">// 可能会重复调用, 但是规范只能有其中一个被调用一次, 其他要被忽略</span></span><br><span class=\"line\">                            <span class=\"keyword\">let</span> invoked = <span class=\"literal\">false</span></span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                then.call(x,</span><br><span class=\"line\">                                    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">                                        <span class=\"keyword\">if</span> (invoked) <span class=\"keyword\">return</span></span><br><span class=\"line\">                                        invoked = <span class=\"literal\">true</span></span><br><span class=\"line\">                                        </span><br><span class=\"line\">                                        <span class=\"comment\">// 避免两个 promise 恒等</span></span><br><span class=\"line\">                                        <span class=\"keyword\">if</span> (y === x) &#123;</span><br><span class=\"line\">                                            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Error: return value could not be same with the promise'</span>)</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                        </span><br><span class=\"line\">                                    <span class=\"comment\">// y 有可能还是 thenable 对象    </span></span><br><span class=\"line\">                                    resolveThenable(y)</span><br><span class=\"line\">                                    &#125;,</span><br><span class=\"line\">                                    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">                                        <span class=\"keyword\">if</span> (invoked) <span class=\"keyword\">return</span></span><br><span class=\"line\">                                        invoked = <span class=\"literal\">true</span></span><br><span class=\"line\">                                        </span><br><span class=\"line\">                                        reject(promise, e)</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                )</span><br><span class=\"line\">                            &#125;<span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                                    <span class=\"comment\">// 如果`resolvePromise`和`rejectPromise`方法被调用后，再抛出异常，则忽略异常</span></span><br><span class=\"line\">                                    <span class=\"comment\">// 否则用异常对象reject此Promise对象</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!invoked) &#123;</span><br><span class=\"line\">                                    reject(promise, e)</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            resolve(promise, x)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        resolve(promise, x)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;(x))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没有传 callback直接使用前一个 promise</span></span><br><span class=\"line\">        <span class=\"comment\">// 传过来的值 resolve/reject 当前 promise 对象</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            action === <span class=\"string\">'resolve'</span></span><br><span class=\"line\">                ? resolve(promise, value)</span><br><span class=\"line\">                : reject(promise, value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>我一开始是先看的<strong>剖析 Promise 之基础篇</strong>, 前半部分确实很亲民, 但是到加入 <code>hanlde</code> 和改造 <code>resolve</code> 函数 就开始懵了, 然后懵懵懂懂的去看<strong>JS Promise 的原理实现</strong>, 不过在最复杂的 <code>makeCallback</code> 函数中解释有点一笔带过的意思. 不过看了这篇帮助我理解之前的<strong>剖析 Promise 之基础篇</strong>, 就返回去看基础篇画了一遍流程图才算看懂, 里面的闭包用的太精妙了.</p>\n<blockquote>\n<p>参考文章<br><a href=\"https://tech.meituan.com/promise-insight.html\" target=\"_blank\" rel=\"noopener\">剖析 Promise 之基础篇</a><br><a href=\"http://bruce-xu.github.io/blogs/js/promise\" target=\"_blank\" rel=\"noopener\">JS Promise 的原理实现</a><br><a href=\"https://github.com/xieranmaya/blog/issues/3\" target=\"_blank\" rel=\"noopener\">剖析Promise内部结构</a></p>\n</blockquote>\n<p>Created on 2017-12-26 by Cara</p>\n"},{"title":"base64 转 blob","date":"2017-10-22T13:44:12.000Z","categorles":["笔记📒"],"_content":"\n```javascript\nvar arr = base64.split(','), mime = arr[0].match(/:(.*?);/)[1],\n    bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n    while (n--) {\n        // charCodeAt() 方法可返回指定位置的字符的 Unicode 编码\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n// 'application/octet-binary' (默认值)\nlet blob = new Blob([u8arr], { type: mime })\n```\n\n#### Base64 的编码码和解码\n使用atob 和 btoa 方法.\n\n- atob() 解码\n\n```javascript\natob(\"amF2YXNjcmlwdA==\")\n// 解码结果 \"javascript\"\n```\n\n- btoa() 编码\n\n```javascript\nwindow.btoa(javascript)\n// 转码结果 \"amF2YXNjcmlwdA==\"\n```\n\n以上两种方法对于中文是有局限性的, 解决如下:\n\n```javascript\nvar str = \"China，中国\";\n\n// 先用 encodeURI() 编码\nwindow.btoa(window.encodeURIComponent(str))\n// \"Q2hpbmElRUYlQkMlOEMlRTQlQjglQUQlRTUlOUIlQkQ=\"\n\n// atob 解码 Base64 再用 decodeURI() 解码\nwindow.decodeURIComponent(window.atob('Q2hpbmElRUYlQkMlOEMlRTQlQjglQUQlRTUlOUIlQkQ='))\n// \"China，中国\"\n```\n\nCreated on 2017-9-4 by Cara*","source":"_posts/base64-转-blob.md","raw":"---\ntitle: base64 转 blob\ndate: 2017-10-22 21:44:12\ntags:\n- JavaScript\ncategorles:\n- 笔记📒\n---\n\n```javascript\nvar arr = base64.split(','), mime = arr[0].match(/:(.*?);/)[1],\n    bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n    while (n--) {\n        // charCodeAt() 方法可返回指定位置的字符的 Unicode 编码\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n// 'application/octet-binary' (默认值)\nlet blob = new Blob([u8arr], { type: mime })\n```\n\n#### Base64 的编码码和解码\n使用atob 和 btoa 方法.\n\n- atob() 解码\n\n```javascript\natob(\"amF2YXNjcmlwdA==\")\n// 解码结果 \"javascript\"\n```\n\n- btoa() 编码\n\n```javascript\nwindow.btoa(javascript)\n// 转码结果 \"amF2YXNjcmlwdA==\"\n```\n\n以上两种方法对于中文是有局限性的, 解决如下:\n\n```javascript\nvar str = \"China，中国\";\n\n// 先用 encodeURI() 编码\nwindow.btoa(window.encodeURIComponent(str))\n// \"Q2hpbmElRUYlQkMlOEMlRTQlQjglQUQlRTUlOUIlQkQ=\"\n\n// atob 解码 Base64 再用 decodeURI() 解码\nwindow.decodeURIComponent(window.atob('Q2hpbmElRUYlQkMlOEMlRTQlQjglQUQlRTUlOUIlQkQ='))\n// \"China，中国\"\n```\n\nCreated on 2017-9-4 by Cara*","slug":"base64-转-blob","published":1,"updated":"2018-05-05T09:23:03.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolso000yklu0hc7a26bu","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = base64.split(<span class=\"string\">','</span>), mime = arr[<span class=\"number\">0</span>].match(<span class=\"regexp\">/:(.*?);/</span>)[<span class=\"number\">1</span>],</span><br><span class=\"line\">    bstr = atob(arr[<span class=\"number\">1</span>]), n = bstr.length, u8arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// charCodeAt() 方法可返回指定位置的字符的 Unicode 编码</span></span><br><span class=\"line\">        u8arr[n] = bstr.charCodeAt(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">// 'application/octet-binary' (默认值)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> blob = <span class=\"keyword\">new</span> Blob([u8arr], &#123; <span class=\"attr\">type</span>: mime &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Base64-的编码码和解码\"><a href=\"#Base64-的编码码和解码\" class=\"headerlink\" title=\"Base64 的编码码和解码\"></a>Base64 的编码码和解码</h4><p>使用atob 和 btoa 方法.</p>\n<ul>\n<li>atob() 解码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">atob(<span class=\"string\">\"amF2YXNjcmlwdA==\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 解码结果 \"javascript\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>btoa() 编码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.btoa(javascript)</span><br><span class=\"line\"><span class=\"comment\">// 转码结果 \"amF2YXNjcmlwdA==\"</span></span><br></pre></td></tr></table></figure>\n<p>以上两种方法对于中文是有局限性的, 解决如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"China，中国\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先用 encodeURI() 编码</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.btoa(<span class=\"built_in\">window</span>.encodeURIComponent(str))</span><br><span class=\"line\"><span class=\"comment\">// \"Q2hpbmElRUYlQkMlOEMlRTQlQjglQUQlRTUlOUIlQkQ=\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// atob 解码 Base64 再用 decodeURI() 解码</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.decodeURIComponent(<span class=\"built_in\">window</span>.atob(<span class=\"string\">'Q2hpbmElRUYlQkMlOEMlRTQlQjglQUQlRTUlOUIlQkQ='</span>))</span><br><span class=\"line\"><span class=\"comment\">// \"China，中国\"</span></span><br></pre></td></tr></table></figure>\n<p>Created on 2017-9-4 by Cara*</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = base64.split(<span class=\"string\">','</span>), mime = arr[<span class=\"number\">0</span>].match(<span class=\"regexp\">/:(.*?);/</span>)[<span class=\"number\">1</span>],</span><br><span class=\"line\">    bstr = atob(arr[<span class=\"number\">1</span>]), n = bstr.length, u8arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// charCodeAt() 方法可返回指定位置的字符的 Unicode 编码</span></span><br><span class=\"line\">        u8arr[n] = bstr.charCodeAt(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">// 'application/octet-binary' (默认值)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> blob = <span class=\"keyword\">new</span> Blob([u8arr], &#123; <span class=\"attr\">type</span>: mime &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Base64-的编码码和解码\"><a href=\"#Base64-的编码码和解码\" class=\"headerlink\" title=\"Base64 的编码码和解码\"></a>Base64 的编码码和解码</h4><p>使用atob 和 btoa 方法.</p>\n<ul>\n<li>atob() 解码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">atob(<span class=\"string\">\"amF2YXNjcmlwdA==\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 解码结果 \"javascript\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>btoa() 编码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.btoa(javascript)</span><br><span class=\"line\"><span class=\"comment\">// 转码结果 \"amF2YXNjcmlwdA==\"</span></span><br></pre></td></tr></table></figure>\n<p>以上两种方法对于中文是有局限性的, 解决如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"China，中国\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先用 encodeURI() 编码</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.btoa(<span class=\"built_in\">window</span>.encodeURIComponent(str))</span><br><span class=\"line\"><span class=\"comment\">// \"Q2hpbmElRUYlQkMlOEMlRTQlQjglQUQlRTUlOUIlQkQ=\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// atob 解码 Base64 再用 decodeURI() 解码</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.decodeURIComponent(<span class=\"built_in\">window</span>.atob(<span class=\"string\">'Q2hpbmElRUYlQkMlOEMlRTQlQjglQUQlRTUlOUIlQkQ='</span>))</span><br><span class=\"line\"><span class=\"comment\">// \"China，中国\"</span></span><br></pre></td></tr></table></figure>\n<p>Created on 2017-9-4 by Cara*</p>\n"},{"title":"cookie localStorage and sessionStorage","date":"2017-06-11T10:04:09.000Z","_content":"浏览器的数据缓存, 常用的三种方式cookie/localStorage/sessionStorage\n\n### 1. cookie\n\n> 全称叫做 HTTP Cookie, 通常我们直接叫做Cookie, 最初是在客户端用于存储会话信息的. 该标准要求服务器对任意 HTTP 请求发送 Set-Cookie Http 头作为响应的一部分, 其中会包含会话信息.这种 HTTP 的响应以 key-value组成的一个cookie, 且在传送中都必须是URL编码  ------**JavaScript高级程序设计**                             \n\n- Cookie 的数据大小限制不能超过4k\n- 每次 HTTP 请求都会携带 Cookie,所以Cookie只适合保存很小的数据\n- 默认 Cookie 在浏览器会话结束时将所有 Cookie删除, 也可以自己设置删除时间\n\n#### JavaScript 中的Cookie\n    \n* document.cookie 可以设置一个新的 cookie 字符串, key 和 value是必须的\n\n> `document.cookie = 'name=Cara';`\n    \n由于每次客户端向服务器发送请求的时候都会发送这个 cookie , 所以最好每次设置的时候都用`encodeURI()`进行编码, `decodeURI()`来解码\n\n### 2. localStorage\n在 HTML5 规范中作为持久保存客户端数据的方案取代了globalStorage(以域作为访问规则), 要访问同一个 localStorage 对象, 页面必须来自同一个域名(子域名无效), 使用同一种协议, 在同一个端口上. 就相当于 globalStorage[location.host].\n\n\n- 使用方法储存数据\n\n    > localStorage.setItem('name', 'Cara')\n    \n- 使用属性储存数据\n\n    > localStorage.book = 'JavaScript'\n    \n- 使用方法读取数据\n\n    > localStorage.getItem('name')\n    \n- 使用属性读取数据\n\n    > var book = localStorage.book\n\n- 删除储存数据\n\n    > localStorage.removeItem('name')\n    \n> localStorage 和 sessionStorage 虽然也有数据储存大小限制, 但比 cookie 要大很多, 可以达到5M或更大. localStorage的数据始终有效, 即使浏览器关闭也会一直保存, 所以只要不 clear() 或者 removeItem() 数据就可以永久保存\n\n### 3. sessionStorage\nsessionStorage对象储存特定于某个会话的数据, 也就是说数据只保存到浏览器关闭.\n\n* sessionStorage的用法跟localStorage的用法一样\n\n### Storage类型\nStorage 类型提供最大的储存空间 ( 因浏览器而异 ) 来储存名值对儿, 有如下方法:\n\n- clear(): 删除所有值; ( Firefox 未实现 )\n\n- getItem(name): 根据指定的名字 name 获取对应的 value\n\n- key(idnex): 获取 index 位置的值对应的名字\n\n- removeItem(name): 删除由name指定的名值对儿\n\n- setItem(name, value): 设置指定的name及对应的value\n\n>  可以只用 length 来判断有多少名值对儿存放在 Storage 对象中\n\n\n\n\n\n\n","source":"_posts/cookie-localStorage-and-sessionStorage.md","raw":"---\ntitle: cookie localStorage and sessionStorage\ndate: 2017-06-11 18:04:09\ntags: \n- JavaScript\ncategories:\n- 复习\n---\n浏览器的数据缓存, 常用的三种方式cookie/localStorage/sessionStorage\n\n### 1. cookie\n\n> 全称叫做 HTTP Cookie, 通常我们直接叫做Cookie, 最初是在客户端用于存储会话信息的. 该标准要求服务器对任意 HTTP 请求发送 Set-Cookie Http 头作为响应的一部分, 其中会包含会话信息.这种 HTTP 的响应以 key-value组成的一个cookie, 且在传送中都必须是URL编码  ------**JavaScript高级程序设计**                             \n\n- Cookie 的数据大小限制不能超过4k\n- 每次 HTTP 请求都会携带 Cookie,所以Cookie只适合保存很小的数据\n- 默认 Cookie 在浏览器会话结束时将所有 Cookie删除, 也可以自己设置删除时间\n\n#### JavaScript 中的Cookie\n    \n* document.cookie 可以设置一个新的 cookie 字符串, key 和 value是必须的\n\n> `document.cookie = 'name=Cara';`\n    \n由于每次客户端向服务器发送请求的时候都会发送这个 cookie , 所以最好每次设置的时候都用`encodeURI()`进行编码, `decodeURI()`来解码\n\n### 2. localStorage\n在 HTML5 规范中作为持久保存客户端数据的方案取代了globalStorage(以域作为访问规则), 要访问同一个 localStorage 对象, 页面必须来自同一个域名(子域名无效), 使用同一种协议, 在同一个端口上. 就相当于 globalStorage[location.host].\n\n\n- 使用方法储存数据\n\n    > localStorage.setItem('name', 'Cara')\n    \n- 使用属性储存数据\n\n    > localStorage.book = 'JavaScript'\n    \n- 使用方法读取数据\n\n    > localStorage.getItem('name')\n    \n- 使用属性读取数据\n\n    > var book = localStorage.book\n\n- 删除储存数据\n\n    > localStorage.removeItem('name')\n    \n> localStorage 和 sessionStorage 虽然也有数据储存大小限制, 但比 cookie 要大很多, 可以达到5M或更大. localStorage的数据始终有效, 即使浏览器关闭也会一直保存, 所以只要不 clear() 或者 removeItem() 数据就可以永久保存\n\n### 3. sessionStorage\nsessionStorage对象储存特定于某个会话的数据, 也就是说数据只保存到浏览器关闭.\n\n* sessionStorage的用法跟localStorage的用法一样\n\n### Storage类型\nStorage 类型提供最大的储存空间 ( 因浏览器而异 ) 来储存名值对儿, 有如下方法:\n\n- clear(): 删除所有值; ( Firefox 未实现 )\n\n- getItem(name): 根据指定的名字 name 获取对应的 value\n\n- key(idnex): 获取 index 位置的值对应的名字\n\n- removeItem(name): 删除由name指定的名值对儿\n\n- setItem(name, value): 设置指定的name及对应的value\n\n>  可以只用 length 来判断有多少名值对儿存放在 Storage 对象中\n\n\n\n\n\n\n","slug":"cookie-localStorage-and-sessionStorage","published":1,"updated":"2018-05-05T09:23:03.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolsq0012klu08ssdd3n3","content":"<p>浏览器的数据缓存, 常用的三种方式cookie/localStorage/sessionStorage</p>\n<h3 id=\"1-cookie\"><a href=\"#1-cookie\" class=\"headerlink\" title=\"1. cookie\"></a>1. cookie</h3><blockquote>\n<p>全称叫做 HTTP Cookie, 通常我们直接叫做Cookie, 最初是在客户端用于存储会话信息的. 该标准要求服务器对任意 HTTP 请求发送 Set-Cookie Http 头作为响应的一部分, 其中会包含会话信息.这种 HTTP 的响应以 key-value组成的一个cookie, 且在传送中都必须是URL编码  ——<strong>JavaScript高级程序设计</strong>                             </p>\n</blockquote>\n<ul>\n<li>Cookie 的数据大小限制不能超过4k</li>\n<li>每次 HTTP 请求都会携带 Cookie,所以Cookie只适合保存很小的数据</li>\n<li>默认 Cookie 在浏览器会话结束时将所有 Cookie删除, 也可以自己设置删除时间</li>\n</ul>\n<h4 id=\"JavaScript-中的Cookie\"><a href=\"#JavaScript-中的Cookie\" class=\"headerlink\" title=\"JavaScript 中的Cookie\"></a>JavaScript 中的Cookie</h4><ul>\n<li>document.cookie 可以设置一个新的 cookie 字符串, key 和 value是必须的</li>\n</ul>\n<blockquote>\n<p><code>document.cookie = &#39;name=Cara&#39;;</code></p>\n</blockquote>\n<p>由于每次客户端向服务器发送请求的时候都会发送这个 cookie , 所以最好每次设置的时候都用<code>encodeURI()</code>进行编码, <code>decodeURI()</code>来解码</p>\n<h3 id=\"2-localStorage\"><a href=\"#2-localStorage\" class=\"headerlink\" title=\"2. localStorage\"></a>2. localStorage</h3><p>在 HTML5 规范中作为持久保存客户端数据的方案取代了globalStorage(以域作为访问规则), 要访问同一个 localStorage 对象, 页面必须来自同一个域名(子域名无效), 使用同一种协议, 在同一个端口上. 就相当于 globalStorage[location.host].</p>\n<ul>\n<li><p>使用方法储存数据</p>\n<blockquote>\n<p>localStorage.setItem(‘name’, ‘Cara’)</p>\n</blockquote>\n</li>\n<li><p>使用属性储存数据</p>\n<blockquote>\n<p>localStorage.book = ‘JavaScript’</p>\n</blockquote>\n</li>\n<li><p>使用方法读取数据</p>\n<blockquote>\n<p>localStorage.getItem(‘name’)</p>\n</blockquote>\n</li>\n<li><p>使用属性读取数据</p>\n<blockquote>\n<p>var book = localStorage.book</p>\n</blockquote>\n</li>\n<li><p>删除储存数据</p>\n<blockquote>\n<p>localStorage.removeItem(‘name’)</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>localStorage 和 sessionStorage 虽然也有数据储存大小限制, 但比 cookie 要大很多, 可以达到5M或更大. localStorage的数据始终有效, 即使浏览器关闭也会一直保存, 所以只要不 clear() 或者 removeItem() 数据就可以永久保存</p>\n</blockquote>\n<h3 id=\"3-sessionStorage\"><a href=\"#3-sessionStorage\" class=\"headerlink\" title=\"3. sessionStorage\"></a>3. sessionStorage</h3><p>sessionStorage对象储存特定于某个会话的数据, 也就是说数据只保存到浏览器关闭.</p>\n<ul>\n<li>sessionStorage的用法跟localStorage的用法一样</li>\n</ul>\n<h3 id=\"Storage类型\"><a href=\"#Storage类型\" class=\"headerlink\" title=\"Storage类型\"></a>Storage类型</h3><p>Storage 类型提供最大的储存空间 ( 因浏览器而异 ) 来储存名值对儿, 有如下方法:</p>\n<ul>\n<li><p>clear(): 删除所有值; ( Firefox 未实现 )</p>\n</li>\n<li><p>getItem(name): 根据指定的名字 name 获取对应的 value</p>\n</li>\n<li><p>key(idnex): 获取 index 位置的值对应的名字</p>\n</li>\n<li><p>removeItem(name): 删除由name指定的名值对儿</p>\n</li>\n<li><p>setItem(name, value): 设置指定的name及对应的value</p>\n</li>\n</ul>\n<blockquote>\n<p> 可以只用 length 来判断有多少名值对儿存放在 Storage 对象中</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>浏览器的数据缓存, 常用的三种方式cookie/localStorage/sessionStorage</p>\n<h3 id=\"1-cookie\"><a href=\"#1-cookie\" class=\"headerlink\" title=\"1. cookie\"></a>1. cookie</h3><blockquote>\n<p>全称叫做 HTTP Cookie, 通常我们直接叫做Cookie, 最初是在客户端用于存储会话信息的. 该标准要求服务器对任意 HTTP 请求发送 Set-Cookie Http 头作为响应的一部分, 其中会包含会话信息.这种 HTTP 的响应以 key-value组成的一个cookie, 且在传送中都必须是URL编码  ——<strong>JavaScript高级程序设计</strong>                             </p>\n</blockquote>\n<ul>\n<li>Cookie 的数据大小限制不能超过4k</li>\n<li>每次 HTTP 请求都会携带 Cookie,所以Cookie只适合保存很小的数据</li>\n<li>默认 Cookie 在浏览器会话结束时将所有 Cookie删除, 也可以自己设置删除时间</li>\n</ul>\n<h4 id=\"JavaScript-中的Cookie\"><a href=\"#JavaScript-中的Cookie\" class=\"headerlink\" title=\"JavaScript 中的Cookie\"></a>JavaScript 中的Cookie</h4><ul>\n<li>document.cookie 可以设置一个新的 cookie 字符串, key 和 value是必须的</li>\n</ul>\n<blockquote>\n<p><code>document.cookie = &#39;name=Cara&#39;;</code></p>\n</blockquote>\n<p>由于每次客户端向服务器发送请求的时候都会发送这个 cookie , 所以最好每次设置的时候都用<code>encodeURI()</code>进行编码, <code>decodeURI()</code>来解码</p>\n<h3 id=\"2-localStorage\"><a href=\"#2-localStorage\" class=\"headerlink\" title=\"2. localStorage\"></a>2. localStorage</h3><p>在 HTML5 规范中作为持久保存客户端数据的方案取代了globalStorage(以域作为访问规则), 要访问同一个 localStorage 对象, 页面必须来自同一个域名(子域名无效), 使用同一种协议, 在同一个端口上. 就相当于 globalStorage[location.host].</p>\n<ul>\n<li><p>使用方法储存数据</p>\n<blockquote>\n<p>localStorage.setItem(‘name’, ‘Cara’)</p>\n</blockquote>\n</li>\n<li><p>使用属性储存数据</p>\n<blockquote>\n<p>localStorage.book = ‘JavaScript’</p>\n</blockquote>\n</li>\n<li><p>使用方法读取数据</p>\n<blockquote>\n<p>localStorage.getItem(‘name’)</p>\n</blockquote>\n</li>\n<li><p>使用属性读取数据</p>\n<blockquote>\n<p>var book = localStorage.book</p>\n</blockquote>\n</li>\n<li><p>删除储存数据</p>\n<blockquote>\n<p>localStorage.removeItem(‘name’)</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>localStorage 和 sessionStorage 虽然也有数据储存大小限制, 但比 cookie 要大很多, 可以达到5M或更大. localStorage的数据始终有效, 即使浏览器关闭也会一直保存, 所以只要不 clear() 或者 removeItem() 数据就可以永久保存</p>\n</blockquote>\n<h3 id=\"3-sessionStorage\"><a href=\"#3-sessionStorage\" class=\"headerlink\" title=\"3. sessionStorage\"></a>3. sessionStorage</h3><p>sessionStorage对象储存特定于某个会话的数据, 也就是说数据只保存到浏览器关闭.</p>\n<ul>\n<li>sessionStorage的用法跟localStorage的用法一样</li>\n</ul>\n<h3 id=\"Storage类型\"><a href=\"#Storage类型\" class=\"headerlink\" title=\"Storage类型\"></a>Storage类型</h3><p>Storage 类型提供最大的储存空间 ( 因浏览器而异 ) 来储存名值对儿, 有如下方法:</p>\n<ul>\n<li><p>clear(): 删除所有值; ( Firefox 未实现 )</p>\n</li>\n<li><p>getItem(name): 根据指定的名字 name 获取对应的 value</p>\n</li>\n<li><p>key(idnex): 获取 index 位置的值对应的名字</p>\n</li>\n<li><p>removeItem(name): 删除由name指定的名值对儿</p>\n</li>\n<li><p>setItem(name, value): 设置指定的name及对应的value</p>\n</li>\n</ul>\n<blockquote>\n<p> 可以只用 length 来判断有多少名值对儿存放在 Storage 对象中</p>\n</blockquote>\n"},{"title":"关于将Node.js部署在IIS服务器","date":"2017-05-28T12:57:06.000Z","_content":"\n### 起因\n在工作临时遇到后台管理系统需要用到Node.js做中转服务, 达到即时通讯的目的.\n\n由于刚刚转行基础实在太差, 在此做下记录.\n\n### 依赖项\n\n* Node.js\n\n* [URL rewrite](http://www.iis.net/download/URLRewrite)\n\n* [IISNode](http://go.microsoft.com/?linkid=9784334)\n\n### 资源\n\n[GitHub资料](https://github.com/tjanczuk/iisnode)\n\n### 使用\n\n* #### 安装`URL rewrite` 时, 可能会出现安装失败, 需要改下注册表.\n\t\n```\n\t打开注册表编辑器(win + r `regedit`)，在HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\InetStp位置\n\n把MajorVersion的值改为9之后，就可以安装了，安装完成之后，再把MajorVersion的值改回10，重启一下iis\n\n```\n\n* #### 安装IISNode\n\t一路`下一步`就行\n\n* #### 配置`web.config`文件\n```\n<configuration>\n\t<system.webServer>\n\t\t\n\t\t<!--indicates that the app.js file is a node.js application\n\t\t\tto be handled by the iisnode module -->\n\t\t<handlers>\n\t\t\t<add name=\"iisnode\" path=\"app.js\" verb=\"*\" modules=\"iisnode\" />\n\t\t</handlers>\n\n\t\t<rewrite>\n\t\t\t<rules>\n\t\t\t\t<rule name=\"SendToNode\" patternSyntax=\"ECMAScript\">\n\t\t\t\t\t<match url=\"/*\" />\n\t\t\t\t\t<action type=\"Rewrite\" url=\"app.js\" />\n\t\t\t\t</rule>\n\t\t\t</rules>\n\t\t</rewrite>\n\t\t<webSocket enabled=\"false\"/>\n\t</system.webServer>\n</configuration>\n```\n\n* #### 部署\n\t在iis部署之后会自动生成一个iisnode文件夹, 里面存储debug信息,\n\n因为部署在iis之后, 同时启动Node会报错或者不会打印任何东西.\n\n\n\n\n","source":"_posts/iisNode.md","raw":"---\ntitle: 关于将Node.js部署在IIS服务器\ndate: 2017-05-28 20:57:06\ntags: \n- JavaScript \n- Node.js\ncategories:\n- 笔记📒\n---\n\n### 起因\n在工作临时遇到后台管理系统需要用到Node.js做中转服务, 达到即时通讯的目的.\n\n由于刚刚转行基础实在太差, 在此做下记录.\n\n### 依赖项\n\n* Node.js\n\n* [URL rewrite](http://www.iis.net/download/URLRewrite)\n\n* [IISNode](http://go.microsoft.com/?linkid=9784334)\n\n### 资源\n\n[GitHub资料](https://github.com/tjanczuk/iisnode)\n\n### 使用\n\n* #### 安装`URL rewrite` 时, 可能会出现安装失败, 需要改下注册表.\n\t\n```\n\t打开注册表编辑器(win + r `regedit`)，在HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\InetStp位置\n\n把MajorVersion的值改为9之后，就可以安装了，安装完成之后，再把MajorVersion的值改回10，重启一下iis\n\n```\n\n* #### 安装IISNode\n\t一路`下一步`就行\n\n* #### 配置`web.config`文件\n```\n<configuration>\n\t<system.webServer>\n\t\t\n\t\t<!--indicates that the app.js file is a node.js application\n\t\t\tto be handled by the iisnode module -->\n\t\t<handlers>\n\t\t\t<add name=\"iisnode\" path=\"app.js\" verb=\"*\" modules=\"iisnode\" />\n\t\t</handlers>\n\n\t\t<rewrite>\n\t\t\t<rules>\n\t\t\t\t<rule name=\"SendToNode\" patternSyntax=\"ECMAScript\">\n\t\t\t\t\t<match url=\"/*\" />\n\t\t\t\t\t<action type=\"Rewrite\" url=\"app.js\" />\n\t\t\t\t</rule>\n\t\t\t</rules>\n\t\t</rewrite>\n\t\t<webSocket enabled=\"false\"/>\n\t</system.webServer>\n</configuration>\n```\n\n* #### 部署\n\t在iis部署之后会自动生成一个iisnode文件夹, 里面存储debug信息,\n\n因为部署在iis之后, 同时启动Node会报错或者不会打印任何东西.\n\n\n\n\n","slug":"iisNode","published":1,"updated":"2018-05-05T09:23:03.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolsr0015klu00d8fgzcq","content":"<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>在工作临时遇到后台管理系统需要用到Node.js做中转服务, 达到即时通讯的目的.</p>\n<p>由于刚刚转行基础实在太差, 在此做下记录.</p>\n<h3 id=\"依赖项\"><a href=\"#依赖项\" class=\"headerlink\" title=\"依赖项\"></a>依赖项</h3><ul>\n<li><p>Node.js</p>\n</li>\n<li><p><a href=\"http://www.iis.net/download/URLRewrite\" target=\"_blank\" rel=\"noopener\">URL rewrite</a></p>\n</li>\n<li><p><a href=\"http://go.microsoft.com/?linkid=9784334\" target=\"_blank\" rel=\"noopener\">IISNode</a></p>\n</li>\n</ul>\n<h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><p><a href=\"https://github.com/tjanczuk/iisnode\" target=\"_blank\" rel=\"noopener\">GitHub资料</a></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li><h4 id=\"安装URL-rewrite-时-可能会出现安装失败-需要改下注册表\"><a href=\"#安装URL-rewrite-时-可能会出现安装失败-需要改下注册表\" class=\"headerlink\" title=\"安装URL rewrite 时, 可能会出现安装失败, 需要改下注册表.\"></a>安装<code>URL rewrite</code> 时, 可能会出现安装失败, 需要改下注册表.</h4></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t打开注册表编辑器(win + r `regedit`)，在HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\InetStp位置</span><br><span class=\"line\"></span><br><span class=\"line\">把MajorVersion的值改为9之后，就可以安装了，安装完成之后，再把MajorVersion的值改回10，重启一下iis</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"安装IISNode\"><a href=\"#安装IISNode\" class=\"headerlink\" title=\"安装IISNode\"></a>安装IISNode</h4><p>  一路<code>下一步</code>就行</p>\n</li>\n<li><h4 id=\"配置web-config文件\"><a href=\"#配置web-config文件\" class=\"headerlink\" title=\"配置web.config文件\"></a>配置<code>web.config</code>文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">\t&lt;system.webServer&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&lt;!--indicates that the app.js file is a node.js application</span><br><span class=\"line\">\t\t\tto be handled by the iisnode module --&gt;</span><br><span class=\"line\">\t\t&lt;handlers&gt;</span><br><span class=\"line\">\t\t\t&lt;add name=&quot;iisnode&quot; path=&quot;app.js&quot; verb=&quot;*&quot; modules=&quot;iisnode&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/handlers&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;rewrite&gt;</span><br><span class=\"line\">\t\t\t&lt;rules&gt;</span><br><span class=\"line\">\t\t\t\t&lt;rule name=&quot;SendToNode&quot; patternSyntax=&quot;ECMAScript&quot;&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;match url=&quot;/*&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;action type=&quot;Rewrite&quot; url=&quot;app.js&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/rule&gt;</span><br><span class=\"line\">\t\t\t&lt;/rules&gt;</span><br><span class=\"line\">\t\t&lt;/rewrite&gt;</span><br><span class=\"line\">\t\t&lt;webSocket enabled=&quot;false&quot;/&gt;</span><br><span class=\"line\">\t&lt;/system.webServer&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>  在iis部署之后会自动生成一个iisnode文件夹, 里面存储debug信息,</p>\n</li>\n</ul>\n<p>因为部署在iis之后, 同时启动Node会报错或者不会打印任何东西.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>在工作临时遇到后台管理系统需要用到Node.js做中转服务, 达到即时通讯的目的.</p>\n<p>由于刚刚转行基础实在太差, 在此做下记录.</p>\n<h3 id=\"依赖项\"><a href=\"#依赖项\" class=\"headerlink\" title=\"依赖项\"></a>依赖项</h3><ul>\n<li><p>Node.js</p>\n</li>\n<li><p><a href=\"http://www.iis.net/download/URLRewrite\" target=\"_blank\" rel=\"noopener\">URL rewrite</a></p>\n</li>\n<li><p><a href=\"http://go.microsoft.com/?linkid=9784334\" target=\"_blank\" rel=\"noopener\">IISNode</a></p>\n</li>\n</ul>\n<h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><p><a href=\"https://github.com/tjanczuk/iisnode\" target=\"_blank\" rel=\"noopener\">GitHub资料</a></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li><h4 id=\"安装URL-rewrite-时-可能会出现安装失败-需要改下注册表\"><a href=\"#安装URL-rewrite-时-可能会出现安装失败-需要改下注册表\" class=\"headerlink\" title=\"安装URL rewrite 时, 可能会出现安装失败, 需要改下注册表.\"></a>安装<code>URL rewrite</code> 时, 可能会出现安装失败, 需要改下注册表.</h4></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t打开注册表编辑器(win + r `regedit`)，在HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\InetStp位置</span><br><span class=\"line\"></span><br><span class=\"line\">把MajorVersion的值改为9之后，就可以安装了，安装完成之后，再把MajorVersion的值改回10，重启一下iis</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"安装IISNode\"><a href=\"#安装IISNode\" class=\"headerlink\" title=\"安装IISNode\"></a>安装IISNode</h4><p>  一路<code>下一步</code>就行</p>\n</li>\n<li><h4 id=\"配置web-config文件\"><a href=\"#配置web-config文件\" class=\"headerlink\" title=\"配置web.config文件\"></a>配置<code>web.config</code>文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">\t&lt;system.webServer&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&lt;!--indicates that the app.js file is a node.js application</span><br><span class=\"line\">\t\t\tto be handled by the iisnode module --&gt;</span><br><span class=\"line\">\t\t&lt;handlers&gt;</span><br><span class=\"line\">\t\t\t&lt;add name=&quot;iisnode&quot; path=&quot;app.js&quot; verb=&quot;*&quot; modules=&quot;iisnode&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/handlers&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;rewrite&gt;</span><br><span class=\"line\">\t\t\t&lt;rules&gt;</span><br><span class=\"line\">\t\t\t\t&lt;rule name=&quot;SendToNode&quot; patternSyntax=&quot;ECMAScript&quot;&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;match url=&quot;/*&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;action type=&quot;Rewrite&quot; url=&quot;app.js&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/rule&gt;</span><br><span class=\"line\">\t\t\t&lt;/rules&gt;</span><br><span class=\"line\">\t\t&lt;/rewrite&gt;</span><br><span class=\"line\">\t\t&lt;webSocket enabled=&quot;false&quot;/&gt;</span><br><span class=\"line\">\t&lt;/system.webServer&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>  在iis部署之后会自动生成一个iisnode文件夹, 里面存储debug信息,</p>\n</li>\n</ul>\n<p>因为部署在iis之后, 同时启动Node会报错或者不会打印任何东西.</p>\n"},{"title":"this/ call and apply","date":"2017-10-17T15:01:38.000Z","_content":"在 JavaScript 中, `this `关键字很容易使大家疑惑, 再加上 `Function.prototype.call`和`Function.prototype.apply`这两个方法的广泛运用, 所以很有必要弄清`this`的使用.\n\n>  ### this\n> 首先先说一下`this`的概念: `this`总是指向一个对象, 而这个对象具体是谁, 是根据运行时的函数执行的环境动态绑定的, 而非函数被声明时的环境. 当然到现在箭头函数的出现, `this`对不了解的同学们来说, 无疑是添了一把乱… 接下来我们一个一个的来说吧.\n\n#### 1. `this`的指向\n我们除开不常用的 with 和 eval 的情况, 具体到实际应用中, `this`的指向大致可以分为以下四种情况.\n\n- 作为对象的方法被调用\n- 作为普通函数被调用\n- 构造器调用\n- 被 call 和 apply 方法调用\n下面来用 < JavaScript 设计模式 > 中的例子说明这四种情况.\n\n    1. 作为对象方法调用\n    当函数作为对象的方法被调用时, `this`指向该对象:\n```javascript\nlet name = 'window';\nlet obj = {\n    name: 'cara',\n    getName: function () {\n        console.log(this === obj)\n        console.log(this.name)\n    }\n}\nobj.getName() // true 'cara'\n```\n\n    2. 作为普通函数调用\n    当函数不作为对象的方法被调用时, 也就是我们平常说的普通函数的方式, 此时的`this`总是指向全局对象.\n```javascript\nwindow.name = 'window';\nlet getName = function () {\n    return this.name\n}\nconsole.log(getName()) // 'window'\n\n// 或者\n\nwindow.name = 'window';\nlet obj = {\n    name: 'obj',\n    getName: function () {\n        return this.name\n    }\n}\n// 这里 obj 的 getName方法赋值给了一个变量\n// 调用的时候就只会作为一个普通函数调用\nlet getName = obj.gatName;\nconsole.log(getName()) // 'window'\n```\n    上面这中作为普通函数调用的方式常常会带来一些困扰, 比如在某个 div 节点的事件函数中, 定义了一个局部的 callback 方法. 而这个 callback 方法我们往往是想让它的 `this`指向 div 节点, 但它内部却指向`window`. 如:\n```html\n<div id='div1'>我是一个 div</div>\n```\n    ```javascript\n        window.id = 'window';\n        document.getElementById('div1').onclick = function () {\n            console.log(this.id); // 'div1'\n            let callback = function (){\n                console.log(this.id); // 'window'\t\n            }\n            callback() // 作为普通函数被调用\n        }\n    ```\n    要解决以上问题其实也很简单, 如下:\n```javascript\nwindow.id = 'window';\ndocument.getElementById('div1').onclick = function () {\n    console.log(this.id);\n    let that = this; // 用一个变量来储存节点的引用\n    let callback = function (){\n        console.log(that.id); // 'div1'\t\n    }\n    callback() // 作为普通函数被调用\n}\n```\n    3. 构造器调用\n    先说说构造器吧, js 中没有类的概念, 但是可以从构造器中创建对象, 同时提供 `new` 运算符, 让构造器看起来更像一个类. Js 中大部分函数都可以当做构造器来使用, 所以它的外表看起来跟普通函数一样, 区别在于被调用的方式. 当用 `new` 运算符调用时, 该函数会返回一个对象. 通常情况下, 构造器里的 `this` 就指向返回的这个对象, 如下:\n```javascript\nconst Myobj = function () {\n    this.name = 'cara';\n}\n\nlet obj = new Myobj();\nconsole.log(obj.name); // 'cara'\n```\n    但是使用 `new`调用构造器时, 要注意一个问题. 如果构造器显式地返回了一个对象, 那么最终就会返回这个对象, 而不是我们的期望的 `this`:\n```javascript\nconst Myobj = function () {\n    this.name = 'cara';\n    return {\n        name: 'somebody'\n    }\n}\n\nlet obj = new Myobj();\nconsole.log(obj.name); // 'somebody'\n```\n    如果构造器不显式地返回任何数据或是返回一个非对象类型的数据, 就不会出现上述情况\n\n    4. call 或 apply 方法调用\n    跟普通的函数调用相比, 用 call 或者 apply 方法调用可以动态地改变传入函数的 `this`:\n```javascript\nlet obj1 = {\n    name: 'cara',\n    getName: function () {\n        return this.name\n    }\n};\n\nlet obj2 = {\n    name: 'ben'\n};\n\nconsole.log(obj1.name); // 'cara'\nconsole.log(obj1.name.call(obj2)); // 'ben'\n```\n    call 和 apply 方法能够很好的体现 js 的函数式语言特性. 在 js 中几乎每一次编写函数式语言风格的代码都离不开 call 和 apply.\n\n#### 2. 丢失的 this\n这是一个经常遇到的问题, 在刚刚开始学习 js 时,`this`的指向常常令我疑惑, 尤其是看到网上关于`this`指向的题目, 简直云里雾里. 下面就来看一些例子吧!\n\n```javascript\nconst obj = {\n    name: 'apple',\n    getName: function () {\n        return this.name;\n    }\n}\n\nconsole.log(obj.getName()); // 'apple'\nlet getMyName = obj.getName;\nconsole.log(getMyName()); // undefined\n```\n上面这个例子好理解, 就是通过一个变量来引用`obj.getName`方法, 并且调用 getMyName 时, 就是用的普通函数调用方式, `this`是指向全局 window 的.\n\n    接下来再来看一个稍微复杂一点的例子吧:\n```javascript\nlet name = 'window';\nconst person = {\n    name: 'person',\n    showName1: function () {\n        console.log(this.name)\n    },\n    showName2: _ => console.log(this.name),\n    showName3: function () {\n        return function () {\n            console.log(this.name)\n        }\n    },\n    showName4: function () {\n        return _ => console.log(this.name)\n    }\n};\nconst person2 = {name: 'person2'};\n\nperson.showName1();\nperson.showName1().call(person2);\n\nperson.showName2();\nperson.showName2().call(person2);\n\nperson.showName3()();\nperson.showName3().call(person2);\nperson.showName3.call(person2)();\n\nperson.showName4()();\nperson.showName4().call(person2);\nperson.showName4.call(person2)();\n```\n这个例子可能大家已经很眼熟了, 不过当时我第一次做的时候几乎错了一大半😒…. 现在再拿出来看看其实还是很经典的: 在 person 和 person2 之间疯狂玩 showName 方法. 在给出答案之前我们先看看箭头函数的一些特点:\n\n- 箭头函数不可用作构造函数.\n- 不可以使用 `arguments`对象, 如果要用可以使用 rest 参数代替.\n- 不能使用`yield`命令, 所以箭头函数也不能作为 Generator 函数.\n- 箭头函数的`this`是定义时所在的对象, 而不是执行时所在的对象.\n\n    在最后一点的`this`指向上, 我个人觉得有点误导(也可能是我没理解到位)… 因为如果在对象字面量中的方法是通过箭头函数定义的话, `this`的指向就会和你期望的不一样了. \n\n```javascript\nlet name = 'window'\nlet obj = {\n    name: 'obj',\n    getName: _ => console.log(this.name)\n}\nobj.getName(); // 'window'\n```\n所以我觉得关于理解箭头函数`this`在定义时所在的对象是这样: `this`继承自父级的执行上下文(简单对象即非函数, 是没有执行上下文的), 所以上面例子就是 getName 方法的父级是 obj, 而 obj 的执行上下文是`window`, 因此输出全局对象的 name. 理解了关于箭头函数`this`的指向, 现在再来看看答案吧:\n\n```javascript\nperson.showName1(); // 'person'\nperson.showName1().call(person2); //  'person2'\n\nperson.showName2(); // 'window'\nperson.showName2().call(person2); // 'window'\n\nperson.showName3()(); // 'window'\nperson.showName3().call(person2); // 'person2'\nperson.showName3.call(person2)(); // 'window'\n\nperson.showName4()(); // 'person'\nperson.showName4().call(person2); // 'person'\nperson.showName4.call(person2)(); // 'perons2'\n```\n\n然后来分析一下答案吧:\n- 调用 showName1() \n这两个方式好理解, 第一种是通过 person 对象来调用的 showName1 方法, 也就是上面我们说过的**作为对象的方法被调用**, 所以`this`自然指向的是person 对象; 第二种是**被 call 和 apply 方法调用**, 所以`this`指向的是被 call 方法矫正的 person2.\n\n- 调用 showName2()\nshowName2 方法是一个箭头函数, 根据我们之前说过的箭头函数指向问题来看. 第一种通过 person 对象来调用, 由于 person 是一个简单对象所以这里它的执行上下文就是`window`, 那么就是作为普通函数调用, `this`指向 `window`; 第二种跟第一种是相同的调用方式, 只是把 person 对象换为 person2.\n\n- 调用 showName3()\nPerson.showName3 是一个高阶函数, 返回了一个匿名函数. 第一种方式相当于直接调用那个匿名函数执行环境就是`window`, 所以`this`指向`window`; 第二种方式通过 person2 来调用 person 的高阶函数, 输出 person2; 第三种先通过 person2 调用 person 的高阶函数, 然后在全局作用域下执行, 因此`this`指向`window`.\n\n- 调用 showName4()\n最后这三组调用也是高阶函数, 不过返回的匿名函数用的箭头函数. 前两种方式也就印证了我们之前所说的**箭头函数的 this 继承自父级执行上下文**, 所以前两种都输出 person, 就算第二种方式后面用 call 方法来矫正也是不行的; 第三种也就是通过 person2 来调用执行的 showName4 方法, 自然也就输出 person2 啦.\n \n> ### call 和 apply\nFunction.prototype.call() 和 Function.prototype.apply() 都是非常常用的方法, 在实际开发中和 JavaScript 的设计模式中这两个方法应用广泛. 其实它们的作用是一样的, 只是有传入参数形式不同的区别.\n\n- apply\napply 方法接收两个参数: 第一个参数指定函数体中 `this`的指向; 第二个参数为一个带下标的合集(可以是数组或者类数组), 这个参数将会传递给被调用的函数.\n```javascript\nlet fn = function (a, b, c) {\n\tconsole.log(a, b, c); // 1 2 3\n}\n// 第一个参数为 null 的话, 表示不改变 this 的指向\nfn.apply(null, [1, 2, 3]); \n```\n- call\ncall 方法的第一个参数和 apply 方法一样, 指定`this`的指向; 第二个参数不同, call 方法的第二个参数的数量不固定, 从第二参数开始一次按顺序传递给被调用的函数.\n```javascript\nlet fn = function (a, b, c) {\n\tconsole.log(a, b, c); // 1 2 3\n}\nfn.call(null, 1, 2, 3)\n```\n\n在我们不关心具体有多少参数被传入函数时, 就可以使用 apply 方法一股脑推过去就行了; 当我们明确的知道有多少参数, 想一目了然的表达形参和实参的对应关系时, 那么就可以用 call 方法.\n\n- 借用其他对象的方法\ncall 和 apply 经常被用来借用其他对象的方法, 常用的就有借用`Array`的方法来操作`arguments`或者借用构造函数来实现一些类似继承的效果.\n\t\n    1. 借用构造函数\n```javascript\nlet A = function (name) {\n\tthis.name = name\n};\n// 借用构造函数 A\nlet B = function () {\n\tA.apply(this, arguments)\n};\nB.prototype.getName = function () {\n\treturn this.name\n}\n\nlet b = new B('cara');\nconsole.log(b.getName); // 'cara'\n```\n    2. 借用 Array 的方法\n```javascript\n(function () {\n\tArray.prototype.push.call(arguments, 3);\n\tconsole.log(arguments); // {'0': 1, '1': 2, '2': 3}\n})(1, 2)\n```\n借用的时候要保证两个必要条件: 1. 对象本身要可以存取属性; 2. 对象的 length 属性可读写.\n> ### Function.prototype.bind\n绑定函数 bind 也是可以用作矫正 `this`的指向, bind 函数会创建一个新的函数(绑定函数), 新函数和目标函数将拥有相同的函数体. 第一个参数绑定`this`的指向, 从第二参数起后面的参数将作为实参绑定到目标函数的形参.\n\n```javascript\nlet sum = function (a, b) {\n\treturn a + b;\n};\nlet result = sum.bind(null, 1); // 1 将作为实参传入 sum\nconsole.log(result(2)); // 3\n```\n\n> 另外当 bind 返回的函数作为构造函数使用的话, 绑定的`this`将被忽略, 实参传入目标函数.\n\n```javascript\nlet original = function (x) {\n\tthis.a = 1;\n\tthis.b = function () {\n\t\treturn this.a + x\n\t}\n};\n\nlet obj = {\n\ta: 2\n};\n\nlet newObj = new (original.bind(obj, 2));\nconsole.log(newObj.a); // 1 => this 的指向被忽略\nconsole.log(newObj.b()); // 3 => 2 被传入 original\n```\ncall 和 apply 方法都是改变`this`指向后立即执行而 bind 可以在你想执行的\n时候再执行.\n\n差不多就到这儿吧, 要是有补充再接着写…\n\nCreated on 2017-10-17 by Cara\n\n","source":"_posts/this-call-and-apply.md","raw":"---\ntitle: this/ call and apply\ndate: 2017-10-17 23:01:38\ntags:\n- JavaScript\ncategories:\n- 笔记📒\n- JavaScript设计模式\n---\n在 JavaScript 中, `this `关键字很容易使大家疑惑, 再加上 `Function.prototype.call`和`Function.prototype.apply`这两个方法的广泛运用, 所以很有必要弄清`this`的使用.\n\n>  ### this\n> 首先先说一下`this`的概念: `this`总是指向一个对象, 而这个对象具体是谁, 是根据运行时的函数执行的环境动态绑定的, 而非函数被声明时的环境. 当然到现在箭头函数的出现, `this`对不了解的同学们来说, 无疑是添了一把乱… 接下来我们一个一个的来说吧.\n\n#### 1. `this`的指向\n我们除开不常用的 with 和 eval 的情况, 具体到实际应用中, `this`的指向大致可以分为以下四种情况.\n\n- 作为对象的方法被调用\n- 作为普通函数被调用\n- 构造器调用\n- 被 call 和 apply 方法调用\n下面来用 < JavaScript 设计模式 > 中的例子说明这四种情况.\n\n    1. 作为对象方法调用\n    当函数作为对象的方法被调用时, `this`指向该对象:\n```javascript\nlet name = 'window';\nlet obj = {\n    name: 'cara',\n    getName: function () {\n        console.log(this === obj)\n        console.log(this.name)\n    }\n}\nobj.getName() // true 'cara'\n```\n\n    2. 作为普通函数调用\n    当函数不作为对象的方法被调用时, 也就是我们平常说的普通函数的方式, 此时的`this`总是指向全局对象.\n```javascript\nwindow.name = 'window';\nlet getName = function () {\n    return this.name\n}\nconsole.log(getName()) // 'window'\n\n// 或者\n\nwindow.name = 'window';\nlet obj = {\n    name: 'obj',\n    getName: function () {\n        return this.name\n    }\n}\n// 这里 obj 的 getName方法赋值给了一个变量\n// 调用的时候就只会作为一个普通函数调用\nlet getName = obj.gatName;\nconsole.log(getName()) // 'window'\n```\n    上面这中作为普通函数调用的方式常常会带来一些困扰, 比如在某个 div 节点的事件函数中, 定义了一个局部的 callback 方法. 而这个 callback 方法我们往往是想让它的 `this`指向 div 节点, 但它内部却指向`window`. 如:\n```html\n<div id='div1'>我是一个 div</div>\n```\n    ```javascript\n        window.id = 'window';\n        document.getElementById('div1').onclick = function () {\n            console.log(this.id); // 'div1'\n            let callback = function (){\n                console.log(this.id); // 'window'\t\n            }\n            callback() // 作为普通函数被调用\n        }\n    ```\n    要解决以上问题其实也很简单, 如下:\n```javascript\nwindow.id = 'window';\ndocument.getElementById('div1').onclick = function () {\n    console.log(this.id);\n    let that = this; // 用一个变量来储存节点的引用\n    let callback = function (){\n        console.log(that.id); // 'div1'\t\n    }\n    callback() // 作为普通函数被调用\n}\n```\n    3. 构造器调用\n    先说说构造器吧, js 中没有类的概念, 但是可以从构造器中创建对象, 同时提供 `new` 运算符, 让构造器看起来更像一个类. Js 中大部分函数都可以当做构造器来使用, 所以它的外表看起来跟普通函数一样, 区别在于被调用的方式. 当用 `new` 运算符调用时, 该函数会返回一个对象. 通常情况下, 构造器里的 `this` 就指向返回的这个对象, 如下:\n```javascript\nconst Myobj = function () {\n    this.name = 'cara';\n}\n\nlet obj = new Myobj();\nconsole.log(obj.name); // 'cara'\n```\n    但是使用 `new`调用构造器时, 要注意一个问题. 如果构造器显式地返回了一个对象, 那么最终就会返回这个对象, 而不是我们的期望的 `this`:\n```javascript\nconst Myobj = function () {\n    this.name = 'cara';\n    return {\n        name: 'somebody'\n    }\n}\n\nlet obj = new Myobj();\nconsole.log(obj.name); // 'somebody'\n```\n    如果构造器不显式地返回任何数据或是返回一个非对象类型的数据, 就不会出现上述情况\n\n    4. call 或 apply 方法调用\n    跟普通的函数调用相比, 用 call 或者 apply 方法调用可以动态地改变传入函数的 `this`:\n```javascript\nlet obj1 = {\n    name: 'cara',\n    getName: function () {\n        return this.name\n    }\n};\n\nlet obj2 = {\n    name: 'ben'\n};\n\nconsole.log(obj1.name); // 'cara'\nconsole.log(obj1.name.call(obj2)); // 'ben'\n```\n    call 和 apply 方法能够很好的体现 js 的函数式语言特性. 在 js 中几乎每一次编写函数式语言风格的代码都离不开 call 和 apply.\n\n#### 2. 丢失的 this\n这是一个经常遇到的问题, 在刚刚开始学习 js 时,`this`的指向常常令我疑惑, 尤其是看到网上关于`this`指向的题目, 简直云里雾里. 下面就来看一些例子吧!\n\n```javascript\nconst obj = {\n    name: 'apple',\n    getName: function () {\n        return this.name;\n    }\n}\n\nconsole.log(obj.getName()); // 'apple'\nlet getMyName = obj.getName;\nconsole.log(getMyName()); // undefined\n```\n上面这个例子好理解, 就是通过一个变量来引用`obj.getName`方法, 并且调用 getMyName 时, 就是用的普通函数调用方式, `this`是指向全局 window 的.\n\n    接下来再来看一个稍微复杂一点的例子吧:\n```javascript\nlet name = 'window';\nconst person = {\n    name: 'person',\n    showName1: function () {\n        console.log(this.name)\n    },\n    showName2: _ => console.log(this.name),\n    showName3: function () {\n        return function () {\n            console.log(this.name)\n        }\n    },\n    showName4: function () {\n        return _ => console.log(this.name)\n    }\n};\nconst person2 = {name: 'person2'};\n\nperson.showName1();\nperson.showName1().call(person2);\n\nperson.showName2();\nperson.showName2().call(person2);\n\nperson.showName3()();\nperson.showName3().call(person2);\nperson.showName3.call(person2)();\n\nperson.showName4()();\nperson.showName4().call(person2);\nperson.showName4.call(person2)();\n```\n这个例子可能大家已经很眼熟了, 不过当时我第一次做的时候几乎错了一大半😒…. 现在再拿出来看看其实还是很经典的: 在 person 和 person2 之间疯狂玩 showName 方法. 在给出答案之前我们先看看箭头函数的一些特点:\n\n- 箭头函数不可用作构造函数.\n- 不可以使用 `arguments`对象, 如果要用可以使用 rest 参数代替.\n- 不能使用`yield`命令, 所以箭头函数也不能作为 Generator 函数.\n- 箭头函数的`this`是定义时所在的对象, 而不是执行时所在的对象.\n\n    在最后一点的`this`指向上, 我个人觉得有点误导(也可能是我没理解到位)… 因为如果在对象字面量中的方法是通过箭头函数定义的话, `this`的指向就会和你期望的不一样了. \n\n```javascript\nlet name = 'window'\nlet obj = {\n    name: 'obj',\n    getName: _ => console.log(this.name)\n}\nobj.getName(); // 'window'\n```\n所以我觉得关于理解箭头函数`this`在定义时所在的对象是这样: `this`继承自父级的执行上下文(简单对象即非函数, 是没有执行上下文的), 所以上面例子就是 getName 方法的父级是 obj, 而 obj 的执行上下文是`window`, 因此输出全局对象的 name. 理解了关于箭头函数`this`的指向, 现在再来看看答案吧:\n\n```javascript\nperson.showName1(); // 'person'\nperson.showName1().call(person2); //  'person2'\n\nperson.showName2(); // 'window'\nperson.showName2().call(person2); // 'window'\n\nperson.showName3()(); // 'window'\nperson.showName3().call(person2); // 'person2'\nperson.showName3.call(person2)(); // 'window'\n\nperson.showName4()(); // 'person'\nperson.showName4().call(person2); // 'person'\nperson.showName4.call(person2)(); // 'perons2'\n```\n\n然后来分析一下答案吧:\n- 调用 showName1() \n这两个方式好理解, 第一种是通过 person 对象来调用的 showName1 方法, 也就是上面我们说过的**作为对象的方法被调用**, 所以`this`自然指向的是person 对象; 第二种是**被 call 和 apply 方法调用**, 所以`this`指向的是被 call 方法矫正的 person2.\n\n- 调用 showName2()\nshowName2 方法是一个箭头函数, 根据我们之前说过的箭头函数指向问题来看. 第一种通过 person 对象来调用, 由于 person 是一个简单对象所以这里它的执行上下文就是`window`, 那么就是作为普通函数调用, `this`指向 `window`; 第二种跟第一种是相同的调用方式, 只是把 person 对象换为 person2.\n\n- 调用 showName3()\nPerson.showName3 是一个高阶函数, 返回了一个匿名函数. 第一种方式相当于直接调用那个匿名函数执行环境就是`window`, 所以`this`指向`window`; 第二种方式通过 person2 来调用 person 的高阶函数, 输出 person2; 第三种先通过 person2 调用 person 的高阶函数, 然后在全局作用域下执行, 因此`this`指向`window`.\n\n- 调用 showName4()\n最后这三组调用也是高阶函数, 不过返回的匿名函数用的箭头函数. 前两种方式也就印证了我们之前所说的**箭头函数的 this 继承自父级执行上下文**, 所以前两种都输出 person, 就算第二种方式后面用 call 方法来矫正也是不行的; 第三种也就是通过 person2 来调用执行的 showName4 方法, 自然也就输出 person2 啦.\n \n> ### call 和 apply\nFunction.prototype.call() 和 Function.prototype.apply() 都是非常常用的方法, 在实际开发中和 JavaScript 的设计模式中这两个方法应用广泛. 其实它们的作用是一样的, 只是有传入参数形式不同的区别.\n\n- apply\napply 方法接收两个参数: 第一个参数指定函数体中 `this`的指向; 第二个参数为一个带下标的合集(可以是数组或者类数组), 这个参数将会传递给被调用的函数.\n```javascript\nlet fn = function (a, b, c) {\n\tconsole.log(a, b, c); // 1 2 3\n}\n// 第一个参数为 null 的话, 表示不改变 this 的指向\nfn.apply(null, [1, 2, 3]); \n```\n- call\ncall 方法的第一个参数和 apply 方法一样, 指定`this`的指向; 第二个参数不同, call 方法的第二个参数的数量不固定, 从第二参数开始一次按顺序传递给被调用的函数.\n```javascript\nlet fn = function (a, b, c) {\n\tconsole.log(a, b, c); // 1 2 3\n}\nfn.call(null, 1, 2, 3)\n```\n\n在我们不关心具体有多少参数被传入函数时, 就可以使用 apply 方法一股脑推过去就行了; 当我们明确的知道有多少参数, 想一目了然的表达形参和实参的对应关系时, 那么就可以用 call 方法.\n\n- 借用其他对象的方法\ncall 和 apply 经常被用来借用其他对象的方法, 常用的就有借用`Array`的方法来操作`arguments`或者借用构造函数来实现一些类似继承的效果.\n\t\n    1. 借用构造函数\n```javascript\nlet A = function (name) {\n\tthis.name = name\n};\n// 借用构造函数 A\nlet B = function () {\n\tA.apply(this, arguments)\n};\nB.prototype.getName = function () {\n\treturn this.name\n}\n\nlet b = new B('cara');\nconsole.log(b.getName); // 'cara'\n```\n    2. 借用 Array 的方法\n```javascript\n(function () {\n\tArray.prototype.push.call(arguments, 3);\n\tconsole.log(arguments); // {'0': 1, '1': 2, '2': 3}\n})(1, 2)\n```\n借用的时候要保证两个必要条件: 1. 对象本身要可以存取属性; 2. 对象的 length 属性可读写.\n> ### Function.prototype.bind\n绑定函数 bind 也是可以用作矫正 `this`的指向, bind 函数会创建一个新的函数(绑定函数), 新函数和目标函数将拥有相同的函数体. 第一个参数绑定`this`的指向, 从第二参数起后面的参数将作为实参绑定到目标函数的形参.\n\n```javascript\nlet sum = function (a, b) {\n\treturn a + b;\n};\nlet result = sum.bind(null, 1); // 1 将作为实参传入 sum\nconsole.log(result(2)); // 3\n```\n\n> 另外当 bind 返回的函数作为构造函数使用的话, 绑定的`this`将被忽略, 实参传入目标函数.\n\n```javascript\nlet original = function (x) {\n\tthis.a = 1;\n\tthis.b = function () {\n\t\treturn this.a + x\n\t}\n};\n\nlet obj = {\n\ta: 2\n};\n\nlet newObj = new (original.bind(obj, 2));\nconsole.log(newObj.a); // 1 => this 的指向被忽略\nconsole.log(newObj.b()); // 3 => 2 被传入 original\n```\ncall 和 apply 方法都是改变`this`指向后立即执行而 bind 可以在你想执行的\n时候再执行.\n\n差不多就到这儿吧, 要是有补充再接着写…\n\nCreated on 2017-10-17 by Cara\n\n","slug":"this-call-and-apply","published":1,"updated":"2018-05-05T09:23:03.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolss0019klu0mnha4373","content":"<p>在 JavaScript 中, <code>this</code>关键字很容易使大家疑惑, 再加上 <code>Function.prototype.call</code>和<code>Function.prototype.apply</code>这两个方法的广泛运用, 所以很有必要弄清<code>this</code>的使用.</p>\n<blockquote>\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><p>首先先说一下<code>this</code>的概念: <code>this</code>总是指向一个对象, 而这个对象具体是谁, 是根据运行时的函数执行的环境动态绑定的, 而非函数被声明时的环境. 当然到现在箭头函数的出现, <code>this</code>对不了解的同学们来说, 无疑是添了一把乱… 接下来我们一个一个的来说吧.</p>\n</blockquote>\n<h4 id=\"1-this的指向\"><a href=\"#1-this的指向\" class=\"headerlink\" title=\"1. this的指向\"></a>1. <code>this</code>的指向</h4><p>我们除开不常用的 with 和 eval 的情况, 具体到实际应用中, <code>this</code>的指向大致可以分为以下四种情况.</p>\n<ul>\n<li>作为对象的方法被调用</li>\n<li>作为普通函数被调用</li>\n<li>构造器调用</li>\n<li><p>被 call 和 apply 方法调用<br>下面来用 &lt; JavaScript 设计模式 &gt; 中的例子说明这四种情况.</p>\n<ol>\n<li><p>作为对象方法调用<br>当函数作为对象的方法被调用时, <code>this</code>指向该对象:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'window'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'cara'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === obj)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.getName() <span class=\"comment\">// true 'cara'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>作为普通函数调用<br>当函数不作为对象的方法被调用时, 也就是我们平常说的普通函数的方式, 此时的<code>this</code>总是指向全局对象.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'window'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getName()) <span class=\"comment\">// 'window'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'window'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'obj'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里 obj 的 getName方法赋值给了一个变量</span></span><br><span class=\"line\"><span class=\"comment\">// 调用的时候就只会作为一个普通函数调用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getName = obj.gatName;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getName()) <span class=\"comment\">// 'window'</span></span><br></pre></td></tr></table></figure>\n<p>上面这中作为普通函数调用的方式常常会带来一些困扰, 比如在某个 div 节点的事件函数中, 定义了一个局部的 callback 方法. 而这个 callback 方法我们往往是想让它的 <code>this</code>指向 div 节点, 但它内部却指向<code>window</code>. 如:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'div1'</span>&gt;</span>我是一个 div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.id = <span class=\"string\">'window'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id); <span class=\"comment\">// 'div1'</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> callback = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id); <span class=\"comment\">// 'window'\t</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callback() <span class=\"comment\">// 作为普通函数被调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要解决以上问题其实也很简单, 如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.id = <span class=\"string\">'window'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>; <span class=\"comment\">// 用一个变量来储存节点的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> callback = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(that.id); <span class=\"comment\">// 'div1'\t</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callback() <span class=\"comment\">// 作为普通函数被调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造器调用<br>先说说构造器吧, js 中没有类的概念, 但是可以从构造器中创建对象, 同时提供 <code>new</code> 运算符, 让构造器看起来更像一个类. Js 中大部分函数都可以当做构造器来使用, 所以它的外表看起来跟普通函数一样, 区别在于被调用的方式. 当用 <code>new</code> 运算符调用时, 该函数会返回一个对象. 通常情况下, 构造器里的 <code>this</code> 就指向返回的这个对象, 如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Myobj = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'cara'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> Myobj();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 'cara'</span></span><br></pre></td></tr></table></figure>\n<p>但是使用 <code>new</code>调用构造器时, 要注意一个问题. 如果构造器显式地返回了一个对象, 那么最终就会返回这个对象, 而不是我们的期望的 <code>this</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Myobj = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'cara'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'somebody'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> Myobj();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 'somebody'</span></span><br></pre></td></tr></table></figure>\n<p>如果构造器不显式地返回任何数据或是返回一个非对象类型的数据, 就不会出现上述情况</p>\n</li>\n<li><p>call 或 apply 方法调用<br>跟普通的函数调用相比, 用 call 或者 apply 方法调用可以动态地改变传入函数的 <code>this</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'cara'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'ben'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.name); <span class=\"comment\">// 'cara'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.name.call(obj2)); <span class=\"comment\">// 'ben'</span></span><br></pre></td></tr></table></figure>\n<p>call 和 apply 方法能够很好的体现 js 的函数式语言特性. 在 js 中几乎每一次编写函数式语言风格的代码都离不开 call 和 apply.</p>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"2-丢失的-this\"><a href=\"#2-丢失的-this\" class=\"headerlink\" title=\"2. 丢失的 this\"></a>2. 丢失的 this</h4><p>这是一个经常遇到的问题, 在刚刚开始学习 js 时,<code>this</code>的指向常常令我疑惑, 尤其是看到网上关于<code>this</code>指向的题目, 简直云里雾里. 下面就来看一些例子吧!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'apple'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.getName()); <span class=\"comment\">// 'apple'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getMyName = obj.getName;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getMyName()); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>上面这个例子好理解, 就是通过一个变量来引用<code>obj.getName</code>方法, 并且调用 getMyName 时, 就是用的普通函数调用方式, <code>this</code>是指向全局 window 的.</p>\n<pre><code>接下来再来看一个稍微复杂一点的例子吧:\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'window'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'person'</span>,</span><br><span class=\"line\">    showName1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    showName2: <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name),</span><br><span class=\"line\">    showName3: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    showName4: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person2 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'person2'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">person.showName1();</span><br><span class=\"line\">person.showName1().call(person2);</span><br><span class=\"line\"></span><br><span class=\"line\">person.showName2();</span><br><span class=\"line\">person.showName2().call(person2);</span><br><span class=\"line\"></span><br><span class=\"line\">person.showName3()();</span><br><span class=\"line\">person.showName3().call(person2);</span><br><span class=\"line\">person.showName3.call(person2)();</span><br><span class=\"line\"></span><br><span class=\"line\">person.showName4()();</span><br><span class=\"line\">person.showName4().call(person2);</span><br><span class=\"line\">person.showName4.call(person2)();</span><br></pre></td></tr></table></figure>\n<p>这个例子可能大家已经很眼熟了, 不过当时我第一次做的时候几乎错了一大半😒…. 现在再拿出来看看其实还是很经典的: 在 person 和 person2 之间疯狂玩 showName 方法. 在给出答案之前我们先看看箭头函数的一些特点:</p>\n<ul>\n<li>箭头函数不可用作构造函数.</li>\n<li>不可以使用 <code>arguments</code>对象, 如果要用可以使用 rest 参数代替.</li>\n<li>不能使用<code>yield</code>命令, 所以箭头函数也不能作为 Generator 函数.</li>\n<li><p>箭头函数的<code>this</code>是定义时所在的对象, 而不是执行时所在的对象.</p>\n<p>  在最后一点的<code>this</code>指向上, 我个人觉得有点误导(也可能是我没理解到位)… 因为如果在对象字面量中的方法是通过箭头函数定义的话, <code>this</code>的指向就会和你期望的不一样了. </p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'window'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'obj'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.getName(); <span class=\"comment\">// 'window'</span></span><br></pre></td></tr></table></figure>\n<p>所以我觉得关于理解箭头函数<code>this</code>在定义时所在的对象是这样: <code>this</code>继承自父级的执行上下文(简单对象即非函数, 是没有执行上下文的), 所以上面例子就是 getName 方法的父级是 obj, 而 obj 的执行上下文是<code>window</code>, 因此输出全局对象的 name. 理解了关于箭头函数<code>this</code>的指向, 现在再来看看答案吧:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.showName1(); <span class=\"comment\">// 'person'</span></span><br><span class=\"line\">person.showName1().call(person2); <span class=\"comment\">//  'person2'</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.showName2(); <span class=\"comment\">// 'window'</span></span><br><span class=\"line\">person.showName2().call(person2); <span class=\"comment\">// 'window'</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.showName3()(); <span class=\"comment\">// 'window'</span></span><br><span class=\"line\">person.showName3().call(person2); <span class=\"comment\">// 'person2'</span></span><br><span class=\"line\">person.showName3.call(person2)(); <span class=\"comment\">// 'window'</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.showName4()(); <span class=\"comment\">// 'person'</span></span><br><span class=\"line\">person.showName4().call(person2); <span class=\"comment\">// 'person'</span></span><br><span class=\"line\">person.showName4.call(person2)(); <span class=\"comment\">// 'perons2'</span></span><br></pre></td></tr></table></figure>\n<p>然后来分析一下答案吧:</p>\n<ul>\n<li><p>调用 showName1()<br>这两个方式好理解, 第一种是通过 person 对象来调用的 showName1 方法, 也就是上面我们说过的<strong>作为对象的方法被调用</strong>, 所以<code>this</code>自然指向的是person 对象; 第二种是<strong>被 call 和 apply 方法调用</strong>, 所以<code>this</code>指向的是被 call 方法矫正的 person2.</p>\n</li>\n<li><p>调用 showName2()<br>showName2 方法是一个箭头函数, 根据我们之前说过的箭头函数指向问题来看. 第一种通过 person 对象来调用, 由于 person 是一个简单对象所以这里它的执行上下文就是<code>window</code>, 那么就是作为普通函数调用, <code>this</code>指向 <code>window</code>; 第二种跟第一种是相同的调用方式, 只是把 person 对象换为 person2.</p>\n</li>\n<li><p>调用 showName3()<br>Person.showName3 是一个高阶函数, 返回了一个匿名函数. 第一种方式相当于直接调用那个匿名函数执行环境就是<code>window</code>, 所以<code>this</code>指向<code>window</code>; 第二种方式通过 person2 来调用 person 的高阶函数, 输出 person2; 第三种先通过 person2 调用 person 的高阶函数, 然后在全局作用域下执行, 因此<code>this</code>指向<code>window</code>.</p>\n</li>\n<li><p>调用 showName4()<br>最后这三组调用也是高阶函数, 不过返回的匿名函数用的箭头函数. 前两种方式也就印证了我们之前所说的<strong>箭头函数的 this 继承自父级执行上下文</strong>, 所以前两种都输出 person, 就算第二种方式后面用 call 方法来矫正也是不行的; 第三种也就是通过 person2 来调用执行的 showName4 方法, 自然也就输出 person2 啦.</p>\n</li>\n</ul>\n<blockquote>\n<h3 id=\"call-和-apply\"><a href=\"#call-和-apply\" class=\"headerlink\" title=\"call 和 apply\"></a>call 和 apply</h3><p>Function.prototype.call() 和 Function.prototype.apply() 都是非常常用的方法, 在实际开发中和 JavaScript 的设计模式中这两个方法应用广泛. 其实它们的作用是一样的, 只是有传入参数形式不同的区别.</p>\n</blockquote>\n<ul>\n<li><p>apply<br>apply 方法接收两个参数: 第一个参数指定函数体中 <code>this</code>的指向; 第二个参数为一个带下标的合集(可以是数组或者类数组), 这个参数将会传递给被调用的函数.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(a, b, c); <span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 第一个参数为 null 的话, 表示不改变 this 的指向</span></span><br><span class=\"line\">fn.apply(<span class=\"literal\">null</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>call<br>call 方法的第一个参数和 apply 方法一样, 指定<code>this</code>的指向; 第二个参数不同, call 方法的第二个参数的数量不固定, 从第二参数开始一次按顺序传递给被调用的函数.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(a, b, c); <span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn.call(<span class=\"literal\">null</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在我们不关心具体有多少参数被传入函数时, 就可以使用 apply 方法一股脑推过去就行了; 当我们明确的知道有多少参数, 想一目了然的表达形参和实参的对应关系时, 那么就可以用 call 方法.</p>\n<ul>\n<li><p>借用其他对象的方法<br>call 和 apply 经常被用来借用其他对象的方法, 常用的就有借用<code>Array</code>的方法来操作<code>arguments</code>或者借用构造函数来实现一些类似继承的效果.</p>\n<ol>\n<li><p>借用构造函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> A = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 借用构造函数 A</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> B = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tA.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">B.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B(<span class=\"string\">'cara'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.getName); <span class=\"comment\">// 'cara'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>借用 Array 的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Array</span>.prototype.push.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>); <span class=\"comment\">// &#123;'0': 1, '1': 2, '2': 3&#125;</span></span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<p>借用的时候要保证两个必要条件: 1. 对象本身要可以存取属性; 2. 对象的 length 属性可读写.</p>\n<blockquote>\n<h3 id=\"Function-prototype-bind\"><a href=\"#Function-prototype-bind\" class=\"headerlink\" title=\"Function.prototype.bind\"></a>Function.prototype.bind</h3><p>绑定函数 bind 也是可以用作矫正 <code>this</code>的指向, bind 函数会创建一个新的函数(绑定函数), 新函数和目标函数将拥有相同的函数体. 第一个参数绑定<code>this</code>的指向, 从第二参数起后面的参数将作为实参绑定到目标函数的形参.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = sum.bind(<span class=\"literal\">null</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 1 将作为实参传入 sum</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result(<span class=\"number\">2</span>)); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>另外当 bind 返回的函数作为构造函数使用的话, 绑定的<code>this</code>将被忽略, 实参传入目标函数.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> original = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.b = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + x</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\ta: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"keyword\">new</span> (original.bind(obj, <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.a); <span class=\"comment\">// 1 =&gt; this 的指向被忽略</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.b()); <span class=\"comment\">// 3 =&gt; 2 被传入 original</span></span><br></pre></td></tr></table></figure>\n<p>call 和 apply 方法都是改变<code>this</code>指向后立即执行而 bind 可以在你想执行的<br>时候再执行.</p>\n<p>差不多就到这儿吧, 要是有补充再接着写…</p>\n<p>Created on 2017-10-17 by Cara</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 JavaScript 中, <code>this</code>关键字很容易使大家疑惑, 再加上 <code>Function.prototype.call</code>和<code>Function.prototype.apply</code>这两个方法的广泛运用, 所以很有必要弄清<code>this</code>的使用.</p>\n<blockquote>\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><p>首先先说一下<code>this</code>的概念: <code>this</code>总是指向一个对象, 而这个对象具体是谁, 是根据运行时的函数执行的环境动态绑定的, 而非函数被声明时的环境. 当然到现在箭头函数的出现, <code>this</code>对不了解的同学们来说, 无疑是添了一把乱… 接下来我们一个一个的来说吧.</p>\n</blockquote>\n<h4 id=\"1-this的指向\"><a href=\"#1-this的指向\" class=\"headerlink\" title=\"1. this的指向\"></a>1. <code>this</code>的指向</h4><p>我们除开不常用的 with 和 eval 的情况, 具体到实际应用中, <code>this</code>的指向大致可以分为以下四种情况.</p>\n<ul>\n<li>作为对象的方法被调用</li>\n<li>作为普通函数被调用</li>\n<li>构造器调用</li>\n<li><p>被 call 和 apply 方法调用<br>下面来用 &lt; JavaScript 设计模式 &gt; 中的例子说明这四种情况.</p>\n<ol>\n<li><p>作为对象方法调用<br>当函数作为对象的方法被调用时, <code>this</code>指向该对象:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'window'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'cara'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === obj)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.getName() <span class=\"comment\">// true 'cara'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>作为普通函数调用<br>当函数不作为对象的方法被调用时, 也就是我们平常说的普通函数的方式, 此时的<code>this</code>总是指向全局对象.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'window'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getName()) <span class=\"comment\">// 'window'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'window'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'obj'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里 obj 的 getName方法赋值给了一个变量</span></span><br><span class=\"line\"><span class=\"comment\">// 调用的时候就只会作为一个普通函数调用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getName = obj.gatName;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getName()) <span class=\"comment\">// 'window'</span></span><br></pre></td></tr></table></figure>\n<p>上面这中作为普通函数调用的方式常常会带来一些困扰, 比如在某个 div 节点的事件函数中, 定义了一个局部的 callback 方法. 而这个 callback 方法我们往往是想让它的 <code>this</code>指向 div 节点, 但它内部却指向<code>window</code>. 如:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'div1'</span>&gt;</span>我是一个 div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.id = <span class=\"string\">'window'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id); <span class=\"comment\">// 'div1'</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> callback = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id); <span class=\"comment\">// 'window'\t</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callback() <span class=\"comment\">// 作为普通函数被调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要解决以上问题其实也很简单, 如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.id = <span class=\"string\">'window'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>; <span class=\"comment\">// 用一个变量来储存节点的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> callback = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(that.id); <span class=\"comment\">// 'div1'\t</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callback() <span class=\"comment\">// 作为普通函数被调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造器调用<br>先说说构造器吧, js 中没有类的概念, 但是可以从构造器中创建对象, 同时提供 <code>new</code> 运算符, 让构造器看起来更像一个类. Js 中大部分函数都可以当做构造器来使用, 所以它的外表看起来跟普通函数一样, 区别在于被调用的方式. 当用 <code>new</code> 运算符调用时, 该函数会返回一个对象. 通常情况下, 构造器里的 <code>this</code> 就指向返回的这个对象, 如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Myobj = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'cara'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> Myobj();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 'cara'</span></span><br></pre></td></tr></table></figure>\n<p>但是使用 <code>new</code>调用构造器时, 要注意一个问题. 如果构造器显式地返回了一个对象, 那么最终就会返回这个对象, 而不是我们的期望的 <code>this</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Myobj = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'cara'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'somebody'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> Myobj();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 'somebody'</span></span><br></pre></td></tr></table></figure>\n<p>如果构造器不显式地返回任何数据或是返回一个非对象类型的数据, 就不会出现上述情况</p>\n</li>\n<li><p>call 或 apply 方法调用<br>跟普通的函数调用相比, 用 call 或者 apply 方法调用可以动态地改变传入函数的 <code>this</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'cara'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'ben'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.name); <span class=\"comment\">// 'cara'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.name.call(obj2)); <span class=\"comment\">// 'ben'</span></span><br></pre></td></tr></table></figure>\n<p>call 和 apply 方法能够很好的体现 js 的函数式语言特性. 在 js 中几乎每一次编写函数式语言风格的代码都离不开 call 和 apply.</p>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"2-丢失的-this\"><a href=\"#2-丢失的-this\" class=\"headerlink\" title=\"2. 丢失的 this\"></a>2. 丢失的 this</h4><p>这是一个经常遇到的问题, 在刚刚开始学习 js 时,<code>this</code>的指向常常令我疑惑, 尤其是看到网上关于<code>this</code>指向的题目, 简直云里雾里. 下面就来看一些例子吧!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'apple'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.getName()); <span class=\"comment\">// 'apple'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getMyName = obj.getName;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getMyName()); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>上面这个例子好理解, 就是通过一个变量来引用<code>obj.getName</code>方法, 并且调用 getMyName 时, 就是用的普通函数调用方式, <code>this</code>是指向全局 window 的.</p>\n<pre><code>接下来再来看一个稍微复杂一点的例子吧:\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'window'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'person'</span>,</span><br><span class=\"line\">    showName1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    showName2: <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name),</span><br><span class=\"line\">    showName3: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    showName4: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person2 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'person2'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">person.showName1();</span><br><span class=\"line\">person.showName1().call(person2);</span><br><span class=\"line\"></span><br><span class=\"line\">person.showName2();</span><br><span class=\"line\">person.showName2().call(person2);</span><br><span class=\"line\"></span><br><span class=\"line\">person.showName3()();</span><br><span class=\"line\">person.showName3().call(person2);</span><br><span class=\"line\">person.showName3.call(person2)();</span><br><span class=\"line\"></span><br><span class=\"line\">person.showName4()();</span><br><span class=\"line\">person.showName4().call(person2);</span><br><span class=\"line\">person.showName4.call(person2)();</span><br></pre></td></tr></table></figure>\n<p>这个例子可能大家已经很眼熟了, 不过当时我第一次做的时候几乎错了一大半😒…. 现在再拿出来看看其实还是很经典的: 在 person 和 person2 之间疯狂玩 showName 方法. 在给出答案之前我们先看看箭头函数的一些特点:</p>\n<ul>\n<li>箭头函数不可用作构造函数.</li>\n<li>不可以使用 <code>arguments</code>对象, 如果要用可以使用 rest 参数代替.</li>\n<li>不能使用<code>yield</code>命令, 所以箭头函数也不能作为 Generator 函数.</li>\n<li><p>箭头函数的<code>this</code>是定义时所在的对象, 而不是执行时所在的对象.</p>\n<p>  在最后一点的<code>this</code>指向上, 我个人觉得有点误导(也可能是我没理解到位)… 因为如果在对象字面量中的方法是通过箭头函数定义的话, <code>this</code>的指向就会和你期望的不一样了. </p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'window'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'obj'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.getName(); <span class=\"comment\">// 'window'</span></span><br></pre></td></tr></table></figure>\n<p>所以我觉得关于理解箭头函数<code>this</code>在定义时所在的对象是这样: <code>this</code>继承自父级的执行上下文(简单对象即非函数, 是没有执行上下文的), 所以上面例子就是 getName 方法的父级是 obj, 而 obj 的执行上下文是<code>window</code>, 因此输出全局对象的 name. 理解了关于箭头函数<code>this</code>的指向, 现在再来看看答案吧:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.showName1(); <span class=\"comment\">// 'person'</span></span><br><span class=\"line\">person.showName1().call(person2); <span class=\"comment\">//  'person2'</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.showName2(); <span class=\"comment\">// 'window'</span></span><br><span class=\"line\">person.showName2().call(person2); <span class=\"comment\">// 'window'</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.showName3()(); <span class=\"comment\">// 'window'</span></span><br><span class=\"line\">person.showName3().call(person2); <span class=\"comment\">// 'person2'</span></span><br><span class=\"line\">person.showName3.call(person2)(); <span class=\"comment\">// 'window'</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.showName4()(); <span class=\"comment\">// 'person'</span></span><br><span class=\"line\">person.showName4().call(person2); <span class=\"comment\">// 'person'</span></span><br><span class=\"line\">person.showName4.call(person2)(); <span class=\"comment\">// 'perons2'</span></span><br></pre></td></tr></table></figure>\n<p>然后来分析一下答案吧:</p>\n<ul>\n<li><p>调用 showName1()<br>这两个方式好理解, 第一种是通过 person 对象来调用的 showName1 方法, 也就是上面我们说过的<strong>作为对象的方法被调用</strong>, 所以<code>this</code>自然指向的是person 对象; 第二种是<strong>被 call 和 apply 方法调用</strong>, 所以<code>this</code>指向的是被 call 方法矫正的 person2.</p>\n</li>\n<li><p>调用 showName2()<br>showName2 方法是一个箭头函数, 根据我们之前说过的箭头函数指向问题来看. 第一种通过 person 对象来调用, 由于 person 是一个简单对象所以这里它的执行上下文就是<code>window</code>, 那么就是作为普通函数调用, <code>this</code>指向 <code>window</code>; 第二种跟第一种是相同的调用方式, 只是把 person 对象换为 person2.</p>\n</li>\n<li><p>调用 showName3()<br>Person.showName3 是一个高阶函数, 返回了一个匿名函数. 第一种方式相当于直接调用那个匿名函数执行环境就是<code>window</code>, 所以<code>this</code>指向<code>window</code>; 第二种方式通过 person2 来调用 person 的高阶函数, 输出 person2; 第三种先通过 person2 调用 person 的高阶函数, 然后在全局作用域下执行, 因此<code>this</code>指向<code>window</code>.</p>\n</li>\n<li><p>调用 showName4()<br>最后这三组调用也是高阶函数, 不过返回的匿名函数用的箭头函数. 前两种方式也就印证了我们之前所说的<strong>箭头函数的 this 继承自父级执行上下文</strong>, 所以前两种都输出 person, 就算第二种方式后面用 call 方法来矫正也是不行的; 第三种也就是通过 person2 来调用执行的 showName4 方法, 自然也就输出 person2 啦.</p>\n</li>\n</ul>\n<blockquote>\n<h3 id=\"call-和-apply\"><a href=\"#call-和-apply\" class=\"headerlink\" title=\"call 和 apply\"></a>call 和 apply</h3><p>Function.prototype.call() 和 Function.prototype.apply() 都是非常常用的方法, 在实际开发中和 JavaScript 的设计模式中这两个方法应用广泛. 其实它们的作用是一样的, 只是有传入参数形式不同的区别.</p>\n</blockquote>\n<ul>\n<li><p>apply<br>apply 方法接收两个参数: 第一个参数指定函数体中 <code>this</code>的指向; 第二个参数为一个带下标的合集(可以是数组或者类数组), 这个参数将会传递给被调用的函数.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(a, b, c); <span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 第一个参数为 null 的话, 表示不改变 this 的指向</span></span><br><span class=\"line\">fn.apply(<span class=\"literal\">null</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>call<br>call 方法的第一个参数和 apply 方法一样, 指定<code>this</code>的指向; 第二个参数不同, call 方法的第二个参数的数量不固定, 从第二参数开始一次按顺序传递给被调用的函数.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(a, b, c); <span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn.call(<span class=\"literal\">null</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在我们不关心具体有多少参数被传入函数时, 就可以使用 apply 方法一股脑推过去就行了; 当我们明确的知道有多少参数, 想一目了然的表达形参和实参的对应关系时, 那么就可以用 call 方法.</p>\n<ul>\n<li><p>借用其他对象的方法<br>call 和 apply 经常被用来借用其他对象的方法, 常用的就有借用<code>Array</code>的方法来操作<code>arguments</code>或者借用构造函数来实现一些类似继承的效果.</p>\n<ol>\n<li><p>借用构造函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> A = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 借用构造函数 A</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> B = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tA.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">B.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B(<span class=\"string\">'cara'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.getName); <span class=\"comment\">// 'cara'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>借用 Array 的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Array</span>.prototype.push.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>); <span class=\"comment\">// &#123;'0': 1, '1': 2, '2': 3&#125;</span></span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<p>借用的时候要保证两个必要条件: 1. 对象本身要可以存取属性; 2. 对象的 length 属性可读写.</p>\n<blockquote>\n<h3 id=\"Function-prototype-bind\"><a href=\"#Function-prototype-bind\" class=\"headerlink\" title=\"Function.prototype.bind\"></a>Function.prototype.bind</h3><p>绑定函数 bind 也是可以用作矫正 <code>this</code>的指向, bind 函数会创建一个新的函数(绑定函数), 新函数和目标函数将拥有相同的函数体. 第一个参数绑定<code>this</code>的指向, 从第二参数起后面的参数将作为实参绑定到目标函数的形参.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = sum.bind(<span class=\"literal\">null</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 1 将作为实参传入 sum</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result(<span class=\"number\">2</span>)); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>另外当 bind 返回的函数作为构造函数使用的话, 绑定的<code>this</code>将被忽略, 实参传入目标函数.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> original = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.b = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + x</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\ta: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"keyword\">new</span> (original.bind(obj, <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.a); <span class=\"comment\">// 1 =&gt; this 的指向被忽略</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.b()); <span class=\"comment\">// 3 =&gt; 2 被传入 original</span></span><br></pre></td></tr></table></figure>\n<p>call 和 apply 方法都是改变<code>this</code>指向后立即执行而 bind 可以在你想执行的<br>时候再执行.</p>\n<p>差不多就到这儿吧, 要是有补充再接着写…</p>\n<p>Created on 2017-10-17 by Cara</p>\n"},{"title":"事件","date":"2017-12-10T14:05:49.000Z","_content":"JavaScript 和 HTML 交互是通过事件实现, 而事件处理程序订阅事件从而执行相应的操作.\n\n#### 事件流\n事件流描述的是 从页面接收事件的顺序. \n事件冒泡: 从最具体的元素到最不具体的元素(从内到外); — IE  \n事件捕获: 从最不具体的元素到最具体的元素(从外到内); — Netscape\nDOM 事件流: 先捕获后冒泡的方式.\n\nDOM事件流包括三个阶段:\n1. 捕获阶段 (IE 低版本不支持该阶段)\n2. 目标阶段 (触发事件)\n3. 冒泡阶段 (回传文档)\n\n#### 事件处理程序\n事件是用户或浏览器自身执行的动作, 事件处理程序(事件监听器)是响应事件的动作. 比如 click 事件的事件处理程序就是 onclick, 为事件指定处理程序的方式也有几种.\n\n##### HTML 事件处理程序\n在标签上绑定事件处理程序, HTML 和 js 紧密耦合\n```HTML\n<button onclick='alert('clicked')'>click me</button>\n```\n\n##### DOM 0级事件处理程序\n将一个函数赋值给一个事件处理程序属性\n```javascript\nvar btn = document.querySelector('#btn');\nbtn.onclick = function () {\n\talert('clicked')\n}\n```\n\n##### DOM 2级事件处理程序\n定义了两个方法, 用于绑定事件处理程序和删除事件处理程序: `addEventListener()`和`removeEventListener()`. 所有的 DOM 节点都包含这两个方法, 方法有三个参数: 需要处理的事件名/ 处理函数/ 布尔值(true 为在捕获阶段调用; false 为在冒泡阶段调用)\n```javascript\nvar btn = document.querySelector('#btn');\n// 绑定处理程序\nbtn.addEventListener('click', function () {\n\talert('clicked')\n}, false);\n// 移除处理程序(移除处理程序时, 第二个参数必须和绑定时一样)\nbtn.removeEventListener('click', function () {\n\talert('remove')\n}, false)\n```\n\n#### IE 和  DOM2级事件处理程序的区别\n\n- IE 事件处理程序\n```javascript\nvar btn = docuemnt.querySelector('#btn');\n// 绑定事件\nbtn.attachEvent('onclick', function () {\n\t// this === window\n\talert('click on IE')\n})\n// 移除事件\nbtn.detachEvent('onclick', function () {\n\talert('remove on IE')\n})\n```\n\n**以上两种事件处理程序都支持绑定多个事件, DOM2级按照顺序**\n\n- 跨浏览器事件处理\n```javascript\nconst EventUtil = {\n\t// 绑定事件处理程序\n\taddHanlder: function (element, type, handler) {\n\t\tif (element.addEventListener) {\n\t\t\telement.addEventListener(type, handler, false)\n\t\t}\n\t\telse if (element.attachEvent) {\n\t\t\telement.attachEvent('on' + type, handler)\n\t\t}\n\t\telse {\n\t\t\telement['on' + type] = handler;\n\t\t}\n\t},\n\t// 移除事件处理程序\n\tremoveHandler: function (element, type, handler) {\n\t\tif (element.removeEventListener) {\n\t\t\telement.removeEventListener(type, handler, false)\n\t\t}\n\t\telse if (element.detachEvent) {\n\t\t\telement.detachEvent('on' + type, handler)\n\t\t}\n\t\telse {\n\t\t\telement['on' + type] = null;\n\t\t}\n\t}\n} \n```\n\n#### 事件代理/ 委托\n由于事件处理程序越多, 性能越差, 所以有了事件处理程序. 事件代理的原理是基于事件的冒泡机制实现的, 由上级节点代理完成事件绑定, 优点是: \n\n> 节省内存占用, 减少事件注册. 比如在`ul`代理所有`li`的点击事件\n> 动态新增子级时, 无需再次绑定事件.\n\n可能会提到`currentTarget`和`target`的区别: currentTarget 是注册事件时的目标(在事件处理程序中`this`始终指向 currentTarget), target 是真正触发事件的目标.\n\n```javascript\ndocument.body.onclick = function (event) {\n\t// 事件注册时的元素\n\tconsole.log(document.body === event.currentTarget); // true\n\tconsole.log(this === document.body); // true\n\t// 真正点击的元素\n\tconsole.log(event.target === document.querySelector('#btn')); // true\n}\n```\n\n#### 事件对象\n事件内置的 event 对象, 下面列举常用的几个事件对象属性:\n- event || window.event\n- event.preventDefault() || window.event.cancelBubble(Boolean)\n阻止浏览器默认事件\n- event.stopPropagation() || window.event.returnValue(Boolean)\n阻止冒泡事件\n- event.target || winow.event.srcElement\n\nCreated on 2017-12-10 by Cara","source":"_posts/事件代理-委托.md","raw":"---\ntitle: 事件\ndate: 2017-12-10 22:05:49\ntags:\n- JavaScript\ncategories: \n- 复习\n---\nJavaScript 和 HTML 交互是通过事件实现, 而事件处理程序订阅事件从而执行相应的操作.\n\n#### 事件流\n事件流描述的是 从页面接收事件的顺序. \n事件冒泡: 从最具体的元素到最不具体的元素(从内到外); — IE  \n事件捕获: 从最不具体的元素到最具体的元素(从外到内); — Netscape\nDOM 事件流: 先捕获后冒泡的方式.\n\nDOM事件流包括三个阶段:\n1. 捕获阶段 (IE 低版本不支持该阶段)\n2. 目标阶段 (触发事件)\n3. 冒泡阶段 (回传文档)\n\n#### 事件处理程序\n事件是用户或浏览器自身执行的动作, 事件处理程序(事件监听器)是响应事件的动作. 比如 click 事件的事件处理程序就是 onclick, 为事件指定处理程序的方式也有几种.\n\n##### HTML 事件处理程序\n在标签上绑定事件处理程序, HTML 和 js 紧密耦合\n```HTML\n<button onclick='alert('clicked')'>click me</button>\n```\n\n##### DOM 0级事件处理程序\n将一个函数赋值给一个事件处理程序属性\n```javascript\nvar btn = document.querySelector('#btn');\nbtn.onclick = function () {\n\talert('clicked')\n}\n```\n\n##### DOM 2级事件处理程序\n定义了两个方法, 用于绑定事件处理程序和删除事件处理程序: `addEventListener()`和`removeEventListener()`. 所有的 DOM 节点都包含这两个方法, 方法有三个参数: 需要处理的事件名/ 处理函数/ 布尔值(true 为在捕获阶段调用; false 为在冒泡阶段调用)\n```javascript\nvar btn = document.querySelector('#btn');\n// 绑定处理程序\nbtn.addEventListener('click', function () {\n\talert('clicked')\n}, false);\n// 移除处理程序(移除处理程序时, 第二个参数必须和绑定时一样)\nbtn.removeEventListener('click', function () {\n\talert('remove')\n}, false)\n```\n\n#### IE 和  DOM2级事件处理程序的区别\n\n- IE 事件处理程序\n```javascript\nvar btn = docuemnt.querySelector('#btn');\n// 绑定事件\nbtn.attachEvent('onclick', function () {\n\t// this === window\n\talert('click on IE')\n})\n// 移除事件\nbtn.detachEvent('onclick', function () {\n\talert('remove on IE')\n})\n```\n\n**以上两种事件处理程序都支持绑定多个事件, DOM2级按照顺序**\n\n- 跨浏览器事件处理\n```javascript\nconst EventUtil = {\n\t// 绑定事件处理程序\n\taddHanlder: function (element, type, handler) {\n\t\tif (element.addEventListener) {\n\t\t\telement.addEventListener(type, handler, false)\n\t\t}\n\t\telse if (element.attachEvent) {\n\t\t\telement.attachEvent('on' + type, handler)\n\t\t}\n\t\telse {\n\t\t\telement['on' + type] = handler;\n\t\t}\n\t},\n\t// 移除事件处理程序\n\tremoveHandler: function (element, type, handler) {\n\t\tif (element.removeEventListener) {\n\t\t\telement.removeEventListener(type, handler, false)\n\t\t}\n\t\telse if (element.detachEvent) {\n\t\t\telement.detachEvent('on' + type, handler)\n\t\t}\n\t\telse {\n\t\t\telement['on' + type] = null;\n\t\t}\n\t}\n} \n```\n\n#### 事件代理/ 委托\n由于事件处理程序越多, 性能越差, 所以有了事件处理程序. 事件代理的原理是基于事件的冒泡机制实现的, 由上级节点代理完成事件绑定, 优点是: \n\n> 节省内存占用, 减少事件注册. 比如在`ul`代理所有`li`的点击事件\n> 动态新增子级时, 无需再次绑定事件.\n\n可能会提到`currentTarget`和`target`的区别: currentTarget 是注册事件时的目标(在事件处理程序中`this`始终指向 currentTarget), target 是真正触发事件的目标.\n\n```javascript\ndocument.body.onclick = function (event) {\n\t// 事件注册时的元素\n\tconsole.log(document.body === event.currentTarget); // true\n\tconsole.log(this === document.body); // true\n\t// 真正点击的元素\n\tconsole.log(event.target === document.querySelector('#btn')); // true\n}\n```\n\n#### 事件对象\n事件内置的 event 对象, 下面列举常用的几个事件对象属性:\n- event || window.event\n- event.preventDefault() || window.event.cancelBubble(Boolean)\n阻止浏览器默认事件\n- event.stopPropagation() || window.event.returnValue(Boolean)\n阻止冒泡事件\n- event.target || winow.event.srcElement\n\nCreated on 2017-12-10 by Cara","slug":"事件代理-委托","published":1,"updated":"2018-05-05T09:23:03.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolst001dklu09raid2so","content":"<p>JavaScript 和 HTML 交互是通过事件实现, 而事件处理程序订阅事件从而执行相应的操作.</p>\n<h4 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h4><p>事件流描述的是 从页面接收事件的顺序.<br>事件冒泡: 从最具体的元素到最不具体的元素(从内到外); — IE<br>事件捕获: 从最不具体的元素到最具体的元素(从外到内); — Netscape<br>DOM 事件流: 先捕获后冒泡的方式.</p>\n<p>DOM事件流包括三个阶段:</p>\n<ol>\n<li>捕获阶段 (IE 低版本不支持该阶段)</li>\n<li>目标阶段 (触发事件)</li>\n<li>冒泡阶段 (回传文档)</li>\n</ol>\n<h4 id=\"事件处理程序\"><a href=\"#事件处理程序\" class=\"headerlink\" title=\"事件处理程序\"></a>事件处理程序</h4><p>事件是用户或浏览器自身执行的动作, 事件处理程序(事件监听器)是响应事件的动作. 比如 click 事件的事件处理程序就是 onclick, 为事件指定处理程序的方式也有几种.</p>\n<h5 id=\"HTML-事件处理程序\"><a href=\"#HTML-事件处理程序\" class=\"headerlink\" title=\"HTML 事件处理程序\"></a>HTML 事件处理程序</h5><p>在标签上绑定事件处理程序, HTML 和 js 紧密耦合<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">'alert('</span><span class=\"attr\">clicked</span>')'&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"DOM-0级事件处理程序\"><a href=\"#DOM-0级事件处理程序\" class=\"headerlink\" title=\"DOM 0级事件处理程序\"></a>DOM 0级事件处理程序</h5><p>将一个函数赋值给一个事件处理程序属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#btn'</span>);</span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'clicked'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"DOM-2级事件处理程序\"><a href=\"#DOM-2级事件处理程序\" class=\"headerlink\" title=\"DOM 2级事件处理程序\"></a>DOM 2级事件处理程序</h5><p>定义了两个方法, 用于绑定事件处理程序和删除事件处理程序: <code>addEventListener()</code>和<code>removeEventListener()</code>. 所有的 DOM 节点都包含这两个方法, 方法有三个参数: 需要处理的事件名/ 处理函数/ 布尔值(true 为在捕获阶段调用; false 为在冒泡阶段调用)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#btn'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 绑定处理程序</span></span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'clicked'</span>)</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// 移除处理程序(移除处理程序时, 第二个参数必须和绑定时一样)</span></span><br><span class=\"line\">btn.removeEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'remove'</span>)</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"IE-和-DOM2级事件处理程序的区别\"><a href=\"#IE-和-DOM2级事件处理程序的区别\" class=\"headerlink\" title=\"IE 和  DOM2级事件处理程序的区别\"></a>IE 和  DOM2级事件处理程序的区别</h4><ul>\n<li>IE 事件处理程序<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = docuemnt.querySelector(<span class=\"string\">'#btn'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 绑定事件</span></span><br><span class=\"line\">btn.attachEvent(<span class=\"string\">'onclick'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// this === window</span></span><br><span class=\"line\">\talert(<span class=\"string\">'click on IE'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 移除事件</span></span><br><span class=\"line\">btn.detachEvent(<span class=\"string\">'onclick'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'remove on IE'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>以上两种事件处理程序都支持绑定多个事件, DOM2级按照顺序</strong></p>\n<ul>\n<li>跨浏览器事件处理<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> EventUtil = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 绑定事件处理程序</span></span><br><span class=\"line\">\taddHanlder: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">\t\t\telement.addEventListener(type, handler, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">\t\t\telement.attachEvent(<span class=\"string\">'on'</span> + type, handler)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\telement[<span class=\"string\">'on'</span> + type] = handler;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 移除事件处理程序</span></span><br><span class=\"line\">\tremoveHandler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (element.removeEventListener) &#123;</span><br><span class=\"line\">\t\t\telement.removeEventListener(type, handler, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.detachEvent) &#123;</span><br><span class=\"line\">\t\t\telement.detachEvent(<span class=\"string\">'on'</span> + type, handler)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\telement[<span class=\"string\">'on'</span> + type] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"事件代理-委托\"><a href=\"#事件代理-委托\" class=\"headerlink\" title=\"事件代理/ 委托\"></a>事件代理/ 委托</h4><p>由于事件处理程序越多, 性能越差, 所以有了事件处理程序. 事件代理的原理是基于事件的冒泡机制实现的, 由上级节点代理完成事件绑定, 优点是: </p>\n<blockquote>\n<p>节省内存占用, 减少事件注册. 比如在<code>ul</code>代理所有<code>li</code>的点击事件<br>动态新增子级时, 无需再次绑定事件.</p>\n</blockquote>\n<p>可能会提到<code>currentTarget</code>和<code>target</code>的区别: currentTarget 是注册事件时的目标(在事件处理程序中<code>this</code>始终指向 currentTarget), target 是真正触发事件的目标.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 事件注册时的元素</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.body === event.currentTarget); <span class=\"comment\">// true</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">document</span>.body); <span class=\"comment\">// true</span></span><br><span class=\"line\">\t<span class=\"comment\">// 真正点击的元素</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(event.target === <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#btn'</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h4><p>事件内置的 event 对象, 下面列举常用的几个事件对象属性:</p>\n<ul>\n<li>event || window.event</li>\n<li>event.preventDefault() || window.event.cancelBubble(Boolean)<br>阻止浏览器默认事件</li>\n<li>event.stopPropagation() || window.event.returnValue(Boolean)<br>阻止冒泡事件</li>\n<li>event.target || winow.event.srcElement</li>\n</ul>\n<p>Created on 2017-12-10 by Cara</p>\n","site":{"data":{}},"excerpt":"","more":"<p>JavaScript 和 HTML 交互是通过事件实现, 而事件处理程序订阅事件从而执行相应的操作.</p>\n<h4 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h4><p>事件流描述的是 从页面接收事件的顺序.<br>事件冒泡: 从最具体的元素到最不具体的元素(从内到外); — IE<br>事件捕获: 从最不具体的元素到最具体的元素(从外到内); — Netscape<br>DOM 事件流: 先捕获后冒泡的方式.</p>\n<p>DOM事件流包括三个阶段:</p>\n<ol>\n<li>捕获阶段 (IE 低版本不支持该阶段)</li>\n<li>目标阶段 (触发事件)</li>\n<li>冒泡阶段 (回传文档)</li>\n</ol>\n<h4 id=\"事件处理程序\"><a href=\"#事件处理程序\" class=\"headerlink\" title=\"事件处理程序\"></a>事件处理程序</h4><p>事件是用户或浏览器自身执行的动作, 事件处理程序(事件监听器)是响应事件的动作. 比如 click 事件的事件处理程序就是 onclick, 为事件指定处理程序的方式也有几种.</p>\n<h5 id=\"HTML-事件处理程序\"><a href=\"#HTML-事件处理程序\" class=\"headerlink\" title=\"HTML 事件处理程序\"></a>HTML 事件处理程序</h5><p>在标签上绑定事件处理程序, HTML 和 js 紧密耦合<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">'alert('</span><span class=\"attr\">clicked</span>')'&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"DOM-0级事件处理程序\"><a href=\"#DOM-0级事件处理程序\" class=\"headerlink\" title=\"DOM 0级事件处理程序\"></a>DOM 0级事件处理程序</h5><p>将一个函数赋值给一个事件处理程序属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#btn'</span>);</span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'clicked'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"DOM-2级事件处理程序\"><a href=\"#DOM-2级事件处理程序\" class=\"headerlink\" title=\"DOM 2级事件处理程序\"></a>DOM 2级事件处理程序</h5><p>定义了两个方法, 用于绑定事件处理程序和删除事件处理程序: <code>addEventListener()</code>和<code>removeEventListener()</code>. 所有的 DOM 节点都包含这两个方法, 方法有三个参数: 需要处理的事件名/ 处理函数/ 布尔值(true 为在捕获阶段调用; false 为在冒泡阶段调用)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#btn'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 绑定处理程序</span></span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'clicked'</span>)</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// 移除处理程序(移除处理程序时, 第二个参数必须和绑定时一样)</span></span><br><span class=\"line\">btn.removeEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'remove'</span>)</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"IE-和-DOM2级事件处理程序的区别\"><a href=\"#IE-和-DOM2级事件处理程序的区别\" class=\"headerlink\" title=\"IE 和  DOM2级事件处理程序的区别\"></a>IE 和  DOM2级事件处理程序的区别</h4><ul>\n<li>IE 事件处理程序<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = docuemnt.querySelector(<span class=\"string\">'#btn'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 绑定事件</span></span><br><span class=\"line\">btn.attachEvent(<span class=\"string\">'onclick'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// this === window</span></span><br><span class=\"line\">\talert(<span class=\"string\">'click on IE'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 移除事件</span></span><br><span class=\"line\">btn.detachEvent(<span class=\"string\">'onclick'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\talert(<span class=\"string\">'remove on IE'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>以上两种事件处理程序都支持绑定多个事件, DOM2级按照顺序</strong></p>\n<ul>\n<li>跨浏览器事件处理<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> EventUtil = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 绑定事件处理程序</span></span><br><span class=\"line\">\taddHanlder: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">\t\t\telement.addEventListener(type, handler, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">\t\t\telement.attachEvent(<span class=\"string\">'on'</span> + type, handler)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\telement[<span class=\"string\">'on'</span> + type] = handler;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 移除事件处理程序</span></span><br><span class=\"line\">\tremoveHandler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (element.removeEventListener) &#123;</span><br><span class=\"line\">\t\t\telement.removeEventListener(type, handler, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.detachEvent) &#123;</span><br><span class=\"line\">\t\t\telement.detachEvent(<span class=\"string\">'on'</span> + type, handler)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\telement[<span class=\"string\">'on'</span> + type] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"事件代理-委托\"><a href=\"#事件代理-委托\" class=\"headerlink\" title=\"事件代理/ 委托\"></a>事件代理/ 委托</h4><p>由于事件处理程序越多, 性能越差, 所以有了事件处理程序. 事件代理的原理是基于事件的冒泡机制实现的, 由上级节点代理完成事件绑定, 优点是: </p>\n<blockquote>\n<p>节省内存占用, 减少事件注册. 比如在<code>ul</code>代理所有<code>li</code>的点击事件<br>动态新增子级时, 无需再次绑定事件.</p>\n</blockquote>\n<p>可能会提到<code>currentTarget</code>和<code>target</code>的区别: currentTarget 是注册事件时的目标(在事件处理程序中<code>this</code>始终指向 currentTarget), target 是真正触发事件的目标.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 事件注册时的元素</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.body === event.currentTarget); <span class=\"comment\">// true</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">document</span>.body); <span class=\"comment\">// true</span></span><br><span class=\"line\">\t<span class=\"comment\">// 真正点击的元素</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(event.target === <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#btn'</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h4><p>事件内置的 event 对象, 下面列举常用的几个事件对象属性:</p>\n<ul>\n<li>event || window.event</li>\n<li>event.preventDefault() || window.event.cancelBubble(Boolean)<br>阻止浏览器默认事件</li>\n<li>event.stopPropagation() || window.event.returnValue(Boolean)<br>阻止冒泡事件</li>\n<li>event.target || winow.event.srcElement</li>\n</ul>\n<p>Created on 2017-12-10 by Cara</p>\n"},{"title":"位运算符","date":"2017-10-18T15:06:59.000Z","_content":"在C或者其他语言数值的运算其实都是先将数值转换为二进制在做运算的,\n而位运算符就是直接进行二进制运算, 因此速度会非常快. 但是对于JavaScript\n来说, 执行环境一般接触不到硬件, 所以性能完全不能和其他语言相比. 不过作为\n了解还是需要的, 只对较为常见的位运算符作记录.\n\n### 位运算 NOT\n位运算 NOT 由 ( ~ ) 符号表示, 其实就是对数值求负之后再减一, 如:\n\n```javascript\nlet num = 10;\nlet num2 = ~num;\n\n// ~num 效果同下\nnum2 = -num - 1;\n\nconsole.log(num2); // -11\n```\n\n### 左位移运算\n左位移运算由 ( << ) 符号表示. 将数值的所有位向左移动指定数量.例如: \n左移一位乘2, 左移2位乘4, 以此类推.\n\n```javascript\nlet num = 2;\nlet num2 = num << 2;\n\n// 效果同下\n num2 = num * 4;\n\nconsole.log(num2); // 8\n```\n\n### 有符号右移运算\n有符号右移运算符由 ( >> ) 符号表示, 将数值的所有为向右移动指定位数, \n同时保留该数的符号 (正号或者负号) . 有符号右移运算符跟左位移运算符正好\n相反.\n\n```javascript\nlet num = 12;\nlet num2 = num >> 2;\n\n// 效果同下\nnum2 = num / 4;\n\nconsole.log(num2) // 3\n```\n\n### 无符号右位移运算符\n无符号运算符由 ( >>> ) 符号表示, 对于正数无符号右位移运算符跟无符号右位移\n运算符规则相同; 负数时会出现无限大的数值, 所以决定使用无符号右位移运算符\n时一定要小心.\n","source":"_posts/位运算符.md","raw":"---\ntitle: 位运算符\ndate: 2017-10-18 23:06:59\ntags:\n- JavaScript\ncategories:\n- 笔记📒\n---\n在C或者其他语言数值的运算其实都是先将数值转换为二进制在做运算的,\n而位运算符就是直接进行二进制运算, 因此速度会非常快. 但是对于JavaScript\n来说, 执行环境一般接触不到硬件, 所以性能完全不能和其他语言相比. 不过作为\n了解还是需要的, 只对较为常见的位运算符作记录.\n\n### 位运算 NOT\n位运算 NOT 由 ( ~ ) 符号表示, 其实就是对数值求负之后再减一, 如:\n\n```javascript\nlet num = 10;\nlet num2 = ~num;\n\n// ~num 效果同下\nnum2 = -num - 1;\n\nconsole.log(num2); // -11\n```\n\n### 左位移运算\n左位移运算由 ( << ) 符号表示. 将数值的所有位向左移动指定数量.例如: \n左移一位乘2, 左移2位乘4, 以此类推.\n\n```javascript\nlet num = 2;\nlet num2 = num << 2;\n\n// 效果同下\n num2 = num * 4;\n\nconsole.log(num2); // 8\n```\n\n### 有符号右移运算\n有符号右移运算符由 ( >> ) 符号表示, 将数值的所有为向右移动指定位数, \n同时保留该数的符号 (正号或者负号) . 有符号右移运算符跟左位移运算符正好\n相反.\n\n```javascript\nlet num = 12;\nlet num2 = num >> 2;\n\n// 效果同下\nnum2 = num / 4;\n\nconsole.log(num2) // 3\n```\n\n### 无符号右位移运算符\n无符号运算符由 ( >>> ) 符号表示, 对于正数无符号右位移运算符跟无符号右位移\n运算符规则相同; 负数时会出现无限大的数值, 所以决定使用无符号右位移运算符\n时一定要小心.\n","slug":"位运算符","published":1,"updated":"2018-05-05T09:23:03.674Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolsv001gklu0jygctjsd","content":"<p>在C或者其他语言数值的运算其实都是先将数值转换为二进制在做运算的,<br>而位运算符就是直接进行二进制运算, 因此速度会非常快. 但是对于JavaScript<br>来说, 执行环境一般接触不到硬件, 所以性能完全不能和其他语言相比. 不过作为<br>了解还是需要的, 只对较为常见的位运算符作记录.</p>\n<h3 id=\"位运算-NOT\"><a href=\"#位运算-NOT\" class=\"headerlink\" title=\"位运算 NOT\"></a>位运算 NOT</h3><p>位运算 NOT 由 ( ~ ) 符号表示, 其实就是对数值求负之后再减一, 如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num2 = ~num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ~num 效果同下</span></span><br><span class=\"line\">num2 = -num - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2); <span class=\"comment\">// -11</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"左位移运算\"><a href=\"#左位移运算\" class=\"headerlink\" title=\"左位移运算\"></a>左位移运算</h3><p>左位移运算由 ( &lt;&lt; ) 符号表示. 将数值的所有位向左移动指定数量.例如:<br>左移一位乘2, 左移2位乘4, 以此类推.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num2 = num &lt;&lt; <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 效果同下</span></span><br><span class=\"line\"> num2 = num * <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2); <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"有符号右移运算\"><a href=\"#有符号右移运算\" class=\"headerlink\" title=\"有符号右移运算\"></a>有符号右移运算</h3><p>有符号右移运算符由 ( &gt;&gt; ) 符号表示, 将数值的所有为向右移动指定位数,<br>同时保留该数的符号 (正号或者负号) . 有符号右移运算符跟左位移运算符正好<br>相反.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num2 = num &gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 效果同下</span></span><br><span class=\"line\">num2 = num / <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"无符号右位移运算符\"><a href=\"#无符号右位移运算符\" class=\"headerlink\" title=\"无符号右位移运算符\"></a>无符号右位移运算符</h3><p>无符号运算符由 ( &gt;&gt;&gt; ) 符号表示, 对于正数无符号右位移运算符跟无符号右位移<br>运算符规则相同; 负数时会出现无限大的数值, 所以决定使用无符号右位移运算符<br>时一定要小心.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在C或者其他语言数值的运算其实都是先将数值转换为二进制在做运算的,<br>而位运算符就是直接进行二进制运算, 因此速度会非常快. 但是对于JavaScript<br>来说, 执行环境一般接触不到硬件, 所以性能完全不能和其他语言相比. 不过作为<br>了解还是需要的, 只对较为常见的位运算符作记录.</p>\n<h3 id=\"位运算-NOT\"><a href=\"#位运算-NOT\" class=\"headerlink\" title=\"位运算 NOT\"></a>位运算 NOT</h3><p>位运算 NOT 由 ( ~ ) 符号表示, 其实就是对数值求负之后再减一, 如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num2 = ~num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ~num 效果同下</span></span><br><span class=\"line\">num2 = -num - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2); <span class=\"comment\">// -11</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"左位移运算\"><a href=\"#左位移运算\" class=\"headerlink\" title=\"左位移运算\"></a>左位移运算</h3><p>左位移运算由 ( &lt;&lt; ) 符号表示. 将数值的所有位向左移动指定数量.例如:<br>左移一位乘2, 左移2位乘4, 以此类推.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num2 = num &lt;&lt; <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 效果同下</span></span><br><span class=\"line\"> num2 = num * <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2); <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"有符号右移运算\"><a href=\"#有符号右移运算\" class=\"headerlink\" title=\"有符号右移运算\"></a>有符号右移运算</h3><p>有符号右移运算符由 ( &gt;&gt; ) 符号表示, 将数值的所有为向右移动指定位数,<br>同时保留该数的符号 (正号或者负号) . 有符号右移运算符跟左位移运算符正好<br>相反.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num2 = num &gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 效果同下</span></span><br><span class=\"line\">num2 = num / <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"无符号右位移运算符\"><a href=\"#无符号右位移运算符\" class=\"headerlink\" title=\"无符号右位移运算符\"></a>无符号右位移运算符</h3><p>无符号运算符由 ( &gt;&gt;&gt; ) 符号表示, 对于正数无符号右位移运算符跟无符号右位移<br>运算符规则相同; 负数时会出现无限大的数值, 所以决定使用无符号右位移运算符<br>时一定要小心.</p>\n"},{"title":"关于移植 HEXO","date":"2017-10-14T10:47:02.000Z","_content":"\n迫于新买了台电脑, 所以要移植一下台式上的博客. 由于老是忘记 hexo 的官网所以在这儿附一个[hexo 官网](https://hexo.io/docs/)\n\n### 准备工作\n将原电脑上的博客源文件上传至 GitHub, 只要源文件相同那么博客会认为是同一个项目, 包括如下文件:\n\n<img src='http://ordnc4i2b.bkt.clouddn.com/blog_source.jpg' alt='blog_source_files'>\n\n其实主要需要的文件是`_conifg.yml`/ `source`文件夹和 `themes`文件夹, \n接下来新建一个仓库, 把这些文件上传上去.\n\n### 移植\n\n1. 在新电脑上克隆刚刚创建的这个项目\n\n<img src='http://ordnc4i2b.bkt.clouddn.com/17_10_14_blog.png' alt='git_clone_files'> \n\n2. 初始化新的博客\n    1. 新建一个文件夹\n    2. 命令行进入这个文件夹 `cnpm install hexo-cli -g` 全局安装 hexo(默认已经装过 [淘宝镜像](https://npm.taobao.org/))\n    3. 然后`cnpm install` 安装一下依赖项\n    3. 初始化完成之后, 把我们克隆下来的文件拷贝到这个文件夹, 覆盖掉初始化的文件.\n    4. 如果不想改之前的主题直接`hexo s` 就可以在本地跑起来了.\n\n### 更换主题\n其实更换 hexo 主题很简单, 首先我们先去官网选择一个自己喜欢的主题. [主题官网](https://hexo.io/themes/)\n\n1. 主题\n\n这里我选了个很简洁的主题[Anatole](https://github.com/Ben02/hexo-theme-Anatole), 进入这个主题的仓库, 一般作者都会告诉怎么样安装和一些必要的插件.\n\n2. 安装主题\n这里我直接下载 .zip 压缩包, 解压后把文件名更改为 anatole, 然后移动到你的博客路径下的`/themes` 文件夹内, 然后修改博客根目录下`_config.yml`中的`theme:`属性改为 anatole. (如果你是其他主题就改为你拷贝进来的主题文件夹的名称就好)\n\n3. 安装插件\n`npm install --save hexo-renderer-jade hexo-generator-archive`\n\n4. 预览及部署命令\n\n```javascript\n// 新建文章\nhexo new 'xxx'\n\n// 本地预览\nhexo s (hexo server)\n\n// 生成静态文件\nhexo g (hexo generate)\n\n// 部署网站 (部署网站前需要先生成静态文件)\nhexo d (hexo deploy)\n\n// 清除缓存\nhexo clean\n```\n\n如果部署时报错 Not Found git, 有可能时两个原因: \n1. 博客根目录下 `_config.yml` 中 `deploy.type` 如果是 `github` 那就改为 `git` (3.0版本更新的问题)\n2. 没有安装插件, 执行命令`npm install hexo-deployer-git --save`\n    \n\n\n\n\n","source":"_posts/关于移植-HEXO.md","raw":"---\ntitle: 关于移植 HEXO\ndate: 2017-10-14 18:47:02\ntags: hexo\ncategories:\n- 笔记📒\n---\n\n迫于新买了台电脑, 所以要移植一下台式上的博客. 由于老是忘记 hexo 的官网所以在这儿附一个[hexo 官网](https://hexo.io/docs/)\n\n### 准备工作\n将原电脑上的博客源文件上传至 GitHub, 只要源文件相同那么博客会认为是同一个项目, 包括如下文件:\n\n<img src='http://ordnc4i2b.bkt.clouddn.com/blog_source.jpg' alt='blog_source_files'>\n\n其实主要需要的文件是`_conifg.yml`/ `source`文件夹和 `themes`文件夹, \n接下来新建一个仓库, 把这些文件上传上去.\n\n### 移植\n\n1. 在新电脑上克隆刚刚创建的这个项目\n\n<img src='http://ordnc4i2b.bkt.clouddn.com/17_10_14_blog.png' alt='git_clone_files'> \n\n2. 初始化新的博客\n    1. 新建一个文件夹\n    2. 命令行进入这个文件夹 `cnpm install hexo-cli -g` 全局安装 hexo(默认已经装过 [淘宝镜像](https://npm.taobao.org/))\n    3. 然后`cnpm install` 安装一下依赖项\n    3. 初始化完成之后, 把我们克隆下来的文件拷贝到这个文件夹, 覆盖掉初始化的文件.\n    4. 如果不想改之前的主题直接`hexo s` 就可以在本地跑起来了.\n\n### 更换主题\n其实更换 hexo 主题很简单, 首先我们先去官网选择一个自己喜欢的主题. [主题官网](https://hexo.io/themes/)\n\n1. 主题\n\n这里我选了个很简洁的主题[Anatole](https://github.com/Ben02/hexo-theme-Anatole), 进入这个主题的仓库, 一般作者都会告诉怎么样安装和一些必要的插件.\n\n2. 安装主题\n这里我直接下载 .zip 压缩包, 解压后把文件名更改为 anatole, 然后移动到你的博客路径下的`/themes` 文件夹内, 然后修改博客根目录下`_config.yml`中的`theme:`属性改为 anatole. (如果你是其他主题就改为你拷贝进来的主题文件夹的名称就好)\n\n3. 安装插件\n`npm install --save hexo-renderer-jade hexo-generator-archive`\n\n4. 预览及部署命令\n\n```javascript\n// 新建文章\nhexo new 'xxx'\n\n// 本地预览\nhexo s (hexo server)\n\n// 生成静态文件\nhexo g (hexo generate)\n\n// 部署网站 (部署网站前需要先生成静态文件)\nhexo d (hexo deploy)\n\n// 清除缓存\nhexo clean\n```\n\n如果部署时报错 Not Found git, 有可能时两个原因: \n1. 博客根目录下 `_config.yml` 中 `deploy.type` 如果是 `github` 那就改为 `git` (3.0版本更新的问题)\n2. 没有安装插件, 执行命令`npm install hexo-deployer-git --save`\n    \n\n\n\n\n","slug":"关于移植-HEXO","published":1,"updated":"2018-05-05T09:23:03.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolsw001kklu0bqcj0dcd","content":"<p>迫于新买了台电脑, 所以要移植一下台式上的博客. 由于老是忘记 hexo 的官网所以在这儿附一个<a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">hexo 官网</a></p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>将原电脑上的博客源文件上传至 GitHub, 只要源文件相同那么博客会认为是同一个项目, 包括如下文件:</p>\n<p><img src=\"http://ordnc4i2b.bkt.clouddn.com/blog_source.jpg\" alt=\"blog_source_files\"></p>\n<p>其实主要需要的文件是<code>_conifg.yml</code>/ <code>source</code>文件夹和 <code>themes</code>文件夹,<br>接下来新建一个仓库, 把这些文件上传上去.</p>\n<h3 id=\"移植\"><a href=\"#移植\" class=\"headerlink\" title=\"移植\"></a>移植</h3><ol>\n<li>在新电脑上克隆刚刚创建的这个项目</li>\n</ol>\n<p><img src=\"http://ordnc4i2b.bkt.clouddn.com/17_10_14_blog.png\" alt=\"git_clone_files\"> </p>\n<ol start=\"2\">\n<li>初始化新的博客<ol>\n<li>新建一个文件夹</li>\n<li>命令行进入这个文件夹 <code>cnpm install hexo-cli -g</code> 全局安装 hexo(默认已经装过 <a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝镜像</a>)</li>\n<li>然后<code>cnpm install</code> 安装一下依赖项</li>\n<li>初始化完成之后, 把我们克隆下来的文件拷贝到这个文件夹, 覆盖掉初始化的文件.</li>\n<li>如果不想改之前的主题直接<code>hexo s</code> 就可以在本地跑起来了.</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h3><p>其实更换 hexo 主题很简单, 首先我们先去官网选择一个自己喜欢的主题. <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题官网</a></p>\n<ol>\n<li>主题</li>\n</ol>\n<p>这里我选了个很简洁的主题<a href=\"https://github.com/Ben02/hexo-theme-Anatole\" target=\"_blank\" rel=\"noopener\">Anatole</a>, 进入这个主题的仓库, 一般作者都会告诉怎么样安装和一些必要的插件.</p>\n<ol start=\"2\">\n<li><p>安装主题<br>这里我直接下载 .zip 压缩包, 解压后把文件名更改为 anatole, 然后移动到你的博客路径下的<code>/themes</code> 文件夹内, 然后修改博客根目录下<code>_config.yml</code>中的<code>theme:</code>属性改为 anatole. (如果你是其他主题就改为你拷贝进来的主题文件夹的名称就好)</p>\n</li>\n<li><p>安装插件<br><code>npm install --save hexo-renderer-jade hexo-generator-archive</code></p>\n</li>\n<li><p>预览及部署命令</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建文章</span></span><br><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">'xxx'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 本地预览</span></span><br><span class=\"line\">hexo s (hexo server)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成静态文件</span></span><br><span class=\"line\">hexo g (hexo generate)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 部署网站 (部署网站前需要先生成静态文件)</span></span><br><span class=\"line\">hexo d (hexo deploy)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清除缓存</span></span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<p>如果部署时报错 Not Found git, 有可能时两个原因: </p>\n<ol>\n<li>博客根目录下 <code>_config.yml</code> 中 <code>deploy.type</code> 如果是 <code>github</code> 那就改为 <code>git</code> (3.0版本更新的问题)</li>\n<li>没有安装插件, 执行命令<code>npm install hexo-deployer-git --save</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>迫于新买了台电脑, 所以要移植一下台式上的博客. 由于老是忘记 hexo 的官网所以在这儿附一个<a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">hexo 官网</a></p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>将原电脑上的博客源文件上传至 GitHub, 只要源文件相同那么博客会认为是同一个项目, 包括如下文件:</p>\n<p><img src=\"http://ordnc4i2b.bkt.clouddn.com/blog_source.jpg\" alt=\"blog_source_files\"></p>\n<p>其实主要需要的文件是<code>_conifg.yml</code>/ <code>source</code>文件夹和 <code>themes</code>文件夹,<br>接下来新建一个仓库, 把这些文件上传上去.</p>\n<h3 id=\"移植\"><a href=\"#移植\" class=\"headerlink\" title=\"移植\"></a>移植</h3><ol>\n<li>在新电脑上克隆刚刚创建的这个项目</li>\n</ol>\n<p><img src=\"http://ordnc4i2b.bkt.clouddn.com/17_10_14_blog.png\" alt=\"git_clone_files\"> </p>\n<ol start=\"2\">\n<li>初始化新的博客<ol>\n<li>新建一个文件夹</li>\n<li>命令行进入这个文件夹 <code>cnpm install hexo-cli -g</code> 全局安装 hexo(默认已经装过 <a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝镜像</a>)</li>\n<li>然后<code>cnpm install</code> 安装一下依赖项</li>\n<li>初始化完成之后, 把我们克隆下来的文件拷贝到这个文件夹, 覆盖掉初始化的文件.</li>\n<li>如果不想改之前的主题直接<code>hexo s</code> 就可以在本地跑起来了.</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h3><p>其实更换 hexo 主题很简单, 首先我们先去官网选择一个自己喜欢的主题. <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题官网</a></p>\n<ol>\n<li>主题</li>\n</ol>\n<p>这里我选了个很简洁的主题<a href=\"https://github.com/Ben02/hexo-theme-Anatole\" target=\"_blank\" rel=\"noopener\">Anatole</a>, 进入这个主题的仓库, 一般作者都会告诉怎么样安装和一些必要的插件.</p>\n<ol start=\"2\">\n<li><p>安装主题<br>这里我直接下载 .zip 压缩包, 解压后把文件名更改为 anatole, 然后移动到你的博客路径下的<code>/themes</code> 文件夹内, 然后修改博客根目录下<code>_config.yml</code>中的<code>theme:</code>属性改为 anatole. (如果你是其他主题就改为你拷贝进来的主题文件夹的名称就好)</p>\n</li>\n<li><p>安装插件<br><code>npm install --save hexo-renderer-jade hexo-generator-archive</code></p>\n</li>\n<li><p>预览及部署命令</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建文章</span></span><br><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">'xxx'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 本地预览</span></span><br><span class=\"line\">hexo s (hexo server)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成静态文件</span></span><br><span class=\"line\">hexo g (hexo generate)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 部署网站 (部署网站前需要先生成静态文件)</span></span><br><span class=\"line\">hexo d (hexo deploy)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清除缓存</span></span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<p>如果部署时报错 Not Found git, 有可能时两个原因: </p>\n<ol>\n<li>博客根目录下 <code>_config.yml</code> 中 <code>deploy.type</code> 如果是 <code>github</code> 那就改为 <code>git</code> (3.0版本更新的问题)</li>\n<li>没有安装插件, 执行命令<code>npm install hexo-deployer-git --save</code></li>\n</ol>\n"},{"title":"声明提升","date":"2017-12-20T13:54:07.000Z","_content":"在说声明提升之前, 首先应该了解三个概念性的东西, 执行上下文(Execution Context)/ 变量对象(Variable Object)和活动对象(Activation Object), 这三个概念是在 ES3 中出现的.\n\n- 执行上下文(Execution Context)\n执行上下文也可以说是 js 代码的运行环境, 代码一旦被加载 js 的解释器首先进入的就是这个环境. 他有全局的执行上下文和函数的执行上下文(eval 不说, 它内部也有), js 的解释器默认先进入的是全局上下文所以我们一开始就能直接使用一些的内置方法, 比如: Array/ Number… 每当一个函数被调用时, 就会创建他自己的执行上下文, 每个执行上下文都有一个与之关联的变量对象.\n\n- 作用域链(也称调用栈)\n知道了每当一个函数调用时会创建自己的执行上下文, 这个执行上下文就会被添加到作用域链的顶端. 而解释器总是先运行作用域链顶端的执行上下文, 一旦函数调用完毕, 它的执行上下文就会从作用域链的顶端移除并将控制权交由上一个执行上下文, 直到回到全局上下文. 如下图所示:\n![执行环境](/img/event-loop.gif)\n\n\n- 变量对象(Variable Object)\n当执行上下文创建后, 进入建立阶段(函数调用, 具体代码执行之前), 在这个阶段变量对象/ 作用域链/ `this`的指向都会被确定. 变量对像会按顺序填充:\n1. 函数参数(没有就是 undefined)\n2. 函数声明(命名冲突, 会覆盖之前的)\n3. 变量声明(值为 undefined, 命名冲突, 会被忽略)\n\n- 活动对象(也称激活对象)\n函数调用活动对象就作为变量对象, 所以在函数调用时`变量对象 === 活动对象`, 活动对象会先包含`arguments`对象及方法.\n\n还是看个代码来说吧: \n```javascript\nfunction foo (i) {\n\tvar a = 'hello'\n\tvar b = function bar () {}\n\tfunction c () {}\n}\nfoo(11)\n// 建立阶段\nfooExecutionContext = {\n\tvariableObject: {\n\t\targuments: {\n\t\t\t0: 11,\n\t\t\tlength: 1\n\t\t},\n\t\ti: 11, // 只有参数被赋值\n\t\tc: pointer to function c()\n\t\ta: undefined,\n\t\tb: undefined,\n\t},\n\tscopeChain: {...},\n\tthis: {...}\n}\n// 执行阶段\nfooExecutionContext = {\n\tvariableObject: {\n\t\targuments: {\n\t\t\t0: 11,\n\t\t\tlength: 1\n\t\t},\n\t\ti: 11,\n\t\tc: pointer to function c(),\n\t\ta: 'hello', // 变量在这个时候才被赋值\n\t\tb: pointer to function bar()\n\t},\n\tscopeChain: {...},\n\tthis: {...}\n}\n```\n以上三个概念都无法用过代码访问, 是解释器在后台使用.","source":"_posts/声明提升.md","raw":"---\ntitle: '声明提升'\ndate: 2017-12-20 21:54:07\ntags:\n- JavaScript\ncategories:\n- 笔记📒\n---\n在说声明提升之前, 首先应该了解三个概念性的东西, 执行上下文(Execution Context)/ 变量对象(Variable Object)和活动对象(Activation Object), 这三个概念是在 ES3 中出现的.\n\n- 执行上下文(Execution Context)\n执行上下文也可以说是 js 代码的运行环境, 代码一旦被加载 js 的解释器首先进入的就是这个环境. 他有全局的执行上下文和函数的执行上下文(eval 不说, 它内部也有), js 的解释器默认先进入的是全局上下文所以我们一开始就能直接使用一些的内置方法, 比如: Array/ Number… 每当一个函数被调用时, 就会创建他自己的执行上下文, 每个执行上下文都有一个与之关联的变量对象.\n\n- 作用域链(也称调用栈)\n知道了每当一个函数调用时会创建自己的执行上下文, 这个执行上下文就会被添加到作用域链的顶端. 而解释器总是先运行作用域链顶端的执行上下文, 一旦函数调用完毕, 它的执行上下文就会从作用域链的顶端移除并将控制权交由上一个执行上下文, 直到回到全局上下文. 如下图所示:\n![执行环境](/img/event-loop.gif)\n\n\n- 变量对象(Variable Object)\n当执行上下文创建后, 进入建立阶段(函数调用, 具体代码执行之前), 在这个阶段变量对象/ 作用域链/ `this`的指向都会被确定. 变量对像会按顺序填充:\n1. 函数参数(没有就是 undefined)\n2. 函数声明(命名冲突, 会覆盖之前的)\n3. 变量声明(值为 undefined, 命名冲突, 会被忽略)\n\n- 活动对象(也称激活对象)\n函数调用活动对象就作为变量对象, 所以在函数调用时`变量对象 === 活动对象`, 活动对象会先包含`arguments`对象及方法.\n\n还是看个代码来说吧: \n```javascript\nfunction foo (i) {\n\tvar a = 'hello'\n\tvar b = function bar () {}\n\tfunction c () {}\n}\nfoo(11)\n// 建立阶段\nfooExecutionContext = {\n\tvariableObject: {\n\t\targuments: {\n\t\t\t0: 11,\n\t\t\tlength: 1\n\t\t},\n\t\ti: 11, // 只有参数被赋值\n\t\tc: pointer to function c()\n\t\ta: undefined,\n\t\tb: undefined,\n\t},\n\tscopeChain: {...},\n\tthis: {...}\n}\n// 执行阶段\nfooExecutionContext = {\n\tvariableObject: {\n\t\targuments: {\n\t\t\t0: 11,\n\t\t\tlength: 1\n\t\t},\n\t\ti: 11,\n\t\tc: pointer to function c(),\n\t\ta: 'hello', // 变量在这个时候才被赋值\n\t\tb: pointer to function bar()\n\t},\n\tscopeChain: {...},\n\tthis: {...}\n}\n```\n以上三个概念都无法用过代码访问, 是解释器在后台使用.","slug":"声明提升","published":1,"updated":"2018-05-05T09:23:03.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolsx001nklu0joal8sv0","content":"<p>在说声明提升之前, 首先应该了解三个概念性的东西, 执行上下文(Execution Context)/ 变量对象(Variable Object)和活动对象(Activation Object), 这三个概念是在 ES3 中出现的.</p>\n<ul>\n<li><p>执行上下文(Execution Context)<br>执行上下文也可以说是 js 代码的运行环境, 代码一旦被加载 js 的解释器首先进入的就是这个环境. 他有全局的执行上下文和函数的执行上下文(eval 不说, 它内部也有), js 的解释器默认先进入的是全局上下文所以我们一开始就能直接使用一些的内置方法, 比如: Array/ Number… 每当一个函数被调用时, 就会创建他自己的执行上下文, 每个执行上下文都有一个与之关联的变量对象.</p>\n</li>\n<li><p>作用域链(也称调用栈)<br>知道了每当一个函数调用时会创建自己的执行上下文, 这个执行上下文就会被添加到作用域链的顶端. 而解释器总是先运行作用域链顶端的执行上下文, 一旦函数调用完毕, 它的执行上下文就会从作用域链的顶端移除并将控制权交由上一个执行上下文, 直到回到全局上下文. 如下图所示:<br><img src=\"/img/event-loop.gif\" alt=\"执行环境\"></p>\n</li>\n</ul>\n<ul>\n<li>变量对象(Variable Object)<br>当执行上下文创建后, 进入建立阶段(函数调用, 具体代码执行之前), 在这个阶段变量对象/ 作用域链/ <code>this</code>的指向都会被确定. 变量对像会按顺序填充:</li>\n</ul>\n<ol>\n<li>函数参数(没有就是 undefined)</li>\n<li>函数声明(命名冲突, 会覆盖之前的)</li>\n<li>变量声明(值为 undefined, 命名冲突, 会被忽略)</li>\n</ol>\n<ul>\n<li>活动对象(也称激活对象)<br>函数调用活动对象就作为变量对象, 所以在函数调用时<code>变量对象 === 活动对象</code>, 活动对象会先包含<code>arguments</code>对象及方法.</li>\n</ul>\n<p>还是看个代码来说吧:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"string\">'hello'</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(<span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"comment\">// 建立阶段</span></span><br><span class=\"line\">fooExecutionContext = &#123;</span><br><span class=\"line\">\tvariableObject: &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">arguments</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"number\">0</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\">\t\t\tlength: <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\ti: <span class=\"number\">11</span>, <span class=\"comment\">// 只有参数被赋值</span></span><br><span class=\"line\">\t\tc: pointer to <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">a</span>: <span class=\"title\">undefined</span>,</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">b</span>: <span class=\"title\">undefined</span>,</span></span><br><span class=\"line\"><span class=\"function\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">scopeChain</span>: </span>&#123;...&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 执行阶段</span></span><br><span class=\"line\">fooExecutionContext = &#123;</span><br><span class=\"line\">\tvariableObject: &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">arguments</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"number\">0</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\">\t\t\tlength: <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\ti: <span class=\"number\">11</span>,</span><br><span class=\"line\">\t\tc: pointer to <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>),</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">a</span>: '<span class=\"title\">hello</span>', // 变量在这个时候才被赋值</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">b</span>: <span class=\"title\">pointer</span> <span class=\"title\">to</span> <span class=\"title\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">scopeChain</span>: </span>&#123;...&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上三个概念都无法用过代码访问, 是解释器在后台使用.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在说声明提升之前, 首先应该了解三个概念性的东西, 执行上下文(Execution Context)/ 变量对象(Variable Object)和活动对象(Activation Object), 这三个概念是在 ES3 中出现的.</p>\n<ul>\n<li><p>执行上下文(Execution Context)<br>执行上下文也可以说是 js 代码的运行环境, 代码一旦被加载 js 的解释器首先进入的就是这个环境. 他有全局的执行上下文和函数的执行上下文(eval 不说, 它内部也有), js 的解释器默认先进入的是全局上下文所以我们一开始就能直接使用一些的内置方法, 比如: Array/ Number… 每当一个函数被调用时, 就会创建他自己的执行上下文, 每个执行上下文都有一个与之关联的变量对象.</p>\n</li>\n<li><p>作用域链(也称调用栈)<br>知道了每当一个函数调用时会创建自己的执行上下文, 这个执行上下文就会被添加到作用域链的顶端. 而解释器总是先运行作用域链顶端的执行上下文, 一旦函数调用完毕, 它的执行上下文就会从作用域链的顶端移除并将控制权交由上一个执行上下文, 直到回到全局上下文. 如下图所示:<br><img src=\"/img/event-loop.gif\" alt=\"执行环境\"></p>\n</li>\n</ul>\n<ul>\n<li>变量对象(Variable Object)<br>当执行上下文创建后, 进入建立阶段(函数调用, 具体代码执行之前), 在这个阶段变量对象/ 作用域链/ <code>this</code>的指向都会被确定. 变量对像会按顺序填充:</li>\n</ul>\n<ol>\n<li>函数参数(没有就是 undefined)</li>\n<li>函数声明(命名冲突, 会覆盖之前的)</li>\n<li>变量声明(值为 undefined, 命名冲突, 会被忽略)</li>\n</ol>\n<ul>\n<li>活动对象(也称激活对象)<br>函数调用活动对象就作为变量对象, 所以在函数调用时<code>变量对象 === 活动对象</code>, 活动对象会先包含<code>arguments</code>对象及方法.</li>\n</ul>\n<p>还是看个代码来说吧:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"string\">'hello'</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(<span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"comment\">// 建立阶段</span></span><br><span class=\"line\">fooExecutionContext = &#123;</span><br><span class=\"line\">\tvariableObject: &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">arguments</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"number\">0</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\">\t\t\tlength: <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\ti: <span class=\"number\">11</span>, <span class=\"comment\">// 只有参数被赋值</span></span><br><span class=\"line\">\t\tc: pointer to <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">a</span>: <span class=\"title\">undefined</span>,</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">b</span>: <span class=\"title\">undefined</span>,</span></span><br><span class=\"line\"><span class=\"function\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">scopeChain</span>: </span>&#123;...&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 执行阶段</span></span><br><span class=\"line\">fooExecutionContext = &#123;</span><br><span class=\"line\">\tvariableObject: &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">arguments</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"number\">0</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\">\t\t\tlength: <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\ti: <span class=\"number\">11</span>,</span><br><span class=\"line\">\t\tc: pointer to <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>),</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">a</span>: '<span class=\"title\">hello</span>', // 变量在这个时候才被赋值</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">b</span>: <span class=\"title\">pointer</span> <span class=\"title\">to</span> <span class=\"title\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">scopeChain</span>: </span>&#123;...&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上三个概念都无法用过代码访问, 是解释器在后台使用.</p>\n"},{"title":"盒模型","date":"2017-10-21T15:58:06.000Z","_content":"`CSS` 盒模型 (Box Model), 包含的要素分别为: content/padding/border/margin.\n\n### 标准盒模型 & 怪异盒模型\n盒模型分为W3C的标准盒模型和IE的标准盒模型.\n\n- 标准盒模型\n`content + padding+ border + margin`  标准盒模型的 content 是不包含其他部分的, 如下图:\n![W3C-BOX](http://orf90agxq.bkt.clouddn.com/GitHub/boxW3C_BOX.jpeg)\n\n- IE标准盒模型\n`content(padding + border) + margin` 而IE标准盒模型的 content 已经包含padding和border的值, 如下图: \n![IE-BOX](http://orf90agxq.bkt.clouddn.com/GitHub/boxIE_BOX.jpeg)\n\n在文档顶部声明 `DOCTYPE` 就是为了让浏览器使用 W3C标准盒模型, 但是在 IE5/ IE6 下依然是 IE 标准盒模型. 当然通过`box-sizing`属性可以在两者之间转换.\n\n#### 常见问题\n\n1. 两个垂直方向相邻的块级元素相遇时, 外边距会合并且取值两者较大值的 `margin` 作为外边距.\n```css\n解决方案:\n *{\n    margin: 0; \n    padding: 0\n}\n```\n\n2. margin 出轨... \n当父元素没有 `border` 边框时, 第一个子元素添加 `margin-top` 会超出父元素, 相同最后一个子元素添加 `margin-bottom` 也同样会超出父元素, 如下图: \n\n- 第一个子元素添加 margin-top\n![marginTop](http://orf90agxq.bkt.clouddn.com/box_modelmargin.png)\n\n- 最后一个子元素添加 margin-bottom\n![marginBottom](http://orf90agxq.bkt.clouddn.com/box_modelmarginBottom.png)\n\n- 前两者同时存在时, 父元素添加 border\n![marginBottom](http://orf90agxq.bkt.clouddn.com/box_modelborder.png)\n\n解决方案有四种: \n> 1. 给父元素添加 border.\n\n> 2. 给父元素添加 padding.\n\n> 3. 给父元素添加 overflow: hidden.\n\n> 4. 给父元素添加伪类. (最佳)\n```css\n.parent {\n    content: '';\n    display: table;\n}\n```\n\nCreated on 2017-8-15 by Cara\n","source":"_posts/盒模型.md","raw":"---\ntitle: 盒模型\ndate: 2017-10-21 23:58:06\ntags:\n- CSS\ncategories:\n- 复习\n---\n`CSS` 盒模型 (Box Model), 包含的要素分别为: content/padding/border/margin.\n\n### 标准盒模型 & 怪异盒模型\n盒模型分为W3C的标准盒模型和IE的标准盒模型.\n\n- 标准盒模型\n`content + padding+ border + margin`  标准盒模型的 content 是不包含其他部分的, 如下图:\n![W3C-BOX](http://orf90agxq.bkt.clouddn.com/GitHub/boxW3C_BOX.jpeg)\n\n- IE标准盒模型\n`content(padding + border) + margin` 而IE标准盒模型的 content 已经包含padding和border的值, 如下图: \n![IE-BOX](http://orf90agxq.bkt.clouddn.com/GitHub/boxIE_BOX.jpeg)\n\n在文档顶部声明 `DOCTYPE` 就是为了让浏览器使用 W3C标准盒模型, 但是在 IE5/ IE6 下依然是 IE 标准盒模型. 当然通过`box-sizing`属性可以在两者之间转换.\n\n#### 常见问题\n\n1. 两个垂直方向相邻的块级元素相遇时, 外边距会合并且取值两者较大值的 `margin` 作为外边距.\n```css\n解决方案:\n *{\n    margin: 0; \n    padding: 0\n}\n```\n\n2. margin 出轨... \n当父元素没有 `border` 边框时, 第一个子元素添加 `margin-top` 会超出父元素, 相同最后一个子元素添加 `margin-bottom` 也同样会超出父元素, 如下图: \n\n- 第一个子元素添加 margin-top\n![marginTop](http://orf90agxq.bkt.clouddn.com/box_modelmargin.png)\n\n- 最后一个子元素添加 margin-bottom\n![marginBottom](http://orf90agxq.bkt.clouddn.com/box_modelmarginBottom.png)\n\n- 前两者同时存在时, 父元素添加 border\n![marginBottom](http://orf90agxq.bkt.clouddn.com/box_modelborder.png)\n\n解决方案有四种: \n> 1. 给父元素添加 border.\n\n> 2. 给父元素添加 padding.\n\n> 3. 给父元素添加 overflow: hidden.\n\n> 4. 给父元素添加伪类. (最佳)\n```css\n.parent {\n    content: '';\n    display: table;\n}\n```\n\nCreated on 2017-8-15 by Cara\n","slug":"盒模型","published":1,"updated":"2018-05-05T09:23:03.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolsz001rklu0ub6gw88t","content":"<p><code>CSS</code> 盒模型 (Box Model), 包含的要素分别为: content/padding/border/margin.</p>\n<h3 id=\"标准盒模型-amp-怪异盒模型\"><a href=\"#标准盒模型-amp-怪异盒模型\" class=\"headerlink\" title=\"标准盒模型 &amp; 怪异盒模型\"></a>标准盒模型 &amp; 怪异盒模型</h3><p>盒模型分为W3C的标准盒模型和IE的标准盒模型.</p>\n<ul>\n<li><p>标准盒模型<br><code>content + padding+ border + margin</code>  标准盒模型的 content 是不包含其他部分的, 如下图:<br><img src=\"http://orf90agxq.bkt.clouddn.com/GitHub/boxW3C_BOX.jpeg\" alt=\"W3C-BOX\"></p>\n</li>\n<li><p>IE标准盒模型<br><code>content(padding + border) + margin</code> 而IE标准盒模型的 content 已经包含padding和border的值, 如下图:<br><img src=\"http://orf90agxq.bkt.clouddn.com/GitHub/boxIE_BOX.jpeg\" alt=\"IE-BOX\"></p>\n</li>\n</ul>\n<p>在文档顶部声明 <code>DOCTYPE</code> 就是为了让浏览器使用 W3C标准盒模型, 但是在 IE5/ IE6 下依然是 IE 标准盒模型. 当然通过<code>box-sizing</code>属性可以在两者之间转换.</p>\n<h4 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><ol>\n<li><p>两个垂直方向相邻的块级元素相遇时, 外边距会合并且取值两者较大值的 <code>margin</code> 作为外边距.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方案:</span><br><span class=\"line\"> *&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>margin 出轨…<br>当父元素没有 <code>border</code> 边框时, 第一个子元素添加 <code>margin-top</code> 会超出父元素, 相同最后一个子元素添加 <code>margin-bottom</code> 也同样会超出父元素, 如下图: </p>\n</li>\n</ol>\n<ul>\n<li><p>第一个子元素添加 margin-top<br><img src=\"http://orf90agxq.bkt.clouddn.com/box_modelmargin.png\" alt=\"marginTop\"></p>\n</li>\n<li><p>最后一个子元素添加 margin-bottom<br><img src=\"http://orf90agxq.bkt.clouddn.com/box_modelmarginBottom.png\" alt=\"marginBottom\"></p>\n</li>\n<li><p>前两者同时存在时, 父元素添加 border<br><img src=\"http://orf90agxq.bkt.clouddn.com/box_modelborder.png\" alt=\"marginBottom\"></p>\n</li>\n</ul>\n<p>解决方案有四种: </p>\n<blockquote>\n<ol>\n<li>给父元素添加 border.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>给父元素添加 padding.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>给父元素添加 overflow: hidden.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"4\">\n<li>给父元素添加伪类. (最佳)<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>Created on 2017-8-15 by Cara</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>CSS</code> 盒模型 (Box Model), 包含的要素分别为: content/padding/border/margin.</p>\n<h3 id=\"标准盒模型-amp-怪异盒模型\"><a href=\"#标准盒模型-amp-怪异盒模型\" class=\"headerlink\" title=\"标准盒模型 &amp; 怪异盒模型\"></a>标准盒模型 &amp; 怪异盒模型</h3><p>盒模型分为W3C的标准盒模型和IE的标准盒模型.</p>\n<ul>\n<li><p>标准盒模型<br><code>content + padding+ border + margin</code>  标准盒模型的 content 是不包含其他部分的, 如下图:<br><img src=\"http://orf90agxq.bkt.clouddn.com/GitHub/boxW3C_BOX.jpeg\" alt=\"W3C-BOX\"></p>\n</li>\n<li><p>IE标准盒模型<br><code>content(padding + border) + margin</code> 而IE标准盒模型的 content 已经包含padding和border的值, 如下图:<br><img src=\"http://orf90agxq.bkt.clouddn.com/GitHub/boxIE_BOX.jpeg\" alt=\"IE-BOX\"></p>\n</li>\n</ul>\n<p>在文档顶部声明 <code>DOCTYPE</code> 就是为了让浏览器使用 W3C标准盒模型, 但是在 IE5/ IE6 下依然是 IE 标准盒模型. 当然通过<code>box-sizing</code>属性可以在两者之间转换.</p>\n<h4 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><ol>\n<li><p>两个垂直方向相邻的块级元素相遇时, 外边距会合并且取值两者较大值的 <code>margin</code> 作为外边距.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方案:</span><br><span class=\"line\"> *&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>margin 出轨…<br>当父元素没有 <code>border</code> 边框时, 第一个子元素添加 <code>margin-top</code> 会超出父元素, 相同最后一个子元素添加 <code>margin-bottom</code> 也同样会超出父元素, 如下图: </p>\n</li>\n</ol>\n<ul>\n<li><p>第一个子元素添加 margin-top<br><img src=\"http://orf90agxq.bkt.clouddn.com/box_modelmargin.png\" alt=\"marginTop\"></p>\n</li>\n<li><p>最后一个子元素添加 margin-bottom<br><img src=\"http://orf90agxq.bkt.clouddn.com/box_modelmarginBottom.png\" alt=\"marginBottom\"></p>\n</li>\n<li><p>前两者同时存在时, 父元素添加 border<br><img src=\"http://orf90agxq.bkt.clouddn.com/box_modelborder.png\" alt=\"marginBottom\"></p>\n</li>\n</ul>\n<p>解决方案有四种: </p>\n<blockquote>\n<ol>\n<li>给父元素添加 border.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>给父元素添加 padding.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>给父元素添加 overflow: hidden.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"4\">\n<li>给父元素添加伪类. (最佳)<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>Created on 2017-8-15 by Cara</p>\n"},{"title":"跨域","date":"2018-04-02T09:01:24.000Z","_content":"跨域这块是前后端分离必经的一条路, 这次好好整理一下关于跨域方面知识.\n\n### 什么是跨域?\n跨域是受同源策略的影响而导致的, 指一个源下的资源试图操作另一个源下的资源.\n\n> 那么, 什么又是同源策略呢?\n> 就是限制从一个源的资源如何与另一个源的资源交互, 用于隔离潜在的恶意文件, 保证文件的安全性. 所谓的同源是指: 协议/域名/端口 三者相同, 即使两个不同的域名指向同一个 IP 地址, 也非同源. 如果没有同源策略, 浏览器很容易受到 XSS/CSRF 等的攻击(XSS: 跨站脚本攻击;CSRF: 跨站请求伪造).\n\n同源策略将限制以下行为:\n- Cookie/LocalStorage/IndexDB\n- DOM 无法获得\n- Ajax 请求无法发送\n\n### 跨域解决方案\n\n#### 1. JSONP\n它的特性是简单/ 兼容性好/ 改造小, 但是不支持 POST 请求. 原理是通过 `script` 标签放入回调函数, 服务端将返回数据塞入回调函数即可.\n\n```js\nconst createScript = url => {\n    let script = document.createElement('script')\n    script.type = 'text/javascript'\n    script.src = url\n    document.body.appendChild(script)\n}\n\n// 传入请求地址\ncreateScript('http://www.example.com/api?callback=foo')\n\n// 回调函数\nfunction foo (data) {\n    // 服务端返回数据\n    console.log(data)\n}\n```\n\n#### 2. document.domain\n通过设置域名来访问 `Cookie` 和 操作 `iframe` 窗口, 此方案只适用于主域相同, 子域不同的场景.\n\n```html\n// 父窗口 (http://www.main.com/a.html)\n<iframe id='iframe' src='http://www.child.main.com/b.html'></iframe>\n<script>\n    document.domain = 'main.com'\n    document.cookie = 'test=hi'\n    var user = 'admin'\n</script>\n\n\n// 子窗口 (http://www.child.main.com/b.html)\n<script>\n    document.domain = 'example.com'\n    let parentMessage = document.cookie\n    console.log(window.parent.user)\n</script>\n```\n\n#### 3. window.location.hash\n通过修改 hash 值来传递参数, 修改 hash 值并不会刷新页面但字节数有限制.\n\n```js\n// 父窗口向子窗口写入 hash\nlet src = `${childUrl}#test=hi`\ndocument.querySelector('#iframe').src = src\n\n// 子窗口\n// 接收消息\nwindow.onhashchange = () => {\n    let meg = window.location.hash\n}\n// 子窗口向父窗口写入 hash\nwindow.parent.href = `${window.parent.href}#world`\n```\n\n#### 4. window.name\nwindow.name 只要在同一个窗口, 无论是否同源前一个页面设置了这个属性, 后一个页面就能读取. 它可以支持2M 大小的值但是变化需要自己监听.\n\n```js\n// 父窗口 (http://www.main.com/a.html)\nconst proxy = (url, callback) => {\n    const iframe = document.createElement('iframe')\n    let state = 0\n\n    // 跳转到跨域页面\n    iframe.src = url\n\n    iframe.onload = () => {\n        if (state === 1) {\n            // 第二次代理也加载成功之后, 读取 name 属性\n            callback(window.name)\n            document.body.removeChild(iframe);\n        } else if (state === 0) {\n            //  第一次跳转到代理页面\n            iframe.src = 'http://www.main.com/proxy.html'\n            state = 1\n        }\n    }\n    document.body.appendChild(iframe)\n}\n\n// 传入跨域页面 URL\nproxy('http://www.child.com/b.html', (name) => {\n    console.log(name) // 'This message from b.html'\n})\n\n// 跨域子窗口 (http://www.child.com/b.html) \n// 设置 name 属性\nwindow.name = 'This message from b.html'\n```\n\n#### 5. postMessage\npostMessage(跨文档通信) 是 HTML5 中为了解决跨域出的 API, 可以解决以下几种问题:\n\n1. 页面和其打开的新窗口的数据传递\n2. 多窗口之间消息传递\n3. 页面与嵌套的iframe消息传递\n4. 上面三个场景的跨域数据传递\n\n发送消息通过 `postMessage(data, origin)` 方法, 该方法接收两个参数: \n- data: 需要传递的参数, 由于部分浏览器只支持字符串, 所以传递之前最好先 `JSON.stringify()` 序列化\n- origin: 是接收方的 协议 + 主机 + 端口, 可以是设置为 `*`, 指定与当前窗口同源的话设置为 `/`.\n\n接收消息通过 `message` 事件监听, 该事件有一个 `event` 参数提供三个属性:\n- event.origin: 消息接收方\n- event.source: 消息来源\n- event.data: 消息体\n\n```html\n// 父窗口 (http://www.main.com/a.html)\n<firame id='iframe' src='http://www.child.com/b.html'></iframe>\n<script>\n    let iframe = document.querySelector('#iframe')\n    let url = iframe.src\n    iframe.onload = () => {\n        let data = {\n            name: 'parent',\n            message: 'This message from parent'\n        }\n        // 跨域向子窗口发送消息\n        iframe.contentWindow.postMessage(JSON.stringify(data), url)\n    }\n\n    // 父窗口监听子窗口发送的消息\n    window.onmessage = (event) => {\n        // 过滤不属于自己的消息\n        if (data.origin !== 'http://www.main.com/a.html') return\n        console.log('data from child: ' + event.data)\n    }\n</script>\n\n// 子窗口 (http://www.child.com/b.html)\n<script>\n    window.onmessage = (event) => {\n        console.log('data from main: ' + event.data)\n        let data = JSON.parse(event.data)\n        data.name = 'child'\n\n        // 收到消息后处理再发送给父窗口\n        window.parent.postMessage(JSON.stringify(data), 'http://www.main.com/a.html')\n    }\n</script>\n```\n\n#### 5. CORS\n跨域资源共享(Cross-origin-resource-sharing), 它允许浏览器向跨源服务器发出 `XMLHttpRequest` 请求. CORS 现在也是主流的跨域解决方案, 这种方式只需要后端做处理, 如果要带上 cookie 那么前后端都要设置.\n\n带 cookie 传输:\n```js\nxhr.withCredentials = true\n```\n\n请求实例:\n```js\nconst XMLRequest = (method = 'GET', url = '', data = null) => {\n    let xhr = null\n    if (window.XMLHttpRequest) {\n        xhr = new XMLHttpRequest()\n    } else {\n        xhr = new ActiveXObject('Microsoft.XMLHTTP')\n    }\n\n    xhr.open(method, url, true)\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\n    xhr.send(data)\n\n    xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            console.log(xhr.responseText)\n        }\n    }\n}\n\nXMLRequest('POST', 'http://www.example.com/api', {\n    name: 'cara'\n})\n```\n\n其中 `readyState` 有五种状态:\n0: 为初始化\n1: 服务器连接建立\n2: 请求已接收\n3: 请求处理中\n4: 请求已完成\n\n#### 6. 代理服务器\n其实就是通过配置 nginx 实现一个中间服务器作跳板, 代理到目标服务器.\n\n静态资源代理\n```config\nlocation / {\n    add_header Access-Control-Allow-Origin *;\n}\n```\n\n具体代理配置\n```config\nserver {\n    listen 81;\n    server_name www.example.com;\n\n    lication / {\n        # 反向代理\n        proxy_pass http://www.example2.com:8080;\n        # 修改 cookie 域名\n        proxy_cookie_domain www.example2.com www.example.com;\n        index index.html index.htm;\n\n        # 不带 cookie 时才能设置为 *\n        add_header Access-Control-Allow-Origin http://www.example.com;\n        add_header Access-Control-Allow-Credentials true;\n    }\n}\n```\n\n调用示例\n```js\nlet xhr = new XMLHttpRequest()\n\nxhr.withCredentials = true\nxhr.open('GET', 'htt://www.example.com:81/?user=admin', true)\nxhr.send(null)\n```\n\n以上, 就是跨域导致的原因以及解决方案的大致总结.\n\nCreated on 2018-4-2 by Cara","source":"_posts/跨域.md","raw":"---\ntitle: 跨域\ndate: 2018-04-02 17:01:24\ntags:\n- JavaScript\ncategories: \n- 复习\n---\n跨域这块是前后端分离必经的一条路, 这次好好整理一下关于跨域方面知识.\n\n### 什么是跨域?\n跨域是受同源策略的影响而导致的, 指一个源下的资源试图操作另一个源下的资源.\n\n> 那么, 什么又是同源策略呢?\n> 就是限制从一个源的资源如何与另一个源的资源交互, 用于隔离潜在的恶意文件, 保证文件的安全性. 所谓的同源是指: 协议/域名/端口 三者相同, 即使两个不同的域名指向同一个 IP 地址, 也非同源. 如果没有同源策略, 浏览器很容易受到 XSS/CSRF 等的攻击(XSS: 跨站脚本攻击;CSRF: 跨站请求伪造).\n\n同源策略将限制以下行为:\n- Cookie/LocalStorage/IndexDB\n- DOM 无法获得\n- Ajax 请求无法发送\n\n### 跨域解决方案\n\n#### 1. JSONP\n它的特性是简单/ 兼容性好/ 改造小, 但是不支持 POST 请求. 原理是通过 `script` 标签放入回调函数, 服务端将返回数据塞入回调函数即可.\n\n```js\nconst createScript = url => {\n    let script = document.createElement('script')\n    script.type = 'text/javascript'\n    script.src = url\n    document.body.appendChild(script)\n}\n\n// 传入请求地址\ncreateScript('http://www.example.com/api?callback=foo')\n\n// 回调函数\nfunction foo (data) {\n    // 服务端返回数据\n    console.log(data)\n}\n```\n\n#### 2. document.domain\n通过设置域名来访问 `Cookie` 和 操作 `iframe` 窗口, 此方案只适用于主域相同, 子域不同的场景.\n\n```html\n// 父窗口 (http://www.main.com/a.html)\n<iframe id='iframe' src='http://www.child.main.com/b.html'></iframe>\n<script>\n    document.domain = 'main.com'\n    document.cookie = 'test=hi'\n    var user = 'admin'\n</script>\n\n\n// 子窗口 (http://www.child.main.com/b.html)\n<script>\n    document.domain = 'example.com'\n    let parentMessage = document.cookie\n    console.log(window.parent.user)\n</script>\n```\n\n#### 3. window.location.hash\n通过修改 hash 值来传递参数, 修改 hash 值并不会刷新页面但字节数有限制.\n\n```js\n// 父窗口向子窗口写入 hash\nlet src = `${childUrl}#test=hi`\ndocument.querySelector('#iframe').src = src\n\n// 子窗口\n// 接收消息\nwindow.onhashchange = () => {\n    let meg = window.location.hash\n}\n// 子窗口向父窗口写入 hash\nwindow.parent.href = `${window.parent.href}#world`\n```\n\n#### 4. window.name\nwindow.name 只要在同一个窗口, 无论是否同源前一个页面设置了这个属性, 后一个页面就能读取. 它可以支持2M 大小的值但是变化需要自己监听.\n\n```js\n// 父窗口 (http://www.main.com/a.html)\nconst proxy = (url, callback) => {\n    const iframe = document.createElement('iframe')\n    let state = 0\n\n    // 跳转到跨域页面\n    iframe.src = url\n\n    iframe.onload = () => {\n        if (state === 1) {\n            // 第二次代理也加载成功之后, 读取 name 属性\n            callback(window.name)\n            document.body.removeChild(iframe);\n        } else if (state === 0) {\n            //  第一次跳转到代理页面\n            iframe.src = 'http://www.main.com/proxy.html'\n            state = 1\n        }\n    }\n    document.body.appendChild(iframe)\n}\n\n// 传入跨域页面 URL\nproxy('http://www.child.com/b.html', (name) => {\n    console.log(name) // 'This message from b.html'\n})\n\n// 跨域子窗口 (http://www.child.com/b.html) \n// 设置 name 属性\nwindow.name = 'This message from b.html'\n```\n\n#### 5. postMessage\npostMessage(跨文档通信) 是 HTML5 中为了解决跨域出的 API, 可以解决以下几种问题:\n\n1. 页面和其打开的新窗口的数据传递\n2. 多窗口之间消息传递\n3. 页面与嵌套的iframe消息传递\n4. 上面三个场景的跨域数据传递\n\n发送消息通过 `postMessage(data, origin)` 方法, 该方法接收两个参数: \n- data: 需要传递的参数, 由于部分浏览器只支持字符串, 所以传递之前最好先 `JSON.stringify()` 序列化\n- origin: 是接收方的 协议 + 主机 + 端口, 可以是设置为 `*`, 指定与当前窗口同源的话设置为 `/`.\n\n接收消息通过 `message` 事件监听, 该事件有一个 `event` 参数提供三个属性:\n- event.origin: 消息接收方\n- event.source: 消息来源\n- event.data: 消息体\n\n```html\n// 父窗口 (http://www.main.com/a.html)\n<firame id='iframe' src='http://www.child.com/b.html'></iframe>\n<script>\n    let iframe = document.querySelector('#iframe')\n    let url = iframe.src\n    iframe.onload = () => {\n        let data = {\n            name: 'parent',\n            message: 'This message from parent'\n        }\n        // 跨域向子窗口发送消息\n        iframe.contentWindow.postMessage(JSON.stringify(data), url)\n    }\n\n    // 父窗口监听子窗口发送的消息\n    window.onmessage = (event) => {\n        // 过滤不属于自己的消息\n        if (data.origin !== 'http://www.main.com/a.html') return\n        console.log('data from child: ' + event.data)\n    }\n</script>\n\n// 子窗口 (http://www.child.com/b.html)\n<script>\n    window.onmessage = (event) => {\n        console.log('data from main: ' + event.data)\n        let data = JSON.parse(event.data)\n        data.name = 'child'\n\n        // 收到消息后处理再发送给父窗口\n        window.parent.postMessage(JSON.stringify(data), 'http://www.main.com/a.html')\n    }\n</script>\n```\n\n#### 5. CORS\n跨域资源共享(Cross-origin-resource-sharing), 它允许浏览器向跨源服务器发出 `XMLHttpRequest` 请求. CORS 现在也是主流的跨域解决方案, 这种方式只需要后端做处理, 如果要带上 cookie 那么前后端都要设置.\n\n带 cookie 传输:\n```js\nxhr.withCredentials = true\n```\n\n请求实例:\n```js\nconst XMLRequest = (method = 'GET', url = '', data = null) => {\n    let xhr = null\n    if (window.XMLHttpRequest) {\n        xhr = new XMLHttpRequest()\n    } else {\n        xhr = new ActiveXObject('Microsoft.XMLHTTP')\n    }\n\n    xhr.open(method, url, true)\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\n    xhr.send(data)\n\n    xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            console.log(xhr.responseText)\n        }\n    }\n}\n\nXMLRequest('POST', 'http://www.example.com/api', {\n    name: 'cara'\n})\n```\n\n其中 `readyState` 有五种状态:\n0: 为初始化\n1: 服务器连接建立\n2: 请求已接收\n3: 请求处理中\n4: 请求已完成\n\n#### 6. 代理服务器\n其实就是通过配置 nginx 实现一个中间服务器作跳板, 代理到目标服务器.\n\n静态资源代理\n```config\nlocation / {\n    add_header Access-Control-Allow-Origin *;\n}\n```\n\n具体代理配置\n```config\nserver {\n    listen 81;\n    server_name www.example.com;\n\n    lication / {\n        # 反向代理\n        proxy_pass http://www.example2.com:8080;\n        # 修改 cookie 域名\n        proxy_cookie_domain www.example2.com www.example.com;\n        index index.html index.htm;\n\n        # 不带 cookie 时才能设置为 *\n        add_header Access-Control-Allow-Origin http://www.example.com;\n        add_header Access-Control-Allow-Credentials true;\n    }\n}\n```\n\n调用示例\n```js\nlet xhr = new XMLHttpRequest()\n\nxhr.withCredentials = true\nxhr.open('GET', 'htt://www.example.com:81/?user=admin', true)\nxhr.send(null)\n```\n\n以上, 就是跨域导致的原因以及解决方案的大致总结.\n\nCreated on 2018-4-2 by Cara","slug":"跨域","published":1,"updated":"2018-05-05T09:23:03.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolt0001uklu0ol9onrig","content":"<p>跨域这块是前后端分离必经的一条路, 这次好好整理一下关于跨域方面知识.</p>\n<h3 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域?\"></a>什么是跨域?</h3><p>跨域是受同源策略的影响而导致的, 指一个源下的资源试图操作另一个源下的资源.</p>\n<blockquote>\n<p>那么, 什么又是同源策略呢?<br>就是限制从一个源的资源如何与另一个源的资源交互, 用于隔离潜在的恶意文件, 保证文件的安全性. 所谓的同源是指: 协议/域名/端口 三者相同, 即使两个不同的域名指向同一个 IP 地址, 也非同源. 如果没有同源策略, 浏览器很容易受到 XSS/CSRF 等的攻击(XSS: 跨站脚本攻击;CSRF: 跨站请求伪造).</p>\n</blockquote>\n<p>同源策略将限制以下行为:</p>\n<ul>\n<li>Cookie/LocalStorage/IndexDB</li>\n<li>DOM 无法获得</li>\n<li>Ajax 请求无法发送</li>\n</ul>\n<h3 id=\"跨域解决方案\"><a href=\"#跨域解决方案\" class=\"headerlink\" title=\"跨域解决方案\"></a>跨域解决方案</h3><h4 id=\"1-JSONP\"><a href=\"#1-JSONP\" class=\"headerlink\" title=\"1. JSONP\"></a>1. JSONP</h4><p>它的特性是简单/ 兼容性好/ 改造小, 但是不支持 POST 请求. 原理是通过 <code>script</code> 标签放入回调函数, 服务端将返回数据塞入回调函数即可.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> createScript = <span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>)</span><br><span class=\"line\">    script.type = <span class=\"string\">'text/javascript'</span></span><br><span class=\"line\">    script.src = url</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(script)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入请求地址</span></span><br><span class=\"line\">createScript(<span class=\"string\">'http://www.example.com/api?callback=foo'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 服务端返回数据</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-document-domain\"><a href=\"#2-document-domain\" class=\"headerlink\" title=\"2. document.domain\"></a>2. document.domain</h4><p>通过设置域名来访问 <code>Cookie</code> 和 操作 <code>iframe</code> 窗口, 此方案只适用于主域相同, 子域不同的场景.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 父窗口 (http://www.main.com/a.html)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">id</span>=<span class=\"string\">'iframe'</span> <span class=\"attr\">src</span>=<span class=\"string\">'http://www.child.main.com/b.html'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.domain = <span class=\"string\">'main.com'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.cookie = <span class=\"string\">'test=hi'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> user = <span class=\"string\">'admin'</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 子窗口 (http://www.child.main.com/b.html)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.domain = <span class=\"string\">'example.com'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> parentMessage = <span class=\"built_in\">document</span>.cookie</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.parent.user)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-window-location-hash\"><a href=\"#3-window-location-hash\" class=\"headerlink\" title=\"3. window.location.hash\"></a>3. window.location.hash</h4><p>通过修改 hash 值来传递参数, 修改 hash 值并不会刷新页面但字节数有限制.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父窗口向子窗口写入 hash</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> src = <span class=\"string\">`<span class=\"subst\">$&#123;childUrl&#125;</span>#test=hi`</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#iframe'</span>).src = src</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子窗口</span></span><br><span class=\"line\"><span class=\"comment\">// 接收消息</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onhashchange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> meg = <span class=\"built_in\">window</span>.location.hash</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子窗口向父窗口写入 hash</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.parent.href = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.parent.href&#125;</span>#world`</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-window-name\"><a href=\"#4-window-name\" class=\"headerlink\" title=\"4. window.name\"></a>4. window.name</h4><p>window.name 只要在同一个窗口, 无论是否同源前一个页面设置了这个属性, 后一个页面就能读取. 它可以支持2M 大小的值但是变化需要自己监听.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父窗口 (http://www.main.com/a.html)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"function\">(<span class=\"params\">url, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> state = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 跳转到跨域页面</span></span><br><span class=\"line\">    iframe.src = url</span><br><span class=\"line\"></span><br><span class=\"line\">    iframe.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第二次代理也加载成功之后, 读取 name 属性</span></span><br><span class=\"line\">            callback(<span class=\"built_in\">window</span>.name)</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.removeChild(iframe);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (state === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//  第一次跳转到代理页面</span></span><br><span class=\"line\">            iframe.src = <span class=\"string\">'http://www.main.com/proxy.html'</span></span><br><span class=\"line\">            state = <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(iframe)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入跨域页面 URL</span></span><br><span class=\"line\">proxy(<span class=\"string\">'http://www.child.com/b.html'</span>, (name) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name) <span class=\"comment\">// 'This message from b.html'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 跨域子窗口 (http://www.child.com/b.html) </span></span><br><span class=\"line\"><span class=\"comment\">// 设置 name 属性</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'This message from b.html'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-postMessage\"><a href=\"#5-postMessage\" class=\"headerlink\" title=\"5. postMessage\"></a>5. postMessage</h4><p>postMessage(跨文档通信) 是 HTML5 中为了解决跨域出的 API, 可以解决以下几种问题:</p>\n<ol>\n<li>页面和其打开的新窗口的数据传递</li>\n<li>多窗口之间消息传递</li>\n<li>页面与嵌套的iframe消息传递</li>\n<li>上面三个场景的跨域数据传递</li>\n</ol>\n<p>发送消息通过 <code>postMessage(data, origin)</code> 方法, 该方法接收两个参数: </p>\n<ul>\n<li>data: 需要传递的参数, 由于部分浏览器只支持字符串, 所以传递之前最好先 <code>JSON.stringify()</code> 序列化</li>\n<li>origin: 是接收方的 协议 + 主机 + 端口, 可以是设置为 <code>*</code>, 指定与当前窗口同源的话设置为 <code>/</code>.</li>\n</ul>\n<p>接收消息通过 <code>message</code> 事件监听, 该事件有一个 <code>event</code> 参数提供三个属性:</p>\n<ul>\n<li>event.origin: 消息接收方</li>\n<li>event.source: 消息来源</li>\n<li>event.data: 消息体</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 父窗口 (http://www.main.com/a.html)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">firame</span> <span class=\"attr\">id</span>=<span class=\"string\">'iframe'</span> <span class=\"attr\">src</span>=<span class=\"string\">'http://www.child.com/b.html'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> iframe = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#iframe'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> url = iframe.src</span></span><br><span class=\"line\"><span class=\"javascript\">    iframe.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> data = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            name: <span class=\"string\">'parent'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            message: <span class=\"string\">'This message from parent'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 跨域向子窗口发送消息</span></span></span><br><span class=\"line\"><span class=\"javascript\">        iframe.contentWindow.postMessage(<span class=\"built_in\">JSON</span>.stringify(data), url)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 父窗口监听子窗口发送的消息</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.onmessage = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 过滤不属于自己的消息</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (data.origin !== <span class=\"string\">'http://www.main.com/a.html'</span>) <span class=\"keyword\">return</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'data from child: '</span> + event.data)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 子窗口 (http://www.child.com/b.html)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.onmessage = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'data from main: '</span> + event.data)</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> data = <span class=\"built_in\">JSON</span>.parse(event.data)</span></span><br><span class=\"line\"><span class=\"javascript\">        data.name = <span class=\"string\">'child'</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 收到消息后处理再发送给父窗口</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.parent.postMessage(<span class=\"built_in\">JSON</span>.stringify(data), <span class=\"string\">'http://www.main.com/a.html'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-CORS\"><a href=\"#5-CORS\" class=\"headerlink\" title=\"5. CORS\"></a>5. CORS</h4><p>跨域资源共享(Cross-origin-resource-sharing), 它允许浏览器向跨源服务器发出 <code>XMLHttpRequest</code> 请求. CORS 现在也是主流的跨域解决方案, 这种方式只需要后端做处理, 如果要带上 cookie 那么前后端都要设置.</p>\n<p>带 cookie 传输:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.withCredentials = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>请求实例:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> XMLRequest = <span class=\"function\">(<span class=\"params\">method = <span class=\"string\">'GET'</span>, url = <span class=\"string\">''</span>, data = <span class=\"literal\">null</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> xhr = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.open(method, url, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    xhr.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>)</span><br><span class=\"line\">    xhr.send(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.onreadystatechange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xhr.readyState === <span class=\"number\">4</span> &amp;&amp; xhr.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(xhr.responseText)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">XMLRequest(<span class=\"string\">'POST'</span>, <span class=\"string\">'http://www.example.com/api'</span>, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'cara'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>其中 <code>readyState</code> 有五种状态:<br>0: 为初始化<br>1: 服务器连接建立<br>2: 请求已接收<br>3: 请求处理中<br>4: 请求已完成</p>\n<h4 id=\"6-代理服务器\"><a href=\"#6-代理服务器\" class=\"headerlink\" title=\"6. 代理服务器\"></a>6. 代理服务器</h4><p>其实就是通过配置 nginx 实现一个中间服务器作跳板, 代理到目标服务器.</p>\n<p>静态资源代理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    add_header Access-Control-Allow-Origin *;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>具体代理配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 81;</span><br><span class=\"line\">    server_name www.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    lication / &#123;</span><br><span class=\"line\">        # 反向代理</span><br><span class=\"line\">        proxy_pass http://www.example2.com:8080;</span><br><span class=\"line\">        # 修改 cookie 域名</span><br><span class=\"line\">        proxy_cookie_domain www.example2.com www.example.com;</span><br><span class=\"line\">        index index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 不带 cookie 时才能设置为 *</span><br><span class=\"line\">        add_header Access-Control-Allow-Origin http://www.example.com;</span><br><span class=\"line\">        add_header Access-Control-Allow-Credentials true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>调用示例<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.withCredentials = <span class=\"literal\">true</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'htt://www.example.com:81/?user=admin'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">xhr.send(<span class=\"literal\">null</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上, 就是跨域导致的原因以及解决方案的大致总结.</p>\n<p>Created on 2018-4-2 by Cara</p>\n","site":{"data":{}},"excerpt":"","more":"<p>跨域这块是前后端分离必经的一条路, 这次好好整理一下关于跨域方面知识.</p>\n<h3 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域?\"></a>什么是跨域?</h3><p>跨域是受同源策略的影响而导致的, 指一个源下的资源试图操作另一个源下的资源.</p>\n<blockquote>\n<p>那么, 什么又是同源策略呢?<br>就是限制从一个源的资源如何与另一个源的资源交互, 用于隔离潜在的恶意文件, 保证文件的安全性. 所谓的同源是指: 协议/域名/端口 三者相同, 即使两个不同的域名指向同一个 IP 地址, 也非同源. 如果没有同源策略, 浏览器很容易受到 XSS/CSRF 等的攻击(XSS: 跨站脚本攻击;CSRF: 跨站请求伪造).</p>\n</blockquote>\n<p>同源策略将限制以下行为:</p>\n<ul>\n<li>Cookie/LocalStorage/IndexDB</li>\n<li>DOM 无法获得</li>\n<li>Ajax 请求无法发送</li>\n</ul>\n<h3 id=\"跨域解决方案\"><a href=\"#跨域解决方案\" class=\"headerlink\" title=\"跨域解决方案\"></a>跨域解决方案</h3><h4 id=\"1-JSONP\"><a href=\"#1-JSONP\" class=\"headerlink\" title=\"1. JSONP\"></a>1. JSONP</h4><p>它的特性是简单/ 兼容性好/ 改造小, 但是不支持 POST 请求. 原理是通过 <code>script</code> 标签放入回调函数, 服务端将返回数据塞入回调函数即可.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> createScript = <span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>)</span><br><span class=\"line\">    script.type = <span class=\"string\">'text/javascript'</span></span><br><span class=\"line\">    script.src = url</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(script)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入请求地址</span></span><br><span class=\"line\">createScript(<span class=\"string\">'http://www.example.com/api?callback=foo'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 服务端返回数据</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-document-domain\"><a href=\"#2-document-domain\" class=\"headerlink\" title=\"2. document.domain\"></a>2. document.domain</h4><p>通过设置域名来访问 <code>Cookie</code> 和 操作 <code>iframe</code> 窗口, 此方案只适用于主域相同, 子域不同的场景.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 父窗口 (http://www.main.com/a.html)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">id</span>=<span class=\"string\">'iframe'</span> <span class=\"attr\">src</span>=<span class=\"string\">'http://www.child.main.com/b.html'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.domain = <span class=\"string\">'main.com'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.cookie = <span class=\"string\">'test=hi'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> user = <span class=\"string\">'admin'</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 子窗口 (http://www.child.main.com/b.html)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.domain = <span class=\"string\">'example.com'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> parentMessage = <span class=\"built_in\">document</span>.cookie</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.parent.user)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-window-location-hash\"><a href=\"#3-window-location-hash\" class=\"headerlink\" title=\"3. window.location.hash\"></a>3. window.location.hash</h4><p>通过修改 hash 值来传递参数, 修改 hash 值并不会刷新页面但字节数有限制.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父窗口向子窗口写入 hash</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> src = <span class=\"string\">`<span class=\"subst\">$&#123;childUrl&#125;</span>#test=hi`</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#iframe'</span>).src = src</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子窗口</span></span><br><span class=\"line\"><span class=\"comment\">// 接收消息</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onhashchange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> meg = <span class=\"built_in\">window</span>.location.hash</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子窗口向父窗口写入 hash</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.parent.href = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.parent.href&#125;</span>#world`</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-window-name\"><a href=\"#4-window-name\" class=\"headerlink\" title=\"4. window.name\"></a>4. window.name</h4><p>window.name 只要在同一个窗口, 无论是否同源前一个页面设置了这个属性, 后一个页面就能读取. 它可以支持2M 大小的值但是变化需要自己监听.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父窗口 (http://www.main.com/a.html)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"function\">(<span class=\"params\">url, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> state = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 跳转到跨域页面</span></span><br><span class=\"line\">    iframe.src = url</span><br><span class=\"line\"></span><br><span class=\"line\">    iframe.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第二次代理也加载成功之后, 读取 name 属性</span></span><br><span class=\"line\">            callback(<span class=\"built_in\">window</span>.name)</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.removeChild(iframe);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (state === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//  第一次跳转到代理页面</span></span><br><span class=\"line\">            iframe.src = <span class=\"string\">'http://www.main.com/proxy.html'</span></span><br><span class=\"line\">            state = <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(iframe)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入跨域页面 URL</span></span><br><span class=\"line\">proxy(<span class=\"string\">'http://www.child.com/b.html'</span>, (name) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name) <span class=\"comment\">// 'This message from b.html'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 跨域子窗口 (http://www.child.com/b.html) </span></span><br><span class=\"line\"><span class=\"comment\">// 设置 name 属性</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'This message from b.html'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-postMessage\"><a href=\"#5-postMessage\" class=\"headerlink\" title=\"5. postMessage\"></a>5. postMessage</h4><p>postMessage(跨文档通信) 是 HTML5 中为了解决跨域出的 API, 可以解决以下几种问题:</p>\n<ol>\n<li>页面和其打开的新窗口的数据传递</li>\n<li>多窗口之间消息传递</li>\n<li>页面与嵌套的iframe消息传递</li>\n<li>上面三个场景的跨域数据传递</li>\n</ol>\n<p>发送消息通过 <code>postMessage(data, origin)</code> 方法, 该方法接收两个参数: </p>\n<ul>\n<li>data: 需要传递的参数, 由于部分浏览器只支持字符串, 所以传递之前最好先 <code>JSON.stringify()</code> 序列化</li>\n<li>origin: 是接收方的 协议 + 主机 + 端口, 可以是设置为 <code>*</code>, 指定与当前窗口同源的话设置为 <code>/</code>.</li>\n</ul>\n<p>接收消息通过 <code>message</code> 事件监听, 该事件有一个 <code>event</code> 参数提供三个属性:</p>\n<ul>\n<li>event.origin: 消息接收方</li>\n<li>event.source: 消息来源</li>\n<li>event.data: 消息体</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 父窗口 (http://www.main.com/a.html)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">firame</span> <span class=\"attr\">id</span>=<span class=\"string\">'iframe'</span> <span class=\"attr\">src</span>=<span class=\"string\">'http://www.child.com/b.html'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> iframe = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#iframe'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> url = iframe.src</span></span><br><span class=\"line\"><span class=\"javascript\">    iframe.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> data = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            name: <span class=\"string\">'parent'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            message: <span class=\"string\">'This message from parent'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 跨域向子窗口发送消息</span></span></span><br><span class=\"line\"><span class=\"javascript\">        iframe.contentWindow.postMessage(<span class=\"built_in\">JSON</span>.stringify(data), url)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 父窗口监听子窗口发送的消息</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.onmessage = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 过滤不属于自己的消息</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (data.origin !== <span class=\"string\">'http://www.main.com/a.html'</span>) <span class=\"keyword\">return</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'data from child: '</span> + event.data)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 子窗口 (http://www.child.com/b.html)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.onmessage = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'data from main: '</span> + event.data)</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> data = <span class=\"built_in\">JSON</span>.parse(event.data)</span></span><br><span class=\"line\"><span class=\"javascript\">        data.name = <span class=\"string\">'child'</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 收到消息后处理再发送给父窗口</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.parent.postMessage(<span class=\"built_in\">JSON</span>.stringify(data), <span class=\"string\">'http://www.main.com/a.html'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-CORS\"><a href=\"#5-CORS\" class=\"headerlink\" title=\"5. CORS\"></a>5. CORS</h4><p>跨域资源共享(Cross-origin-resource-sharing), 它允许浏览器向跨源服务器发出 <code>XMLHttpRequest</code> 请求. CORS 现在也是主流的跨域解决方案, 这种方式只需要后端做处理, 如果要带上 cookie 那么前后端都要设置.</p>\n<p>带 cookie 传输:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.withCredentials = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>请求实例:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> XMLRequest = <span class=\"function\">(<span class=\"params\">method = <span class=\"string\">'GET'</span>, url = <span class=\"string\">''</span>, data = <span class=\"literal\">null</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> xhr = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.open(method, url, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    xhr.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>)</span><br><span class=\"line\">    xhr.send(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.onreadystatechange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xhr.readyState === <span class=\"number\">4</span> &amp;&amp; xhr.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(xhr.responseText)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">XMLRequest(<span class=\"string\">'POST'</span>, <span class=\"string\">'http://www.example.com/api'</span>, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'cara'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>其中 <code>readyState</code> 有五种状态:<br>0: 为初始化<br>1: 服务器连接建立<br>2: 请求已接收<br>3: 请求处理中<br>4: 请求已完成</p>\n<h4 id=\"6-代理服务器\"><a href=\"#6-代理服务器\" class=\"headerlink\" title=\"6. 代理服务器\"></a>6. 代理服务器</h4><p>其实就是通过配置 nginx 实现一个中间服务器作跳板, 代理到目标服务器.</p>\n<p>静态资源代理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    add_header Access-Control-Allow-Origin *;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>具体代理配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 81;</span><br><span class=\"line\">    server_name www.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    lication / &#123;</span><br><span class=\"line\">        # 反向代理</span><br><span class=\"line\">        proxy_pass http://www.example2.com:8080;</span><br><span class=\"line\">        # 修改 cookie 域名</span><br><span class=\"line\">        proxy_cookie_domain www.example2.com www.example.com;</span><br><span class=\"line\">        index index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 不带 cookie 时才能设置为 *</span><br><span class=\"line\">        add_header Access-Control-Allow-Origin http://www.example.com;</span><br><span class=\"line\">        add_header Access-Control-Allow-Credentials true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>调用示例<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.withCredentials = <span class=\"literal\">true</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'htt://www.example.com:81/?user=admin'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">xhr.send(<span class=\"literal\">null</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上, 就是跨域导致的原因以及解决方案的大致总结.</p>\n<p>Created on 2018-4-2 by Cara</p>\n"},{"title":"网络摄像机直播","date":"2018-05-06T06:49:04.000Z","_content":"对于网络摄像机做视频预览这块, 本身其实是非常陌生的, 当时接到这个需求也是相当的头疼(对于当时一年经验不到的我来说).当时我们的应用场景是: 多路网络摄像机通过局域网连接, PC 端能够实时预览监控画面并且画质达到720p, 延迟不能超过10秒, 多个摄像机能够切换查看. 由于后端只提供一个 RTSP 的直播协议, 所以所有的方案都是围绕着 RTSP 这个关键词. 当时时间很赶所以要自己慢慢研究是不可能了, 只能去找现成的库.\n\n> 现目前用过三种方案, 都不完美.\n\n### 整体思路\n经过一波调研(google)之后, 知道浏览器对 RTSP 协议并不友好, 也就是说我们必须要自己转码再提供给浏览器使用, 找到的解决思路大概是:\n\n1. 转码: [FFmpeg](https://www.ffmpeg.org/) 是一个老牌的转码工具, 非常强大\n2. Node.js 用作中转站接收客户端发来的摄像机信息及控制 FFmpeg 推流\n3. 最终客户端接收视频流\n\n下面我试过的三种方案, 基本结构都如此只是推流的方式和客户端的接收方式有所不同.\n\n### 准备\n\n**安装 FFmpeg 转码工具**\n\n- window 平台\n\n1. [下载 FFmpeg](http://ffmpeg.zeranoe.com/builds/) 解压后应该是已经编译好的文件\n2. 将解压好的文件放入 C 盘根目录(也可以自行放入其他盘符)下重命名为 ffmpeg(方便以后找)\n3. 设置环境变量, 我的电脑 -> 属性 -> 高级系统设置 -> 环境变量 -> 系统变量 -> 新增, 路径选择刚刚 C 盘下的 ffmpeg文件夹中的 bin 文件夹\n4. 注销或重启电脑让环境变量生效\n5. 测试, 在 cmd 中输入 `ffmpeg -version`,  如果出现版本号之类的东西则成功.\n\n- Mac 平台\nMac 下可以直接通过 `Homebrew` 安装最为简单.\n\n1. 安装 `Homebrew`, 在终端中输入 `ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`\n2. 安装 FFmpeg, 直接在终端中输入 `brew install ffmpeg` 即可\n3. 测试, 同样在终端中输入 `ffmpeg -version` 查看版本号\n\n**安装 Node.js**\n这个就不展开详细说了, 每个前端都有吧...\n\n### 方案一: img 标签\n当时想到的第一种方案也是最简单的方案, 是将视频流的每一帧转化为 base64 再通过动态替换 `<img>` 的 src 属性来达到预览的效果.中间用到了[rtsp-ffmpeg](https://github.com/agsh/rtsp-ffmpeg), 这个库的思路是通过 websocket 发送每一帧视频的 bytes 到客户端, 客户端可以通过 `<img>` 标签来展示.\n\n示例: \n\nnode 端\n```js\nconst app = require('express')()\nconst server = require('http').Server(app)\nconst io = require('socket.io')(server)\nconst rtsp = require('rtsp-ffmpeg')\n\nserver.listen(8081, () => {\n    console.log('server listening on 8081')\n})\n\n// uri 以海康摄像机的 rtsp 协议为例\nlet uri = 'rtps://admin:password@ip:port/h264/ch1/sub/av_stream'\nlet stream = new rtsp.FFMpeg({\n    input: uri,\n    resolution: '1080x720',\n    quality: 3\n})\n\nstream.on('start', function () {\n    console.log('stream')\n})\n\nstream.on('stop', function () {\n    console.log('stream stopped')\n})\n\nio.on('connection', socket => {\n    const pipeStream = data => {\n        socket.emit('data', data)\n    }\n    stream.on('data', pipeStream)\n\n    // 切换摄像机\n    socket.on('URI', data => {\n        console.log(data)\n        uri = `rtsp://${data.userName}:${data.passWord}@${data.ip}:${data.port}/h264/ch1/sub/av_stream`\n        stream.input = uri\n\n        // 重启\n        stream.restart()\n    })\n\n    socket.on('disconnect' () => {\n        stream.removeListener('data', pipeStream)\n    })\n})\n```\n\n客户端\n```html\n<body>\n    <img id='img'>\n<script src='/socket.io/socket.io.js'></script>\n<script>\n\tvar io = io();\n    let img = document.querySelector('#img')\n\tio.on('data', function(data) {\n        let bytes = new Unit8Array(data)\n        img.src = 'data:image/jpeg;base64,' + base64ArrayBuffer(bytes)\n\t\t\t\n\t})\n    // byte 数组转 base64 (这段是在其他地方抄的)\n\tfunction base64ArrayBuffer(arrayBuffer) {\n\t\tvar base64    = '';\n\t\tvar encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t\tvar bytes         = new Uint8Array(arrayBuffer);\n\t\tvar byteLength    = bytes.byteLength;\n\t\tvar byteRemainder = byteLength % 3;\n\t\tvar mainLength    = byteLength - byteRemainder;\n\t\tvar a, b, c, d;\n\t\tvar chunk;\n\t\t// Main loop deals with bytes in chunks of 3\n\t\tfor (var i = 0; i < mainLength; i = i + 3) {\n\t\t\t// Combine the three bytes into a single integer\n\t\t\tchunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n\t\t\t// Use bitmasks to extract 6-bit segments from the triplet\n\t\t\ta = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n\t\t\tb = (chunk & 258048)   >> 12; // 258048   = (2^6 - 1) << 12\n\t\t\tc = (chunk & 4032)     >>  6; // 4032     = (2^6 - 1) << 6\n\t\t\td = chunk & 63;               // 63       = 2^6 - 1\n\t\t\t// Convert the raw binary segments to the appropriate ASCII encoding\n\t\t\tbase64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n\t\t}\n\t\t// Deal with the remaining bytes and padding\n\t\tif (byteRemainder == 1) {\n\t\t\tchunk = bytes[mainLength];\n\t\t\ta = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n\t\t\t// Set the 4 least significant bits to zero\n\t\t\tb = (chunk & 3)   << 4; // 3   = 2^2 - 1\n\t\t\tbase64 += encodings[a] + encodings[b] + '==';\n\t\t} else if (byteRemainder == 2) {\n\t\t\tchunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\n\t\t\ta = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n\t\t\tb = (chunk & 1008)  >>  4; // 1008  = (2^6 - 1) << 4\n\t\t\t// Set the 2 least significant bits to zero\n\t\t\tc = (chunk & 15)    <<  2; // 15    = 2^4 - 1\n\t\t\tbase64 += encodings[a] + encodings[b] + encodings[c] + '=';\n\t\t}\n\t\treturn base64;\n\t}\n</script>\n</body>\n```\n\n这种通过 img 的方式暴露出的问题是需要在前端解码, 导致下一帧到来时上一帧的画面还没解码完成. 就会有花屏甚至画面只显示一半的问题和延迟较大且延迟会累积, 在控制台中你会看到疯狂刷从内存来的请求, 如果你想看看 http 请求可能会疯. 所以这种方式肯定不行\n\n这个 `rtsp-ffmpeg` 还提供一种 canvas 的方式, 只是在客户端做一些修改:\n```js\nvar io = io();\n// 把之前的 img 标签换成 canvas\nlet canvas = document.querySelector('#canvas')\nio.on('data', data => {\n    var bytes = new Uint8Array(data)\n\t\t\t\t\t\n    var blob = new Blob([bytes], {type: 'application/octet-binary'})\n                    \n    var url = URL.createObjectURL(blob)\n                    \n    var img = new Image\n                    \n    var ctx = canvas.getContext(\"2d\")\n        img.width = img.width * 0.5\n        img.height = img.height * 0.5\n        img.onload = function() {\n            URL.revokeObjectURL(url)\n            ctx.drawImage(img, 0, 0, 1080, 720)\n        };    \n    img.src = url\n})\n```\n\n用 canvas 的方法虽然比 img 的效果好一点, 但是最终效果仍然是不尽人意. 图像很不稳定, 表现为一半画面一半绿屏, 如果视频中图像变换剧烈的话表现会更差, 所以这种方法也不太行. 其实在这中间我并没有做什么操作只是将这个 demo 集成在了 vue 中, 再加上多摄像机的切换和主流摄像机厂商的支持(因为每个摄像机厂商的 rtsp 协议的结构不一样)而已, 所以第一想法是能不能在解码这块找到更好解决办法, 于是又找到了另一个库 [jsmpeg](https://github.com/phoboslab/jsmpeg) 方案二就来了.\n\n\n### 方案二: jsmpeg\n这个库还算比较不错的了, 也是通过 websocket 来转发, 看官方的例子是在终端中启动 ffmpeg -> websocket -> 客户端通过 `jsmpeg.min.js` 解码在 canvas 中播放. 因为这里只是实现了播放, 在这个基础上我们还需要在脚本中自启 ffmpeg / 切换/ 重启, 然后又去找了一个基于 `jsmpeg` 的库 [node-rtsp-stream](https://github.com/kyriesent/node-rtsp-stream). 这个库只是做了一些封装让我们不用自己在终端中手动启用 ffmpeg, 在此之上我再加上重启就能满足现在的需求.\n\n示例:\n\n1. 改造 `node-rtsp-stream`\n\nnode-rtsp-stream/videoStream.js\n```js\n(function() {\n    var Mpeg1Muxer, STREAM_MAGIC_BYTES, VideoStream, events, util, ws;\n\n    ws = require('ws');\n\n    util = require('util');\n\n    events = require('events');\n\n    Mpeg1Muxer = require('./mpeg1muxer');\n\n    STREAM_MAGIC_BYTES = \"jsmp\";\n\n    var child_process = require('child_process');\n\n    VideoStream = function(options) {\n        this.name = options.name;\n        this.streamUrl = options.streamUrl;\n        this.width = options.width;\n        this.height = options.height;\n        this.wsPort = options.wsPort;\n        this.inputStreamStarted = false;\n        this.stream = void 0;\n        this.startMpeg1Stream();\n        this.pipeStreamToSocketServer();\n        return this;\n    };\n\n    util.inherits(VideoStream, events.EventEmitter);\n    // 停止视频流\n    VideoStream.prototype.stop = function () {\n        if (this.mpeg1Muxer) {\n            this.mpeg1Muxer.stream.stop()\n        }\n    }\n    // 重启视频流\n    VideoStream.prototype.restart = function() {\n        if (this.mpeg1Muxer) {\n            this.mpeg1Muxer.stream.stop()\n            console.log('ffmpeg is restart')\n            this.inputStreamStarted = false;\n            this.stream = void 0;\n            this.startMpeg1Stream();\n            // 监听 ffmpeg 进程是否关闭\n            this.mpeg1Muxer.on('ffmpegClose', function(code) {\n                console.log('ffmpeg closed on ' + code)\n            })\n        }\n    }\n\n    VideoStream.prototype.startMpeg1Stream = function() {\n        // 省略打开流的方法, 这部分没有做改动\n    };\n\n    VideoStream.prototype.pipeStreamToSocketServer = function() {\n        // 将流塞给 socket, 同样也没改\n    };\n\n    VideoStream.prototype.onSocketConnect = function(socket) {\n        var self, streamHeader;\n        self = this;\n        streamHeader = new Buffer(8);\n        streamHeader.write(STREAM_MAGIC_BYTES);\n        streamHeader.writeUInt16BE(this.width, 4);\n        streamHeader.writeUInt16BE(this.height, 6);\n        socket.send(streamHeader, {\n            binary: true\n        });\n        console.log((\"\" + this.name + \": New WebSocket Connection (\") + this.wsServer.clients.length + \" total)\");\n        return socket.on(\"close\", function(code, message) {\n            return console.log((\"\" + this.name + \": Disconnected WebSocket (\") + self.wsServer.clients.length + \" total)\");\n        });\n    };\n\n    module.exports = VideoStream;\n\n}).call(this);\n```\n\nnode-rtsp-stream/videoStream.js\n```js\n(function() {\n    var Mpeg1Muxer, child_process, events, util;\n\n    child_process = require('child_process');\n\n    util = require('util');\n\n    events = require('events');\n\n    Mpeg1Muxer = function(options) {\n        var self;\n        self = this;\n        this.url = options.url;\n        this.stream = child_process.spawn(\"ffmpeg\", \n            [\n                \"-rtsp_transport\",\n                \"tcp\",\n                \"-i\",\n                this.url,\n                '-s', \n                // 图像宽高\n                `${options.width}x${options.height}`, \n                '-f', \n                'mpeg1video', \n                '-b:v', \n                '800k', \n                '-r', \n                '30', \n                '-'\n            ], \n            {\n                detached: false\n            }\n        );\n        this.inputStreamStarted = true;\n        this.stream.stdout.on('data', function(data) {\n            return self.emit('mpeg1data', data);\n        });\n        this.stream.stderr.on('data', function(data) {\n            return self.emit('ffmpegError', data);\n        });\n        // kill ffmpeg\n        this.stream.stop = function() {\n            // console.log(self.stream.pid)\n            self.stream.stdin.pause();\n            self.stream.kill()\n            console.log('ffmpeg is be kill')\n        };\n        // 监听 ffmpeg 退出\n        this.stream.on('exit', function(code) {\n            return self.emit('ffmpegClose', code)\n        })\n        return this;\n    };\n\n    util.inherits(Mpeg1Muxer, events.EventEmitter);\n\n    module.exports = Mpeg1Muxer;\n\n}).call(this);\n```\n\n2. node 端使用\n\n```js\nconst app = require('express')()\nconst server = require('http').Server(app)\nconst io = require('socket.io')(server)\n// 引入改造后的 node-rtsp-stream\nconst Rtsp = require('./node-rtsp-stream')\n\nserver.listen(8081, () => {\n    console.log('server listening on 8081')\n})\n\n// uri 以海康摄像机的 rtsp 协议为例\nlet uri = 'rtps://admin:password@ip:port/h264/ch1/sub/av_stream'\nlet stream = new Rtsp({\n    name: 'rtsp_stream',\n    streamUrl: uri,\n    wsPort: 11111,\n    width: 720,\n    height: 405\n})\n\nstream.on('start', function () {\n    console.log('stream')\n})\n\nstream.on('stop', function () {\n    console.log('stream stopped')\n})\n\nio.on('connection', socket => {\n    const pipeStream = data => {\n        socket.emit('data', data)\n    }\n    stream.on('data', pipeStream)\n\n    // 切换摄像机\n    socket.on('URI', data => {\n        console.log(data)\n        uri = `rtsp://${data.userName}:${data.passWord}@${data.ip}:${data.port}/h264/ch1/sub/av_stream`\n        stream.streamUrl = uri;\n        // 重启\n        stream.restart()\n    })\n\n    socket.on('disconnect' () => {\n        stream.removeListener('data', pipeStream)\n    })\n})\n```\n\n3. 客户端\n\n```html\n<canvas id='can'></canvas>\n<script src='jsmpeg.min.js'></script>\n<script>\n    let canvas = document.querySelector('#can')\n    let ws = new WebSocket('ws://127.0.0.1:11111')\n    let player = new jsmpeg(ws, {\n        canvas: canvas,\n        autoplay: true\n    })\n</script>\n```\n\n这个方案其实使用了很久一直都没发现问题, 是在一路摄像机安置在天桥附近人流量剧增, 与这个视频预览同一页面还有一个人脸实时抓拍的即时消息推送的功能, 导致在20 - 30分钟浏览器直接假死或者崩溃.(然后这个方案又凉了😂)\n\n### 方案三: FFmpeg + Nginx + video.js\n方案三下次写~\n\n\n\nCreated on 2017/7/26 by Cara\n","source":"_posts/网络摄像机直播.md","raw":"---\ntitle: '网络摄像机直播'\ndate: 2018-05-06 14:49:04\ntags:\n- JavaScript\n- Node.js\n- FFmpeg\ncategories:\n- 笔记📒\n---\n对于网络摄像机做视频预览这块, 本身其实是非常陌生的, 当时接到这个需求也是相当的头疼(对于当时一年经验不到的我来说).当时我们的应用场景是: 多路网络摄像机通过局域网连接, PC 端能够实时预览监控画面并且画质达到720p, 延迟不能超过10秒, 多个摄像机能够切换查看. 由于后端只提供一个 RTSP 的直播协议, 所以所有的方案都是围绕着 RTSP 这个关键词. 当时时间很赶所以要自己慢慢研究是不可能了, 只能去找现成的库.\n\n> 现目前用过三种方案, 都不完美.\n\n### 整体思路\n经过一波调研(google)之后, 知道浏览器对 RTSP 协议并不友好, 也就是说我们必须要自己转码再提供给浏览器使用, 找到的解决思路大概是:\n\n1. 转码: [FFmpeg](https://www.ffmpeg.org/) 是一个老牌的转码工具, 非常强大\n2. Node.js 用作中转站接收客户端发来的摄像机信息及控制 FFmpeg 推流\n3. 最终客户端接收视频流\n\n下面我试过的三种方案, 基本结构都如此只是推流的方式和客户端的接收方式有所不同.\n\n### 准备\n\n**安装 FFmpeg 转码工具**\n\n- window 平台\n\n1. [下载 FFmpeg](http://ffmpeg.zeranoe.com/builds/) 解压后应该是已经编译好的文件\n2. 将解压好的文件放入 C 盘根目录(也可以自行放入其他盘符)下重命名为 ffmpeg(方便以后找)\n3. 设置环境变量, 我的电脑 -> 属性 -> 高级系统设置 -> 环境变量 -> 系统变量 -> 新增, 路径选择刚刚 C 盘下的 ffmpeg文件夹中的 bin 文件夹\n4. 注销或重启电脑让环境变量生效\n5. 测试, 在 cmd 中输入 `ffmpeg -version`,  如果出现版本号之类的东西则成功.\n\n- Mac 平台\nMac 下可以直接通过 `Homebrew` 安装最为简单.\n\n1. 安装 `Homebrew`, 在终端中输入 `ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`\n2. 安装 FFmpeg, 直接在终端中输入 `brew install ffmpeg` 即可\n3. 测试, 同样在终端中输入 `ffmpeg -version` 查看版本号\n\n**安装 Node.js**\n这个就不展开详细说了, 每个前端都有吧...\n\n### 方案一: img 标签\n当时想到的第一种方案也是最简单的方案, 是将视频流的每一帧转化为 base64 再通过动态替换 `<img>` 的 src 属性来达到预览的效果.中间用到了[rtsp-ffmpeg](https://github.com/agsh/rtsp-ffmpeg), 这个库的思路是通过 websocket 发送每一帧视频的 bytes 到客户端, 客户端可以通过 `<img>` 标签来展示.\n\n示例: \n\nnode 端\n```js\nconst app = require('express')()\nconst server = require('http').Server(app)\nconst io = require('socket.io')(server)\nconst rtsp = require('rtsp-ffmpeg')\n\nserver.listen(8081, () => {\n    console.log('server listening on 8081')\n})\n\n// uri 以海康摄像机的 rtsp 协议为例\nlet uri = 'rtps://admin:password@ip:port/h264/ch1/sub/av_stream'\nlet stream = new rtsp.FFMpeg({\n    input: uri,\n    resolution: '1080x720',\n    quality: 3\n})\n\nstream.on('start', function () {\n    console.log('stream')\n})\n\nstream.on('stop', function () {\n    console.log('stream stopped')\n})\n\nio.on('connection', socket => {\n    const pipeStream = data => {\n        socket.emit('data', data)\n    }\n    stream.on('data', pipeStream)\n\n    // 切换摄像机\n    socket.on('URI', data => {\n        console.log(data)\n        uri = `rtsp://${data.userName}:${data.passWord}@${data.ip}:${data.port}/h264/ch1/sub/av_stream`\n        stream.input = uri\n\n        // 重启\n        stream.restart()\n    })\n\n    socket.on('disconnect' () => {\n        stream.removeListener('data', pipeStream)\n    })\n})\n```\n\n客户端\n```html\n<body>\n    <img id='img'>\n<script src='/socket.io/socket.io.js'></script>\n<script>\n\tvar io = io();\n    let img = document.querySelector('#img')\n\tio.on('data', function(data) {\n        let bytes = new Unit8Array(data)\n        img.src = 'data:image/jpeg;base64,' + base64ArrayBuffer(bytes)\n\t\t\t\n\t})\n    // byte 数组转 base64 (这段是在其他地方抄的)\n\tfunction base64ArrayBuffer(arrayBuffer) {\n\t\tvar base64    = '';\n\t\tvar encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t\tvar bytes         = new Uint8Array(arrayBuffer);\n\t\tvar byteLength    = bytes.byteLength;\n\t\tvar byteRemainder = byteLength % 3;\n\t\tvar mainLength    = byteLength - byteRemainder;\n\t\tvar a, b, c, d;\n\t\tvar chunk;\n\t\t// Main loop deals with bytes in chunks of 3\n\t\tfor (var i = 0; i < mainLength; i = i + 3) {\n\t\t\t// Combine the three bytes into a single integer\n\t\t\tchunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n\t\t\t// Use bitmasks to extract 6-bit segments from the triplet\n\t\t\ta = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n\t\t\tb = (chunk & 258048)   >> 12; // 258048   = (2^6 - 1) << 12\n\t\t\tc = (chunk & 4032)     >>  6; // 4032     = (2^6 - 1) << 6\n\t\t\td = chunk & 63;               // 63       = 2^6 - 1\n\t\t\t// Convert the raw binary segments to the appropriate ASCII encoding\n\t\t\tbase64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n\t\t}\n\t\t// Deal with the remaining bytes and padding\n\t\tif (byteRemainder == 1) {\n\t\t\tchunk = bytes[mainLength];\n\t\t\ta = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n\t\t\t// Set the 4 least significant bits to zero\n\t\t\tb = (chunk & 3)   << 4; // 3   = 2^2 - 1\n\t\t\tbase64 += encodings[a] + encodings[b] + '==';\n\t\t} else if (byteRemainder == 2) {\n\t\t\tchunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\n\t\t\ta = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n\t\t\tb = (chunk & 1008)  >>  4; // 1008  = (2^6 - 1) << 4\n\t\t\t// Set the 2 least significant bits to zero\n\t\t\tc = (chunk & 15)    <<  2; // 15    = 2^4 - 1\n\t\t\tbase64 += encodings[a] + encodings[b] + encodings[c] + '=';\n\t\t}\n\t\treturn base64;\n\t}\n</script>\n</body>\n```\n\n这种通过 img 的方式暴露出的问题是需要在前端解码, 导致下一帧到来时上一帧的画面还没解码完成. 就会有花屏甚至画面只显示一半的问题和延迟较大且延迟会累积, 在控制台中你会看到疯狂刷从内存来的请求, 如果你想看看 http 请求可能会疯. 所以这种方式肯定不行\n\n这个 `rtsp-ffmpeg` 还提供一种 canvas 的方式, 只是在客户端做一些修改:\n```js\nvar io = io();\n// 把之前的 img 标签换成 canvas\nlet canvas = document.querySelector('#canvas')\nio.on('data', data => {\n    var bytes = new Uint8Array(data)\n\t\t\t\t\t\n    var blob = new Blob([bytes], {type: 'application/octet-binary'})\n                    \n    var url = URL.createObjectURL(blob)\n                    \n    var img = new Image\n                    \n    var ctx = canvas.getContext(\"2d\")\n        img.width = img.width * 0.5\n        img.height = img.height * 0.5\n        img.onload = function() {\n            URL.revokeObjectURL(url)\n            ctx.drawImage(img, 0, 0, 1080, 720)\n        };    \n    img.src = url\n})\n```\n\n用 canvas 的方法虽然比 img 的效果好一点, 但是最终效果仍然是不尽人意. 图像很不稳定, 表现为一半画面一半绿屏, 如果视频中图像变换剧烈的话表现会更差, 所以这种方法也不太行. 其实在这中间我并没有做什么操作只是将这个 demo 集成在了 vue 中, 再加上多摄像机的切换和主流摄像机厂商的支持(因为每个摄像机厂商的 rtsp 协议的结构不一样)而已, 所以第一想法是能不能在解码这块找到更好解决办法, 于是又找到了另一个库 [jsmpeg](https://github.com/phoboslab/jsmpeg) 方案二就来了.\n\n\n### 方案二: jsmpeg\n这个库还算比较不错的了, 也是通过 websocket 来转发, 看官方的例子是在终端中启动 ffmpeg -> websocket -> 客户端通过 `jsmpeg.min.js` 解码在 canvas 中播放. 因为这里只是实现了播放, 在这个基础上我们还需要在脚本中自启 ffmpeg / 切换/ 重启, 然后又去找了一个基于 `jsmpeg` 的库 [node-rtsp-stream](https://github.com/kyriesent/node-rtsp-stream). 这个库只是做了一些封装让我们不用自己在终端中手动启用 ffmpeg, 在此之上我再加上重启就能满足现在的需求.\n\n示例:\n\n1. 改造 `node-rtsp-stream`\n\nnode-rtsp-stream/videoStream.js\n```js\n(function() {\n    var Mpeg1Muxer, STREAM_MAGIC_BYTES, VideoStream, events, util, ws;\n\n    ws = require('ws');\n\n    util = require('util');\n\n    events = require('events');\n\n    Mpeg1Muxer = require('./mpeg1muxer');\n\n    STREAM_MAGIC_BYTES = \"jsmp\";\n\n    var child_process = require('child_process');\n\n    VideoStream = function(options) {\n        this.name = options.name;\n        this.streamUrl = options.streamUrl;\n        this.width = options.width;\n        this.height = options.height;\n        this.wsPort = options.wsPort;\n        this.inputStreamStarted = false;\n        this.stream = void 0;\n        this.startMpeg1Stream();\n        this.pipeStreamToSocketServer();\n        return this;\n    };\n\n    util.inherits(VideoStream, events.EventEmitter);\n    // 停止视频流\n    VideoStream.prototype.stop = function () {\n        if (this.mpeg1Muxer) {\n            this.mpeg1Muxer.stream.stop()\n        }\n    }\n    // 重启视频流\n    VideoStream.prototype.restart = function() {\n        if (this.mpeg1Muxer) {\n            this.mpeg1Muxer.stream.stop()\n            console.log('ffmpeg is restart')\n            this.inputStreamStarted = false;\n            this.stream = void 0;\n            this.startMpeg1Stream();\n            // 监听 ffmpeg 进程是否关闭\n            this.mpeg1Muxer.on('ffmpegClose', function(code) {\n                console.log('ffmpeg closed on ' + code)\n            })\n        }\n    }\n\n    VideoStream.prototype.startMpeg1Stream = function() {\n        // 省略打开流的方法, 这部分没有做改动\n    };\n\n    VideoStream.prototype.pipeStreamToSocketServer = function() {\n        // 将流塞给 socket, 同样也没改\n    };\n\n    VideoStream.prototype.onSocketConnect = function(socket) {\n        var self, streamHeader;\n        self = this;\n        streamHeader = new Buffer(8);\n        streamHeader.write(STREAM_MAGIC_BYTES);\n        streamHeader.writeUInt16BE(this.width, 4);\n        streamHeader.writeUInt16BE(this.height, 6);\n        socket.send(streamHeader, {\n            binary: true\n        });\n        console.log((\"\" + this.name + \": New WebSocket Connection (\") + this.wsServer.clients.length + \" total)\");\n        return socket.on(\"close\", function(code, message) {\n            return console.log((\"\" + this.name + \": Disconnected WebSocket (\") + self.wsServer.clients.length + \" total)\");\n        });\n    };\n\n    module.exports = VideoStream;\n\n}).call(this);\n```\n\nnode-rtsp-stream/videoStream.js\n```js\n(function() {\n    var Mpeg1Muxer, child_process, events, util;\n\n    child_process = require('child_process');\n\n    util = require('util');\n\n    events = require('events');\n\n    Mpeg1Muxer = function(options) {\n        var self;\n        self = this;\n        this.url = options.url;\n        this.stream = child_process.spawn(\"ffmpeg\", \n            [\n                \"-rtsp_transport\",\n                \"tcp\",\n                \"-i\",\n                this.url,\n                '-s', \n                // 图像宽高\n                `${options.width}x${options.height}`, \n                '-f', \n                'mpeg1video', \n                '-b:v', \n                '800k', \n                '-r', \n                '30', \n                '-'\n            ], \n            {\n                detached: false\n            }\n        );\n        this.inputStreamStarted = true;\n        this.stream.stdout.on('data', function(data) {\n            return self.emit('mpeg1data', data);\n        });\n        this.stream.stderr.on('data', function(data) {\n            return self.emit('ffmpegError', data);\n        });\n        // kill ffmpeg\n        this.stream.stop = function() {\n            // console.log(self.stream.pid)\n            self.stream.stdin.pause();\n            self.stream.kill()\n            console.log('ffmpeg is be kill')\n        };\n        // 监听 ffmpeg 退出\n        this.stream.on('exit', function(code) {\n            return self.emit('ffmpegClose', code)\n        })\n        return this;\n    };\n\n    util.inherits(Mpeg1Muxer, events.EventEmitter);\n\n    module.exports = Mpeg1Muxer;\n\n}).call(this);\n```\n\n2. node 端使用\n\n```js\nconst app = require('express')()\nconst server = require('http').Server(app)\nconst io = require('socket.io')(server)\n// 引入改造后的 node-rtsp-stream\nconst Rtsp = require('./node-rtsp-stream')\n\nserver.listen(8081, () => {\n    console.log('server listening on 8081')\n})\n\n// uri 以海康摄像机的 rtsp 协议为例\nlet uri = 'rtps://admin:password@ip:port/h264/ch1/sub/av_stream'\nlet stream = new Rtsp({\n    name: 'rtsp_stream',\n    streamUrl: uri,\n    wsPort: 11111,\n    width: 720,\n    height: 405\n})\n\nstream.on('start', function () {\n    console.log('stream')\n})\n\nstream.on('stop', function () {\n    console.log('stream stopped')\n})\n\nio.on('connection', socket => {\n    const pipeStream = data => {\n        socket.emit('data', data)\n    }\n    stream.on('data', pipeStream)\n\n    // 切换摄像机\n    socket.on('URI', data => {\n        console.log(data)\n        uri = `rtsp://${data.userName}:${data.passWord}@${data.ip}:${data.port}/h264/ch1/sub/av_stream`\n        stream.streamUrl = uri;\n        // 重启\n        stream.restart()\n    })\n\n    socket.on('disconnect' () => {\n        stream.removeListener('data', pipeStream)\n    })\n})\n```\n\n3. 客户端\n\n```html\n<canvas id='can'></canvas>\n<script src='jsmpeg.min.js'></script>\n<script>\n    let canvas = document.querySelector('#can')\n    let ws = new WebSocket('ws://127.0.0.1:11111')\n    let player = new jsmpeg(ws, {\n        canvas: canvas,\n        autoplay: true\n    })\n</script>\n```\n\n这个方案其实使用了很久一直都没发现问题, 是在一路摄像机安置在天桥附近人流量剧增, 与这个视频预览同一页面还有一个人脸实时抓拍的即时消息推送的功能, 导致在20 - 30分钟浏览器直接假死或者崩溃.(然后这个方案又凉了😂)\n\n### 方案三: FFmpeg + Nginx + video.js\n方案三下次写~\n\n\n\nCreated on 2017/7/26 by Cara\n","slug":"网络摄像机直播","published":1,"updated":"2018-05-06T12:01:44.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolt2001xklu07cne2y1m","content":"<p>对于网络摄像机做视频预览这块, 本身其实是非常陌生的, 当时接到这个需求也是相当的头疼(对于当时一年经验不到的我来说).当时我们的应用场景是: 多路网络摄像机通过局域网连接, PC 端能够实时预览监控画面并且画质达到720p, 延迟不能超过10秒, 多个摄像机能够切换查看. 由于后端只提供一个 RTSP 的直播协议, 所以所有的方案都是围绕着 RTSP 这个关键词. 当时时间很赶所以要自己慢慢研究是不可能了, 只能去找现成的库.</p>\n<blockquote>\n<p>现目前用过三种方案, 都不完美.</p>\n</blockquote>\n<h3 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h3><p>经过一波调研(google)之后, 知道浏览器对 RTSP 协议并不友好, 也就是说我们必须要自己转码再提供给浏览器使用, 找到的解决思路大概是:</p>\n<ol>\n<li>转码: <a href=\"https://www.ffmpeg.org/\" target=\"_blank\" rel=\"noopener\">FFmpeg</a> 是一个老牌的转码工具, 非常强大</li>\n<li>Node.js 用作中转站接收客户端发来的摄像机信息及控制 FFmpeg 推流</li>\n<li>最终客户端接收视频流</li>\n</ol>\n<p>下面我试过的三种方案, 基本结构都如此只是推流的方式和客户端的接收方式有所不同.</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p><strong>安装 FFmpeg 转码工具</strong></p>\n<ul>\n<li>window 平台</li>\n</ul>\n<ol>\n<li><a href=\"http://ffmpeg.zeranoe.com/builds/\" target=\"_blank\" rel=\"noopener\">下载 FFmpeg</a> 解压后应该是已经编译好的文件</li>\n<li>将解压好的文件放入 C 盘根目录(也可以自行放入其他盘符)下重命名为 ffmpeg(方便以后找)</li>\n<li>设置环境变量, 我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; 系统变量 -&gt; 新增, 路径选择刚刚 C 盘下的 ffmpeg文件夹中的 bin 文件夹</li>\n<li>注销或重启电脑让环境变量生效</li>\n<li>测试, 在 cmd 中输入 <code>ffmpeg -version</code>,  如果出现版本号之类的东西则成功.</li>\n</ol>\n<ul>\n<li>Mac 平台<br>Mac 下可以直接通过 <code>Homebrew</code> 安装最为简单.</li>\n</ul>\n<ol>\n<li>安装 <code>Homebrew</code>, 在终端中输入 <code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></li>\n<li>安装 FFmpeg, 直接在终端中输入 <code>brew install ffmpeg</code> 即可</li>\n<li>测试, 同样在终端中输入 <code>ffmpeg -version</code> 查看版本号</li>\n</ol>\n<p><strong>安装 Node.js</strong><br>这个就不展开详细说了, 每个前端都有吧…</p>\n<h3 id=\"方案一-img-标签\"><a href=\"#方案一-img-标签\" class=\"headerlink\" title=\"方案一: img 标签\"></a>方案一: img 标签</h3><p>当时想到的第一种方案也是最简单的方案, 是将视频流的每一帧转化为 base64 再通过动态替换 <code>&lt;img&gt;</code> 的 src 属性来达到预览的效果.中间用到了<a href=\"https://github.com/agsh/rtsp-ffmpeg\" target=\"_blank\" rel=\"noopener\">rtsp-ffmpeg</a>, 这个库的思路是通过 websocket 发送每一帧视频的 bytes 到客户端, 客户端可以通过 <code>&lt;img&gt;</code> 标签来展示.</p>\n<p>示例: </p>\n<p>node 端<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)()</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).Server(app)</span><br><span class=\"line\"><span class=\"keyword\">const</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>)(server)</span><br><span class=\"line\"><span class=\"keyword\">const</span> rtsp = <span class=\"built_in\">require</span>(<span class=\"string\">'rtsp-ffmpeg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">8081</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'server listening on 8081'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// uri 以海康摄像机的 rtsp 协议为例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> uri = <span class=\"string\">'rtps://admin:password@ip:port/h264/ch1/sub/av_stream'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> stream = <span class=\"keyword\">new</span> rtsp.FFMpeg(&#123;</span><br><span class=\"line\">    input: uri,</span><br><span class=\"line\">    resolution: <span class=\"string\">'1080x720'</span>,</span><br><span class=\"line\">    quality: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">stream.on(<span class=\"string\">'start'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'stream'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">stream.on(<span class=\"string\">'stop'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'stream stopped'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">io.on(<span class=\"string\">'connection'</span>, socket =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pipeStream = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">        socket.emit(<span class=\"string\">'data'</span>, data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stream.on(<span class=\"string\">'data'</span>, pipeStream)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 切换摄像机</span></span><br><span class=\"line\">    socket.on(<span class=\"string\">'URI'</span>, data =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">        uri = <span class=\"string\">`rtsp://<span class=\"subst\">$&#123;data.userName&#125;</span>:<span class=\"subst\">$&#123;data.passWord&#125;</span>@<span class=\"subst\">$&#123;data.ip&#125;</span>:<span class=\"subst\">$&#123;data.port&#125;</span>/h264/ch1/sub/av_stream`</span></span><br><span class=\"line\">        stream.input = uri</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 重启</span></span><br><span class=\"line\">        stream.restart()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    socket.on(<span class=\"string\">'disconnect'</span> () =&gt; &#123;</span><br><span class=\"line\">        stream.removeListener(<span class=\"string\">'data'</span>, pipeStream)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>客户端<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">'img'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'/socket.io/socket.io.js'</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">var</span> io = io();</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> img = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#img'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\tio.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> bytes = <span class=\"keyword\">new</span> Unit8Array(data)</span></span><br><span class=\"line\"><span class=\"javascript\">        img.src = <span class=\"string\">'data:image/jpeg;base64,'</span> + base64ArrayBuffer(bytes)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// byte 数组转 base64 (这段是在其他地方抄的)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">base64ArrayBuffer</span>(<span class=\"params\">arrayBuffer</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> base64    = <span class=\"string\">''</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> encodings = <span class=\"string\">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> bytes         = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(arrayBuffer);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> byteLength    = bytes.byteLength;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> byteRemainder = byteLength % <span class=\"number\">3</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> mainLength    = byteLength - byteRemainder;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> a, b, c, d;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> chunk;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// Main loop deals with bytes in chunks of 3</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; mainLength; i = i + <span class=\"number\">3</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// Combine the three bytes into a single integer</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchunk = (bytes[i] &lt;&lt; 16) | (bytes[i + 1] &lt;&lt; 8) | bytes[i + 2];</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// Use bitmasks to extract 6-bit segments from the triplet</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\ta = (chunk &amp; <span class=\"number\">16515072</span>) &gt;&gt; <span class=\"number\">18</span>; <span class=\"comment\">// 16515072 = (2^6 - 1) &lt;&lt; 18</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tb = (chunk &amp; <span class=\"number\">258048</span>)   &gt;&gt; <span class=\"number\">12</span>; <span class=\"comment\">// 258048   = (2^6 - 1) &lt;&lt; 12</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tc = (chunk &amp; <span class=\"number\">4032</span>)     &gt;&gt;  <span class=\"number\">6</span>; <span class=\"comment\">// 4032     = (2^6 - 1) &lt;&lt; 6</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\td = chunk &amp; <span class=\"number\">63</span>;               <span class=\"comment\">// 63       = 2^6 - 1</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// Convert the raw binary segments to the appropriate ASCII encoding</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbase64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// Deal with the remaining bytes and padding</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">if</span> (byteRemainder == <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchunk = bytes[mainLength];</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\ta = (chunk &amp; <span class=\"number\">252</span>) &gt;&gt; <span class=\"number\">2</span>; <span class=\"comment\">// 252 = (2^6 - 1) &lt;&lt; 2</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// Set the 4 least significant bits to zero</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tb = (chunk &amp; <span class=\"number\">3</span>)   &lt;&lt; <span class=\"number\">4</span>; <span class=\"comment\">// 3   = 2^2 - 1</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tbase64 += encodings[a] + encodings[b] + <span class=\"string\">'=='</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (byteRemainder == <span class=\"number\">2</span>) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchunk = (bytes[mainLength] &lt;&lt; 8) | bytes[mainLength + 1];</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\ta = (chunk &amp; <span class=\"number\">64512</span>) &gt;&gt; <span class=\"number\">10</span>; <span class=\"comment\">// 64512 = (2^6 - 1) &lt;&lt; 10</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tb = (chunk &amp; <span class=\"number\">1008</span>)  &gt;&gt;  <span class=\"number\">4</span>; <span class=\"comment\">// 1008  = (2^6 - 1) &lt;&lt; 4</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// Set the 2 least significant bits to zero</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tc = (chunk &amp; <span class=\"number\">15</span>)    &lt;&lt;  <span class=\"number\">2</span>; <span class=\"comment\">// 15    = 2^4 - 1</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tbase64 += encodings[a] + encodings[b] + encodings[c] + <span class=\"string\">'='</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">return</span> base64;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这种通过 img 的方式暴露出的问题是需要在前端解码, 导致下一帧到来时上一帧的画面还没解码完成. 就会有花屏甚至画面只显示一半的问题和延迟较大且延迟会累积, 在控制台中你会看到疯狂刷从内存来的请求, 如果你想看看 http 请求可能会疯. 所以这种方式肯定不行</p>\n<p>这个 <code>rtsp-ffmpeg</code> 还提供一种 canvas 的方式, 只是在客户端做一些修改:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> io = io();</span><br><span class=\"line\"><span class=\"comment\">// 把之前的 img 标签换成 canvas</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#canvas'</span>)</span><br><span class=\"line\">io.on(<span class=\"string\">'data'</span>, data =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bytes = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(data)</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([bytes], &#123;<span class=\"attr\">type</span>: <span class=\"string\">'application/octet-binary'</span>&#125;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = URL.createObjectURL(blob)</span><br><span class=\"line\">                    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image</span><br><span class=\"line\">                    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>)</span><br><span class=\"line\">        img.width = img.width * <span class=\"number\">0.5</span></span><br><span class=\"line\">        img.height = img.height * <span class=\"number\">0.5</span></span><br><span class=\"line\">        img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            URL.revokeObjectURL(url)</span><br><span class=\"line\">            ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1080</span>, <span class=\"number\">720</span>)</span><br><span class=\"line\">        &#125;;    </span><br><span class=\"line\">    img.src = url</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>用 canvas 的方法虽然比 img 的效果好一点, 但是最终效果仍然是不尽人意. 图像很不稳定, 表现为一半画面一半绿屏, 如果视频中图像变换剧烈的话表现会更差, 所以这种方法也不太行. 其实在这中间我并没有做什么操作只是将这个 demo 集成在了 vue 中, 再加上多摄像机的切换和主流摄像机厂商的支持(因为每个摄像机厂商的 rtsp 协议的结构不一样)而已, 所以第一想法是能不能在解码这块找到更好解决办法, 于是又找到了另一个库 <a href=\"https://github.com/phoboslab/jsmpeg\" target=\"_blank\" rel=\"noopener\">jsmpeg</a> 方案二就来了.</p>\n<h3 id=\"方案二-jsmpeg\"><a href=\"#方案二-jsmpeg\" class=\"headerlink\" title=\"方案二: jsmpeg\"></a>方案二: jsmpeg</h3><p>这个库还算比较不错的了, 也是通过 websocket 来转发, 看官方的例子是在终端中启动 ffmpeg -&gt; websocket -&gt; 客户端通过 <code>jsmpeg.min.js</code> 解码在 canvas 中播放. 因为这里只是实现了播放, 在这个基础上我们还需要在脚本中自启 ffmpeg / 切换/ 重启, 然后又去找了一个基于 <code>jsmpeg</code> 的库 <a href=\"https://github.com/kyriesent/node-rtsp-stream\" target=\"_blank\" rel=\"noopener\">node-rtsp-stream</a>. 这个库只是做了一些封装让我们不用自己在终端中手动启用 ffmpeg, 在此之上我再加上重启就能满足现在的需求.</p>\n<p>示例:</p>\n<ol>\n<li>改造 <code>node-rtsp-stream</code></li>\n</ol>\n<p>node-rtsp-stream/videoStream.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Mpeg1Muxer, STREAM_MAGIC_BYTES, VideoStream, events, util, ws;</span><br><span class=\"line\"></span><br><span class=\"line\">    ws = <span class=\"built_in\">require</span>(<span class=\"string\">'ws'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Mpeg1Muxer = <span class=\"built_in\">require</span>(<span class=\"string\">'./mpeg1muxer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    STREAM_MAGIC_BYTES = <span class=\"string\">\"jsmp\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> child_process = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    VideoStream = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = options.name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.streamUrl = options.streamUrl;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.width = options.width;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.height = options.height;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.wsPort = options.wsPort;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.inputStreamStarted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stream = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.startMpeg1Stream();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pipeStreamToSocketServer();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    util.inherits(VideoStream, events.EventEmitter);</span><br><span class=\"line\">    <span class=\"comment\">// 停止视频流</span></span><br><span class=\"line\">    VideoStream.prototype.stop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mpeg1Muxer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mpeg1Muxer.stream.stop()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 重启视频流</span></span><br><span class=\"line\">    VideoStream.prototype.restart = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mpeg1Muxer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mpeg1Muxer.stream.stop()</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ffmpeg is restart'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.inputStreamStarted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.stream = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.startMpeg1Stream();</span><br><span class=\"line\">            <span class=\"comment\">// 监听 ffmpeg 进程是否关闭</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mpeg1Muxer.on(<span class=\"string\">'ffmpegClose'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'ffmpeg closed on '</span> + code)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    VideoStream.prototype.startMpeg1Stream = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 省略打开流的方法, 这部分没有做改动</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    VideoStream.prototype.pipeStreamToSocketServer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将流塞给 socket, 同样也没改</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    VideoStream.prototype.onSocketConnect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">socket</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self, streamHeader;</span><br><span class=\"line\">        self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        streamHeader = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">8</span>);</span><br><span class=\"line\">        streamHeader.write(STREAM_MAGIC_BYTES);</span><br><span class=\"line\">        streamHeader.writeUInt16BE(<span class=\"keyword\">this</span>.width, <span class=\"number\">4</span>);</span><br><span class=\"line\">        streamHeader.writeUInt16BE(<span class=\"keyword\">this</span>.height, <span class=\"number\">6</span>);</span><br><span class=\"line\">        socket.send(streamHeader, &#123;</span><br><span class=\"line\">            binary: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log((<span class=\"string\">\"\"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\": New WebSocket Connection (\"</span>) + <span class=\"keyword\">this</span>.wsServer.clients.length + <span class=\"string\">\" total)\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> socket.on(<span class=\"string\">\"close\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">code, message</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log((<span class=\"string\">\"\"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\": Disconnected WebSocket (\"</span>) + self.wsServer.clients.length + <span class=\"string\">\" total)\"</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = VideoStream;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).call(<span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure></p>\n<p>node-rtsp-stream/videoStream.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Mpeg1Muxer, child_process, events, util;</span><br><span class=\"line\"></span><br><span class=\"line\">    child_process = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Mpeg1Muxer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self;</span><br><span class=\"line\">        self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = options.url;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stream = child_process.spawn(<span class=\"string\">\"ffmpeg\"</span>, </span><br><span class=\"line\">            [</span><br><span class=\"line\">                <span class=\"string\">\"-rtsp_transport\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"tcp\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"-i\"</span>,</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.url,</span><br><span class=\"line\">                <span class=\"string\">'-s'</span>, </span><br><span class=\"line\">                <span class=\"comment\">// 图像宽高</span></span><br><span class=\"line\">                <span class=\"string\">`<span class=\"subst\">$&#123;options.width&#125;</span>x<span class=\"subst\">$&#123;options.height&#125;</span>`</span>, </span><br><span class=\"line\">                <span class=\"string\">'-f'</span>, </span><br><span class=\"line\">                <span class=\"string\">'mpeg1video'</span>, </span><br><span class=\"line\">                <span class=\"string\">'-b:v'</span>, </span><br><span class=\"line\">                <span class=\"string\">'800k'</span>, </span><br><span class=\"line\">                <span class=\"string\">'-r'</span>, </span><br><span class=\"line\">                <span class=\"string\">'30'</span>, </span><br><span class=\"line\">                <span class=\"string\">'-'</span></span><br><span class=\"line\">            ], </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                detached: <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.inputStreamStarted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stream.stdout.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.emit(<span class=\"string\">'mpeg1data'</span>, data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stream.stderr.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.emit(<span class=\"string\">'ffmpegError'</span>, data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// kill ffmpeg</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stream.stop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// console.log(self.stream.pid)</span></span><br><span class=\"line\">            self.stream.stdin.pause();</span><br><span class=\"line\">            self.stream.kill()</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ffmpeg is be kill'</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 监听 ffmpeg 退出</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stream.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.emit(<span class=\"string\">'ffmpegClose'</span>, code)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    util.inherits(Mpeg1Muxer, events.EventEmitter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = Mpeg1Muxer;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).call(<span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>node 端使用</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)()</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).Server(app)</span><br><span class=\"line\"><span class=\"keyword\">const</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>)(server)</span><br><span class=\"line\"><span class=\"comment\">// 引入改造后的 node-rtsp-stream</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Rtsp = <span class=\"built_in\">require</span>(<span class=\"string\">'./node-rtsp-stream'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">8081</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'server listening on 8081'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// uri 以海康摄像机的 rtsp 协议为例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> uri = <span class=\"string\">'rtps://admin:password@ip:port/h264/ch1/sub/av_stream'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> stream = <span class=\"keyword\">new</span> Rtsp(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">'rtsp_stream'</span>,</span><br><span class=\"line\">    streamUrl: uri,</span><br><span class=\"line\">    wsPort: <span class=\"number\">11111</span>,</span><br><span class=\"line\">    width: <span class=\"number\">720</span>,</span><br><span class=\"line\">    height: <span class=\"number\">405</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">stream.on(<span class=\"string\">'start'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'stream'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">stream.on(<span class=\"string\">'stop'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'stream stopped'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">io.on(<span class=\"string\">'connection'</span>, socket =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pipeStream = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">        socket.emit(<span class=\"string\">'data'</span>, data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stream.on(<span class=\"string\">'data'</span>, pipeStream)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 切换摄像机</span></span><br><span class=\"line\">    socket.on(<span class=\"string\">'URI'</span>, data =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">        uri = <span class=\"string\">`rtsp://<span class=\"subst\">$&#123;data.userName&#125;</span>:<span class=\"subst\">$&#123;data.passWord&#125;</span>@<span class=\"subst\">$&#123;data.ip&#125;</span>:<span class=\"subst\">$&#123;data.port&#125;</span>/h264/ch1/sub/av_stream`</span></span><br><span class=\"line\">        stream.streamUrl = uri;</span><br><span class=\"line\">        <span class=\"comment\">// 重启</span></span><br><span class=\"line\">        stream.restart()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    socket.on(<span class=\"string\">'disconnect'</span> () =&gt; &#123;</span><br><span class=\"line\">        stream.removeListener(<span class=\"string\">'data'</span>, pipeStream)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>客户端</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">'can'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'jsmpeg.min.js'</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#can'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'ws://127.0.0.1:11111'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> player = <span class=\"keyword\">new</span> jsmpeg(ws, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        canvas: canvas,</span></span><br><span class=\"line\"><span class=\"javascript\">        autoplay: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个方案其实使用了很久一直都没发现问题, 是在一路摄像机安置在天桥附近人流量剧增, 与这个视频预览同一页面还有一个人脸实时抓拍的即时消息推送的功能, 导致在20 - 30分钟浏览器直接假死或者崩溃.(然后这个方案又凉了😂)</p>\n<h3 id=\"方案三-FFmpeg-Nginx-video-js\"><a href=\"#方案三-FFmpeg-Nginx-video-js\" class=\"headerlink\" title=\"方案三: FFmpeg + Nginx + video.js\"></a>方案三: FFmpeg + Nginx + video.js</h3><p>方案三下次写~</p>\n<p>Created on 2017/7/26 by Cara</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于网络摄像机做视频预览这块, 本身其实是非常陌生的, 当时接到这个需求也是相当的头疼(对于当时一年经验不到的我来说).当时我们的应用场景是: 多路网络摄像机通过局域网连接, PC 端能够实时预览监控画面并且画质达到720p, 延迟不能超过10秒, 多个摄像机能够切换查看. 由于后端只提供一个 RTSP 的直播协议, 所以所有的方案都是围绕着 RTSP 这个关键词. 当时时间很赶所以要自己慢慢研究是不可能了, 只能去找现成的库.</p>\n<blockquote>\n<p>现目前用过三种方案, 都不完美.</p>\n</blockquote>\n<h3 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h3><p>经过一波调研(google)之后, 知道浏览器对 RTSP 协议并不友好, 也就是说我们必须要自己转码再提供给浏览器使用, 找到的解决思路大概是:</p>\n<ol>\n<li>转码: <a href=\"https://www.ffmpeg.org/\" target=\"_blank\" rel=\"noopener\">FFmpeg</a> 是一个老牌的转码工具, 非常强大</li>\n<li>Node.js 用作中转站接收客户端发来的摄像机信息及控制 FFmpeg 推流</li>\n<li>最终客户端接收视频流</li>\n</ol>\n<p>下面我试过的三种方案, 基本结构都如此只是推流的方式和客户端的接收方式有所不同.</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p><strong>安装 FFmpeg 转码工具</strong></p>\n<ul>\n<li>window 平台</li>\n</ul>\n<ol>\n<li><a href=\"http://ffmpeg.zeranoe.com/builds/\" target=\"_blank\" rel=\"noopener\">下载 FFmpeg</a> 解压后应该是已经编译好的文件</li>\n<li>将解压好的文件放入 C 盘根目录(也可以自行放入其他盘符)下重命名为 ffmpeg(方便以后找)</li>\n<li>设置环境变量, 我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; 系统变量 -&gt; 新增, 路径选择刚刚 C 盘下的 ffmpeg文件夹中的 bin 文件夹</li>\n<li>注销或重启电脑让环境变量生效</li>\n<li>测试, 在 cmd 中输入 <code>ffmpeg -version</code>,  如果出现版本号之类的东西则成功.</li>\n</ol>\n<ul>\n<li>Mac 平台<br>Mac 下可以直接通过 <code>Homebrew</code> 安装最为简单.</li>\n</ul>\n<ol>\n<li>安装 <code>Homebrew</code>, 在终端中输入 <code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></li>\n<li>安装 FFmpeg, 直接在终端中输入 <code>brew install ffmpeg</code> 即可</li>\n<li>测试, 同样在终端中输入 <code>ffmpeg -version</code> 查看版本号</li>\n</ol>\n<p><strong>安装 Node.js</strong><br>这个就不展开详细说了, 每个前端都有吧…</p>\n<h3 id=\"方案一-img-标签\"><a href=\"#方案一-img-标签\" class=\"headerlink\" title=\"方案一: img 标签\"></a>方案一: img 标签</h3><p>当时想到的第一种方案也是最简单的方案, 是将视频流的每一帧转化为 base64 再通过动态替换 <code>&lt;img&gt;</code> 的 src 属性来达到预览的效果.中间用到了<a href=\"https://github.com/agsh/rtsp-ffmpeg\" target=\"_blank\" rel=\"noopener\">rtsp-ffmpeg</a>, 这个库的思路是通过 websocket 发送每一帧视频的 bytes 到客户端, 客户端可以通过 <code>&lt;img&gt;</code> 标签来展示.</p>\n<p>示例: </p>\n<p>node 端<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)()</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).Server(app)</span><br><span class=\"line\"><span class=\"keyword\">const</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>)(server)</span><br><span class=\"line\"><span class=\"keyword\">const</span> rtsp = <span class=\"built_in\">require</span>(<span class=\"string\">'rtsp-ffmpeg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">8081</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'server listening on 8081'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// uri 以海康摄像机的 rtsp 协议为例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> uri = <span class=\"string\">'rtps://admin:password@ip:port/h264/ch1/sub/av_stream'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> stream = <span class=\"keyword\">new</span> rtsp.FFMpeg(&#123;</span><br><span class=\"line\">    input: uri,</span><br><span class=\"line\">    resolution: <span class=\"string\">'1080x720'</span>,</span><br><span class=\"line\">    quality: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">stream.on(<span class=\"string\">'start'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'stream'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">stream.on(<span class=\"string\">'stop'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'stream stopped'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">io.on(<span class=\"string\">'connection'</span>, socket =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pipeStream = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">        socket.emit(<span class=\"string\">'data'</span>, data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stream.on(<span class=\"string\">'data'</span>, pipeStream)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 切换摄像机</span></span><br><span class=\"line\">    socket.on(<span class=\"string\">'URI'</span>, data =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">        uri = <span class=\"string\">`rtsp://<span class=\"subst\">$&#123;data.userName&#125;</span>:<span class=\"subst\">$&#123;data.passWord&#125;</span>@<span class=\"subst\">$&#123;data.ip&#125;</span>:<span class=\"subst\">$&#123;data.port&#125;</span>/h264/ch1/sub/av_stream`</span></span><br><span class=\"line\">        stream.input = uri</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 重启</span></span><br><span class=\"line\">        stream.restart()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    socket.on(<span class=\"string\">'disconnect'</span> () =&gt; &#123;</span><br><span class=\"line\">        stream.removeListener(<span class=\"string\">'data'</span>, pipeStream)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>客户端<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">'img'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'/socket.io/socket.io.js'</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">var</span> io = io();</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> img = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#img'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\tio.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> bytes = <span class=\"keyword\">new</span> Unit8Array(data)</span></span><br><span class=\"line\"><span class=\"javascript\">        img.src = <span class=\"string\">'data:image/jpeg;base64,'</span> + base64ArrayBuffer(bytes)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// byte 数组转 base64 (这段是在其他地方抄的)</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">base64ArrayBuffer</span>(<span class=\"params\">arrayBuffer</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> base64    = <span class=\"string\">''</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> encodings = <span class=\"string\">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> bytes         = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(arrayBuffer);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> byteLength    = bytes.byteLength;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> byteRemainder = byteLength % <span class=\"number\">3</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> mainLength    = byteLength - byteRemainder;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> a, b, c, d;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> chunk;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// Main loop deals with bytes in chunks of 3</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; mainLength; i = i + <span class=\"number\">3</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// Combine the three bytes into a single integer</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchunk = (bytes[i] &lt;&lt; 16) | (bytes[i + 1] &lt;&lt; 8) | bytes[i + 2];</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// Use bitmasks to extract 6-bit segments from the triplet</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\ta = (chunk &amp; <span class=\"number\">16515072</span>) &gt;&gt; <span class=\"number\">18</span>; <span class=\"comment\">// 16515072 = (2^6 - 1) &lt;&lt; 18</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tb = (chunk &amp; <span class=\"number\">258048</span>)   &gt;&gt; <span class=\"number\">12</span>; <span class=\"comment\">// 258048   = (2^6 - 1) &lt;&lt; 12</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tc = (chunk &amp; <span class=\"number\">4032</span>)     &gt;&gt;  <span class=\"number\">6</span>; <span class=\"comment\">// 4032     = (2^6 - 1) &lt;&lt; 6</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\td = chunk &amp; <span class=\"number\">63</span>;               <span class=\"comment\">// 63       = 2^6 - 1</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// Convert the raw binary segments to the appropriate ASCII encoding</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbase64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// Deal with the remaining bytes and padding</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">if</span> (byteRemainder == <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchunk = bytes[mainLength];</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\ta = (chunk &amp; <span class=\"number\">252</span>) &gt;&gt; <span class=\"number\">2</span>; <span class=\"comment\">// 252 = (2^6 - 1) &lt;&lt; 2</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// Set the 4 least significant bits to zero</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tb = (chunk &amp; <span class=\"number\">3</span>)   &lt;&lt; <span class=\"number\">4</span>; <span class=\"comment\">// 3   = 2^2 - 1</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tbase64 += encodings[a] + encodings[b] + <span class=\"string\">'=='</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (byteRemainder == <span class=\"number\">2</span>) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tchunk = (bytes[mainLength] &lt;&lt; 8) | bytes[mainLength + 1];</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\ta = (chunk &amp; <span class=\"number\">64512</span>) &gt;&gt; <span class=\"number\">10</span>; <span class=\"comment\">// 64512 = (2^6 - 1) &lt;&lt; 10</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tb = (chunk &amp; <span class=\"number\">1008</span>)  &gt;&gt;  <span class=\"number\">4</span>; <span class=\"comment\">// 1008  = (2^6 - 1) &lt;&lt; 4</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// Set the 2 least significant bits to zero</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tc = (chunk &amp; <span class=\"number\">15</span>)    &lt;&lt;  <span class=\"number\">2</span>; <span class=\"comment\">// 15    = 2^4 - 1</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tbase64 += encodings[a] + encodings[b] + encodings[c] + <span class=\"string\">'='</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">return</span> base64;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这种通过 img 的方式暴露出的问题是需要在前端解码, 导致下一帧到来时上一帧的画面还没解码完成. 就会有花屏甚至画面只显示一半的问题和延迟较大且延迟会累积, 在控制台中你会看到疯狂刷从内存来的请求, 如果你想看看 http 请求可能会疯. 所以这种方式肯定不行</p>\n<p>这个 <code>rtsp-ffmpeg</code> 还提供一种 canvas 的方式, 只是在客户端做一些修改:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> io = io();</span><br><span class=\"line\"><span class=\"comment\">// 把之前的 img 标签换成 canvas</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#canvas'</span>)</span><br><span class=\"line\">io.on(<span class=\"string\">'data'</span>, data =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bytes = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(data)</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([bytes], &#123;<span class=\"attr\">type</span>: <span class=\"string\">'application/octet-binary'</span>&#125;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = URL.createObjectURL(blob)</span><br><span class=\"line\">                    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image</span><br><span class=\"line\">                    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>)</span><br><span class=\"line\">        img.width = img.width * <span class=\"number\">0.5</span></span><br><span class=\"line\">        img.height = img.height * <span class=\"number\">0.5</span></span><br><span class=\"line\">        img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            URL.revokeObjectURL(url)</span><br><span class=\"line\">            ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1080</span>, <span class=\"number\">720</span>)</span><br><span class=\"line\">        &#125;;    </span><br><span class=\"line\">    img.src = url</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>用 canvas 的方法虽然比 img 的效果好一点, 但是最终效果仍然是不尽人意. 图像很不稳定, 表现为一半画面一半绿屏, 如果视频中图像变换剧烈的话表现会更差, 所以这种方法也不太行. 其实在这中间我并没有做什么操作只是将这个 demo 集成在了 vue 中, 再加上多摄像机的切换和主流摄像机厂商的支持(因为每个摄像机厂商的 rtsp 协议的结构不一样)而已, 所以第一想法是能不能在解码这块找到更好解决办法, 于是又找到了另一个库 <a href=\"https://github.com/phoboslab/jsmpeg\" target=\"_blank\" rel=\"noopener\">jsmpeg</a> 方案二就来了.</p>\n<h3 id=\"方案二-jsmpeg\"><a href=\"#方案二-jsmpeg\" class=\"headerlink\" title=\"方案二: jsmpeg\"></a>方案二: jsmpeg</h3><p>这个库还算比较不错的了, 也是通过 websocket 来转发, 看官方的例子是在终端中启动 ffmpeg -&gt; websocket -&gt; 客户端通过 <code>jsmpeg.min.js</code> 解码在 canvas 中播放. 因为这里只是实现了播放, 在这个基础上我们还需要在脚本中自启 ffmpeg / 切换/ 重启, 然后又去找了一个基于 <code>jsmpeg</code> 的库 <a href=\"https://github.com/kyriesent/node-rtsp-stream\" target=\"_blank\" rel=\"noopener\">node-rtsp-stream</a>. 这个库只是做了一些封装让我们不用自己在终端中手动启用 ffmpeg, 在此之上我再加上重启就能满足现在的需求.</p>\n<p>示例:</p>\n<ol>\n<li>改造 <code>node-rtsp-stream</code></li>\n</ol>\n<p>node-rtsp-stream/videoStream.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Mpeg1Muxer, STREAM_MAGIC_BYTES, VideoStream, events, util, ws;</span><br><span class=\"line\"></span><br><span class=\"line\">    ws = <span class=\"built_in\">require</span>(<span class=\"string\">'ws'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Mpeg1Muxer = <span class=\"built_in\">require</span>(<span class=\"string\">'./mpeg1muxer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    STREAM_MAGIC_BYTES = <span class=\"string\">\"jsmp\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> child_process = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    VideoStream = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = options.name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.streamUrl = options.streamUrl;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.width = options.width;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.height = options.height;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.wsPort = options.wsPort;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.inputStreamStarted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stream = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.startMpeg1Stream();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pipeStreamToSocketServer();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    util.inherits(VideoStream, events.EventEmitter);</span><br><span class=\"line\">    <span class=\"comment\">// 停止视频流</span></span><br><span class=\"line\">    VideoStream.prototype.stop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mpeg1Muxer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mpeg1Muxer.stream.stop()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 重启视频流</span></span><br><span class=\"line\">    VideoStream.prototype.restart = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mpeg1Muxer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mpeg1Muxer.stream.stop()</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ffmpeg is restart'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.inputStreamStarted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.stream = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.startMpeg1Stream();</span><br><span class=\"line\">            <span class=\"comment\">// 监听 ffmpeg 进程是否关闭</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mpeg1Muxer.on(<span class=\"string\">'ffmpegClose'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'ffmpeg closed on '</span> + code)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    VideoStream.prototype.startMpeg1Stream = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 省略打开流的方法, 这部分没有做改动</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    VideoStream.prototype.pipeStreamToSocketServer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将流塞给 socket, 同样也没改</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    VideoStream.prototype.onSocketConnect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">socket</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self, streamHeader;</span><br><span class=\"line\">        self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        streamHeader = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">8</span>);</span><br><span class=\"line\">        streamHeader.write(STREAM_MAGIC_BYTES);</span><br><span class=\"line\">        streamHeader.writeUInt16BE(<span class=\"keyword\">this</span>.width, <span class=\"number\">4</span>);</span><br><span class=\"line\">        streamHeader.writeUInt16BE(<span class=\"keyword\">this</span>.height, <span class=\"number\">6</span>);</span><br><span class=\"line\">        socket.send(streamHeader, &#123;</span><br><span class=\"line\">            binary: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log((<span class=\"string\">\"\"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\": New WebSocket Connection (\"</span>) + <span class=\"keyword\">this</span>.wsServer.clients.length + <span class=\"string\">\" total)\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> socket.on(<span class=\"string\">\"close\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">code, message</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log((<span class=\"string\">\"\"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\": Disconnected WebSocket (\"</span>) + self.wsServer.clients.length + <span class=\"string\">\" total)\"</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = VideoStream;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).call(<span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure></p>\n<p>node-rtsp-stream/videoStream.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Mpeg1Muxer, child_process, events, util;</span><br><span class=\"line\"></span><br><span class=\"line\">    child_process = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Mpeg1Muxer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self;</span><br><span class=\"line\">        self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = options.url;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stream = child_process.spawn(<span class=\"string\">\"ffmpeg\"</span>, </span><br><span class=\"line\">            [</span><br><span class=\"line\">                <span class=\"string\">\"-rtsp_transport\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"tcp\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"-i\"</span>,</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.url,</span><br><span class=\"line\">                <span class=\"string\">'-s'</span>, </span><br><span class=\"line\">                <span class=\"comment\">// 图像宽高</span></span><br><span class=\"line\">                <span class=\"string\">`<span class=\"subst\">$&#123;options.width&#125;</span>x<span class=\"subst\">$&#123;options.height&#125;</span>`</span>, </span><br><span class=\"line\">                <span class=\"string\">'-f'</span>, </span><br><span class=\"line\">                <span class=\"string\">'mpeg1video'</span>, </span><br><span class=\"line\">                <span class=\"string\">'-b:v'</span>, </span><br><span class=\"line\">                <span class=\"string\">'800k'</span>, </span><br><span class=\"line\">                <span class=\"string\">'-r'</span>, </span><br><span class=\"line\">                <span class=\"string\">'30'</span>, </span><br><span class=\"line\">                <span class=\"string\">'-'</span></span><br><span class=\"line\">            ], </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                detached: <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.inputStreamStarted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stream.stdout.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.emit(<span class=\"string\">'mpeg1data'</span>, data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stream.stderr.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.emit(<span class=\"string\">'ffmpegError'</span>, data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// kill ffmpeg</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stream.stop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// console.log(self.stream.pid)</span></span><br><span class=\"line\">            self.stream.stdin.pause();</span><br><span class=\"line\">            self.stream.kill()</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ffmpeg is be kill'</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 监听 ffmpeg 退出</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stream.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.emit(<span class=\"string\">'ffmpegClose'</span>, code)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    util.inherits(Mpeg1Muxer, events.EventEmitter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = Mpeg1Muxer;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).call(<span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>node 端使用</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)()</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).Server(app)</span><br><span class=\"line\"><span class=\"keyword\">const</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>)(server)</span><br><span class=\"line\"><span class=\"comment\">// 引入改造后的 node-rtsp-stream</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Rtsp = <span class=\"built_in\">require</span>(<span class=\"string\">'./node-rtsp-stream'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">8081</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'server listening on 8081'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// uri 以海康摄像机的 rtsp 协议为例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> uri = <span class=\"string\">'rtps://admin:password@ip:port/h264/ch1/sub/av_stream'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> stream = <span class=\"keyword\">new</span> Rtsp(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">'rtsp_stream'</span>,</span><br><span class=\"line\">    streamUrl: uri,</span><br><span class=\"line\">    wsPort: <span class=\"number\">11111</span>,</span><br><span class=\"line\">    width: <span class=\"number\">720</span>,</span><br><span class=\"line\">    height: <span class=\"number\">405</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">stream.on(<span class=\"string\">'start'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'stream'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">stream.on(<span class=\"string\">'stop'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'stream stopped'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">io.on(<span class=\"string\">'connection'</span>, socket =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pipeStream = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">        socket.emit(<span class=\"string\">'data'</span>, data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stream.on(<span class=\"string\">'data'</span>, pipeStream)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 切换摄像机</span></span><br><span class=\"line\">    socket.on(<span class=\"string\">'URI'</span>, data =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">        uri = <span class=\"string\">`rtsp://<span class=\"subst\">$&#123;data.userName&#125;</span>:<span class=\"subst\">$&#123;data.passWord&#125;</span>@<span class=\"subst\">$&#123;data.ip&#125;</span>:<span class=\"subst\">$&#123;data.port&#125;</span>/h264/ch1/sub/av_stream`</span></span><br><span class=\"line\">        stream.streamUrl = uri;</span><br><span class=\"line\">        <span class=\"comment\">// 重启</span></span><br><span class=\"line\">        stream.restart()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    socket.on(<span class=\"string\">'disconnect'</span> () =&gt; &#123;</span><br><span class=\"line\">        stream.removeListener(<span class=\"string\">'data'</span>, pipeStream)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>客户端</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">'can'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'jsmpeg.min.js'</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#can'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'ws://127.0.0.1:11111'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> player = <span class=\"keyword\">new</span> jsmpeg(ws, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        canvas: canvas,</span></span><br><span class=\"line\"><span class=\"javascript\">        autoplay: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个方案其实使用了很久一直都没发现问题, 是在一路摄像机安置在天桥附近人流量剧增, 与这个视频预览同一页面还有一个人脸实时抓拍的即时消息推送的功能, 导致在20 - 30分钟浏览器直接假死或者崩溃.(然后这个方案又凉了😂)</p>\n<h3 id=\"方案三-FFmpeg-Nginx-video-js\"><a href=\"#方案三-FFmpeg-Nginx-video-js\" class=\"headerlink\" title=\"方案三: FFmpeg + Nginx + video.js\"></a>方案三: FFmpeg + Nginx + video.js</h3><p>方案三下次写~</p>\n<p>Created on 2017/7/26 by Cara</p>\n"},{"title":"闭包和高阶函数","date":"2017-10-26T15:09:00.000Z","_content":"这一篇笔记是为正式开始学习 javadcript 设计模式做铺垫，由于许多设计模式都用到了闭包和高阶函数来实现, 所以了解这两个知识点也是必要的.\n\n> ### 闭包\n闭包简单的来说是函数与函数之间的桥梁, 让一个函数有权访问另一个函数作用域里的变量. 定义说起来还是很生涩的, 要理解闭包我们需要先知道变量的作用域以及变量的生命周期才行.\n\n* 变量的作用域\n变量的作用域指的是变量的有效范围. 在函数中生命变量时, 如果没有关键字 var、let及const那么这个变量就会变成全局变量; 如果有这个时候的变量就是局部变量, 只有在函数内部才能够访问到.\n```javascript\nlet fun = function () {\n\tlet a = 1;\n\talert(a)\n}\nfun()\nalert(a) // a is not defined \n```\n函数这个时候就像一块单面镜, 里面可以看见外面, 外面不能看到里面. 因为函数在搜索一个变量的时候, 如果函数内没有这个变量, 那么这个搜索过程会随着代码的执行环境创建的作用域链向外搜索直至全局对象.\n\n- 变量生命周期\n对于全局变量来说, 它的生命周期自然是永久的除非我们手动销毁这个变量; 对于局部变量, 一般来说当函数执行完毕之后该变量就会跟着被销毁. 而闭包则可以延续局部变量的生命周期, 举个栗子:\n```javascript\nlet func = function () {\n\tlet a = 0;\n\treturn function () {\n\t\ta++;\n\t\talert(a);\n\t}\n}\nlet fn = func();\nfn(); // 1\nfn(); // 2\nfn(); // 3\n```\n这里我们可以看到 a 变量不仅在外部可以被访问到而且还一直在递增, 这是因为 `fn = func()`执行时, fn 保存了 func 返回的匿名函数, 而这个匿名函数是有权 func() 被调用时产生的环境. a 变量就在这个环境中, 所以既然局部变量所在换的环境没有被销毁那么 a 变量也不会被销毁掉, 这个例子就产生了一个闭包结构.\n\n> #### 闭包的作用\n\n- 封装变量\n众所周知全局变量是非常容易引起命名冲突的, 所以我们可以利用闭包把一些不需要暴露在全局的变量封装成私有变量.\n\n假设有一个计算乘积的函数:\n```javascript\nconst mult = (function (){\n\t// 缓存(封装起来)\n\tlet cache = {}\n\treturn function () {\n\t\tlet arg = [].join.call(arguments, ',')\n\t\t// 封装计算方法\n\t\tlet calulate = function () {\n\t\t\tlet a = 1;\n\t\t\tfor (let i = 0, len = arguments.length; i < len; i++) {\n\t\t\t\ta = a * arguments[i]\n\t\t\t}\n\t\t}\n\t\t// 存在缓存则不计算\n\t\tif (arg in cache) return cache[arg]\n\t\treturn cache[arg] = calulate.apply(null, arguments)\n\t}\n})()\n\nconsole.log(mult(2,2,1)); // 4\n```\n将变量 cache 封装在 mult 函数中来缓存已经计算过的参数, 以减少重复计算. 这个缓存机制本来是可以扔在全局环境中的.\n\n- 延续局部变量生命周期\n平常做埋点会用到的 image 对象来上报数据, 如下:\n\n```javascript\nconst report = function (src) {\n\tlet img = new Image()\n\timg.src = src\n}\nreport('http://xxxxx.com/xxx')\n```\n这种写法会造成数据丢失, 因为在 HTTP 还未结束时, report 函数已经执行完毕而 img 为 report 函数中的局部变量, 在函数执行完毕后就会随之销毁造成数据丢失的情况. 下面用闭包把变量封装起来, 来解决这一问题:\n```javascript\nconst report = (function () {\n\tlet imgs = []\n\treturn function (src) {\n\t\tlet img = new Image();\n\t\timgs.push(img);\n\t\timg.src = src\n\t}\n})()\nreport('http://xxxxx.com/xxx')\n```\n\n> #### 闭包实现命令模式\n> 说了这么多就来看看关于闭包的运用吧, 这里用闭包简单实现下命令模式, 顺便预先了解一下命令模式.\n\n```html\n<button id='open' onclick='execute'>执行命令</button>\n<button id='close' onclick='undo'>撤销命令</button>\n```\n- 面向对象版\n```javascript\nconst TV = {\n\topen () {\n\t\tconsole.log('TV is open!')\n\t},\n\tclose () {\n\t\tconsole.log('TV is close!')\n\t}\n}\n// 接收命令\nconst ReceiveCommand = receiver => {\n\tthis.receiver = receiver\n}\n// 打开电视\nReceiveCommand.prototype.execute = function () {\n\tthis.receiver.open()\n}\n// 关电视\nReceiveCommand.prototype.undo = functon () {\n\tthis.receiver.close()\n}\n\n// 设置命令\nconst setCommand = function (command) {\n\tdocument.getElementById('open').onclick = function () {\n\t\tcommand.execute()\n\t}\n\tdocument.getElementById('close').onclick = function () {\n\t\tcommand.undo()\n\t}\n}\n// 将命令告诉执行者, 设置命令传入执行者\nsetCommand(new ReceiveCommand(TV))\n```\n命令模式是把请求发起者和执行命令(执行者)分离开来, 以达到解耦的目的. 在执行命令之前, 把命令放入执行者来告诉执行者要执行什么样的命令, 命令模式大概就是这样啦.\n\n- 闭包版\n```javascript\nconst TV = {\n\topen () {\n\t\tconsole.log('TV is open!')\n\t},\n\tclose () {\n\t\tconsole.log('TV is close!')\n\t}\n}\n// 执行者\nconst receiveCommand = receiver => {\n\tlet execute = _ => {\n\t\treturn receiver.open()\n\t}\n\tlet undo = _ => {\n\t\treturn receiver.close()\n\t}\n\treturn {\n\t\texecute: execute,\n\t\tundo: undo\n\t}\n}\n// 发起者\nconst setCommand = command => {\n\tdocument.getElementById('open').onclick = _ => {\n\t\texecute.open()\n\t}\n\tdocument.getElementById('close').onclick = _ => {\n\t\tundo.close()\n\t}\n}\nsetCommand(receiveCommand(TV))\n```\n闭包明显清晰更多, 也更简洁.\n\n> ### 高阶函数\n将函数作为参数传递或让函数执行结果返回另一个函数, 满足这两个条件之一的函数都可以称作为高阶函数.\n\n#### 将函数作为参数传递\n将函数作为参数传递, 就意味着我们可以将与业务相关的逻辑代码分离出来, 解除业务代码和不变逻辑的耦合, 最常见的就是我们的回调函数. 实际运用中 ajax 异步请求, 当我们不知道返回值在什么时候返回值又需要在返回后做一些处理, 就要用到回调函数了.\n\n```javascript\nlet getPersonInfo = function (userId, callback) {\n\t$.ajax(`http://xxx/getPersonInfo?${userId}`, function (data) {\n\t\tcallback && callback(data)\n\t})\n}\n// 这里的匿名函数就是上面的 callback\ngetPersonInfo(\"54332123\", function (data) {\n\tconsole.log(data)\n})\n```\n这种是我们比较常见的回调函数, 在其他的方面, 也可以将一些请求委托给另一个函数代为执行, 如:\n假如我们需要先创建100的 div 节点, 然后把它们隐藏掉\n\n```javascript\n// count 默认值为100\nconst appendDiv = count = 100, callback => {\n\tif (count && typeof count === 'number') {\n\t\tfor(let i = 0; i < count; i++){\n\t\t\tlet div = document.createElement('div')\n\t\t\tdiv.innerHTML = i\n\t\t\tdocument.body.appendChild(div)\n\t\t\t// 将业务代码委托执行\n\t\t\tcallback && callback(div)\n\t\t}\n\t}\n} \n// 把改变样式的业务逻辑分离出来\nappendDiv(function (el) {\n\tel.style.cssText = `display: none`\n})\n```\n这样我们就将业务逻辑分离出来了, 以后可能我们想改颜色啦或者位置什么的也方便维护.\n\n#### 函数作为返回值 \n相比把函数作为参数传递, 可能函数当做返回值返回运用场景更多一些, 让函数返回另一个可执行函数就意味着运算过程可延续.直接来看一些例子吧.\n\n- 检查类型\n\n```javascript\nconst Type = {}\nfor (let i = 0, type; type = ['Array', 'String', 'Number'][i++];) {\n\tType['is' + type] = function (obj) {\n\t\treturn Object.prototype.toString.call(obj) === '[object '+ type +']'\n\t}\n}\n\nconsole.log(Type.isArray([])) // true\nconsole.log(Type.isString('123')) // true\nconsole.log(Type.isNumber(123)) // true\n```\n\n- 单例模式\n\t这里先不讨论单例模式, 只看代码实现\n\n```javascript\n// fn 函数作为参数传递\nconst getSingle = function (fn) {\n\tlet ret;\n\treturn function () {\n\t\t// 如果 ret 不存在, ret 等于 fn 函数\n\t\treturn ret || (ret = fn.apply(this, arguments))\n\t}\n} \n// 调用这个高阶函数\nlet getDiv = getSingle(function () {\n\t// 参数也会一起传过来, 这里返回['123']\n\tconsole.log(arguments);\n\treturn document.createElement('div');\n\t\n})\ngetDiv('123')\n```\ngetSingle 这个高阶函数既将函数作为参数传递, 又让函数执行后返回另一个函数.\n\n> JavaScript 设计模式与开发实践还有个例子也很有意思\n> 叫做 AOP(面向切面编程), 作用是把与业务逻辑不相关的部分抽离出来再通过动态植入的方式加入业务逻辑的模块中.\n\n```javascript\n// 在原函数之前\nFunction.prototype.before = function (beforeFn) {\n\tlet that = this; // 保存原函数的引用\n\treturn function () { // A\n\t\t// 执行新函数并修正 this\n\t\tbeforeFn.apply(this, arguments)\n\t\t// 执行原函数\n\t\treturn that.apply(this, arguments)\n\t}\n}\n// 在原函数之后\nFunction.prototype.after = function (afterFn) {\n\tlet that = this\n\treturn function () { // B\n\t\t// 先执行 before 函数\n\t\tthat.apply(this, arguments)\n\t\t// 再执行新函数\n\t\treturn afterFn.apply(this, arguments)\n\t}\n}\n\nlet fn = function () {\n\tconsole.log(2)\n}\nfn = fn.before(function() {\n\tconsole.log(1)\n}).after(function() {\n\tconsole.log(3)\n})\n\nfn() // 按顺序输出 1 2 3\n```\n上面的执行顺序是这样的:\n\n1. After中的回调函数 B\n因为在最后执行 fn 函数时, fn 已经是 after 函数了, 因此在 fn() 执行时调用的是 after 中返回的匿名函数B.\n2. B 中的 that.apply(this, arguments)\n此时的 that 指向 before 函数\n3.  执行Before中的回调函数 A\n4. A 中的 beforeFn.apply(this, arguments)\n执行 console.log(1)\n5. return that.apply(this, arguments)\n执行 console.log(2)\n6. 回到 after 函数中执行return afterFn.apply(this, arguments)\n执行 console.log(3)\n\n\n#### 函数柯里化\n函数柯里化可以说是高阶函数经典中的经典了, 说到高阶函数应该很快就会想到他了. 我理解的函数柯里化是: 先将参数依次缓存, 在真正需要计算结果时, 才进行计算这样可以减少运算次数.\n\n```js\n// 通用 curring\nconst curring = fn => {\n    let argsArr = []\n    return (...args) => {\n        return [...args].length === 0\n            ? fn.apply(null, argsArr)\n            : [].push.apply(argsArr, [...args])\n    }\n}\n\n// 需要计算的函数\nlet calculate = (() => {\n    let money = 0\n    return (...argsArr) => {\n        argsArr.forEach(item => {\n            money += item\n        })\n        return money\n    }\n})()\n\n// 柯里化\ncalculate = curring(calculate)\n\n// 缓存参数, 其实并没有计算\ncalculate(20)\ncalculate(40)\ncalculate(20)\n\n// 真正计算的时候\ncalculate()\n```\n\n#### 函数节流\n在某些场景下函数有可能会被非常频繁地调用, 从而造成很大的性能问题. 例如: window.resize事件、mousemove 事件, 它们触发的频率太高了, 而用户并不需要如此高频率的使用. 因此函数节流就是为了限制函数出发的频率.\n\n```js\n// 节流\nconst throttle = (fn, interval = 800) => {\n    let isFirst = true, timer\n    // ...args => event\n    return (...args) => {\n        let that = this\n        if (isFirst) {\n            fn.apply(that, [...args])\n            return isFirst = false\n        }\n        if (timer) return false\n        timer = setTimeout(() => {\n            clearTimeout(timer)\n            timer = null\n            fn.apply(that, [...args])\n        }, interval)\n    }\n}\n\n// 传入需要节流的函数和间隔时间\nwindow.onresize = throttle(function () {\n    console.log(1)\n}, 800)\n```\n#### 分时函数\n上面我们提供了一种限制函数调用频率的解决方案, 现在是另一个问题: 某些函数是由用户主动唤起的, 但是因为一些原因导致函数严重影响页面的性能. 分时函数可以为我们解决这个问题, 我理解的分时函数: 将请求分批处理, 在一定的时间内执行一部分请求, 直到请求全部完成.\n\n```js\n// 分时函数\nconst timeChunk = (data, fn, count = 1) => {\n    let timer, obj\n    const start = () => {\n        for (let i = 0; i < Math.min(count, data.length); i++) {\n            obj = data.shift()\n            fn.apply(null, obj)\n        }\n    }\n    return () => {\n        if (data.length === 0) {\n            clearTimeout(timer)\n            return\n        }\n        timer = setInterval(() => {\n            start()\n        }, 200)\n    }\n}\n\n// 模拟数据\nlet ary = []\nfor (let i = 0; i < 1000; i++) {\n    ary.push(i)\n}\n\n// 分时化\nlet renderfriendList = timeChunk(ary, function (n) {\n    let div = document.createElement('div')\n    div.innerHTML = n\n    document.body.appendChild(div)\n}, 10)\n\n// 渲染\nrenderfriendList()\n```\n\n#### 惰性加载\n举个例子, 在 web 中为了满足各浏览器之间的差异, 我们会做一些嗅探工作. 异于常规方案, 惰性加载在真正需要时才使用且进入条件分支后在内部重写该函数, 这样重写后的函数就是我们需要的函数.\n\n```js\nlet addEvent = (el, type, handler) => {\n    if (window.addEventListener) {\n        // 重写函数\n        addEvent = (el, type, handler) => {\n            el.addEventListener(type, handler, false)\n        }\n    } else if (window.attachEvent) {\n        addEvent = (el, type, handler) => {\n            el.attachEvent('on' + type, handler)\n        }\n    }\n    addEvent(el, type, handler)\n}\n\n// 使用\naddEvent(btn, 'click', function () {\n    console.log('click!')\n})\n```\n\nCreated on 2017-10-26 by Cara","source":"_posts/闭包和高阶函数.md","raw":"---\ntitle: '闭包和高阶函数'\ndate: 2017-10-26 23:09:00\ntags:\n- JavaScript\ncategories:\n- 笔记📒\n- JavaScript设计模式\n---\n这一篇笔记是为正式开始学习 javadcript 设计模式做铺垫，由于许多设计模式都用到了闭包和高阶函数来实现, 所以了解这两个知识点也是必要的.\n\n> ### 闭包\n闭包简单的来说是函数与函数之间的桥梁, 让一个函数有权访问另一个函数作用域里的变量. 定义说起来还是很生涩的, 要理解闭包我们需要先知道变量的作用域以及变量的生命周期才行.\n\n* 变量的作用域\n变量的作用域指的是变量的有效范围. 在函数中生命变量时, 如果没有关键字 var、let及const那么这个变量就会变成全局变量; 如果有这个时候的变量就是局部变量, 只有在函数内部才能够访问到.\n```javascript\nlet fun = function () {\n\tlet a = 1;\n\talert(a)\n}\nfun()\nalert(a) // a is not defined \n```\n函数这个时候就像一块单面镜, 里面可以看见外面, 外面不能看到里面. 因为函数在搜索一个变量的时候, 如果函数内没有这个变量, 那么这个搜索过程会随着代码的执行环境创建的作用域链向外搜索直至全局对象.\n\n- 变量生命周期\n对于全局变量来说, 它的生命周期自然是永久的除非我们手动销毁这个变量; 对于局部变量, 一般来说当函数执行完毕之后该变量就会跟着被销毁. 而闭包则可以延续局部变量的生命周期, 举个栗子:\n```javascript\nlet func = function () {\n\tlet a = 0;\n\treturn function () {\n\t\ta++;\n\t\talert(a);\n\t}\n}\nlet fn = func();\nfn(); // 1\nfn(); // 2\nfn(); // 3\n```\n这里我们可以看到 a 变量不仅在外部可以被访问到而且还一直在递增, 这是因为 `fn = func()`执行时, fn 保存了 func 返回的匿名函数, 而这个匿名函数是有权 func() 被调用时产生的环境. a 变量就在这个环境中, 所以既然局部变量所在换的环境没有被销毁那么 a 变量也不会被销毁掉, 这个例子就产生了一个闭包结构.\n\n> #### 闭包的作用\n\n- 封装变量\n众所周知全局变量是非常容易引起命名冲突的, 所以我们可以利用闭包把一些不需要暴露在全局的变量封装成私有变量.\n\n假设有一个计算乘积的函数:\n```javascript\nconst mult = (function (){\n\t// 缓存(封装起来)\n\tlet cache = {}\n\treturn function () {\n\t\tlet arg = [].join.call(arguments, ',')\n\t\t// 封装计算方法\n\t\tlet calulate = function () {\n\t\t\tlet a = 1;\n\t\t\tfor (let i = 0, len = arguments.length; i < len; i++) {\n\t\t\t\ta = a * arguments[i]\n\t\t\t}\n\t\t}\n\t\t// 存在缓存则不计算\n\t\tif (arg in cache) return cache[arg]\n\t\treturn cache[arg] = calulate.apply(null, arguments)\n\t}\n})()\n\nconsole.log(mult(2,2,1)); // 4\n```\n将变量 cache 封装在 mult 函数中来缓存已经计算过的参数, 以减少重复计算. 这个缓存机制本来是可以扔在全局环境中的.\n\n- 延续局部变量生命周期\n平常做埋点会用到的 image 对象来上报数据, 如下:\n\n```javascript\nconst report = function (src) {\n\tlet img = new Image()\n\timg.src = src\n}\nreport('http://xxxxx.com/xxx')\n```\n这种写法会造成数据丢失, 因为在 HTTP 还未结束时, report 函数已经执行完毕而 img 为 report 函数中的局部变量, 在函数执行完毕后就会随之销毁造成数据丢失的情况. 下面用闭包把变量封装起来, 来解决这一问题:\n```javascript\nconst report = (function () {\n\tlet imgs = []\n\treturn function (src) {\n\t\tlet img = new Image();\n\t\timgs.push(img);\n\t\timg.src = src\n\t}\n})()\nreport('http://xxxxx.com/xxx')\n```\n\n> #### 闭包实现命令模式\n> 说了这么多就来看看关于闭包的运用吧, 这里用闭包简单实现下命令模式, 顺便预先了解一下命令模式.\n\n```html\n<button id='open' onclick='execute'>执行命令</button>\n<button id='close' onclick='undo'>撤销命令</button>\n```\n- 面向对象版\n```javascript\nconst TV = {\n\topen () {\n\t\tconsole.log('TV is open!')\n\t},\n\tclose () {\n\t\tconsole.log('TV is close!')\n\t}\n}\n// 接收命令\nconst ReceiveCommand = receiver => {\n\tthis.receiver = receiver\n}\n// 打开电视\nReceiveCommand.prototype.execute = function () {\n\tthis.receiver.open()\n}\n// 关电视\nReceiveCommand.prototype.undo = functon () {\n\tthis.receiver.close()\n}\n\n// 设置命令\nconst setCommand = function (command) {\n\tdocument.getElementById('open').onclick = function () {\n\t\tcommand.execute()\n\t}\n\tdocument.getElementById('close').onclick = function () {\n\t\tcommand.undo()\n\t}\n}\n// 将命令告诉执行者, 设置命令传入执行者\nsetCommand(new ReceiveCommand(TV))\n```\n命令模式是把请求发起者和执行命令(执行者)分离开来, 以达到解耦的目的. 在执行命令之前, 把命令放入执行者来告诉执行者要执行什么样的命令, 命令模式大概就是这样啦.\n\n- 闭包版\n```javascript\nconst TV = {\n\topen () {\n\t\tconsole.log('TV is open!')\n\t},\n\tclose () {\n\t\tconsole.log('TV is close!')\n\t}\n}\n// 执行者\nconst receiveCommand = receiver => {\n\tlet execute = _ => {\n\t\treturn receiver.open()\n\t}\n\tlet undo = _ => {\n\t\treturn receiver.close()\n\t}\n\treturn {\n\t\texecute: execute,\n\t\tundo: undo\n\t}\n}\n// 发起者\nconst setCommand = command => {\n\tdocument.getElementById('open').onclick = _ => {\n\t\texecute.open()\n\t}\n\tdocument.getElementById('close').onclick = _ => {\n\t\tundo.close()\n\t}\n}\nsetCommand(receiveCommand(TV))\n```\n闭包明显清晰更多, 也更简洁.\n\n> ### 高阶函数\n将函数作为参数传递或让函数执行结果返回另一个函数, 满足这两个条件之一的函数都可以称作为高阶函数.\n\n#### 将函数作为参数传递\n将函数作为参数传递, 就意味着我们可以将与业务相关的逻辑代码分离出来, 解除业务代码和不变逻辑的耦合, 最常见的就是我们的回调函数. 实际运用中 ajax 异步请求, 当我们不知道返回值在什么时候返回值又需要在返回后做一些处理, 就要用到回调函数了.\n\n```javascript\nlet getPersonInfo = function (userId, callback) {\n\t$.ajax(`http://xxx/getPersonInfo?${userId}`, function (data) {\n\t\tcallback && callback(data)\n\t})\n}\n// 这里的匿名函数就是上面的 callback\ngetPersonInfo(\"54332123\", function (data) {\n\tconsole.log(data)\n})\n```\n这种是我们比较常见的回调函数, 在其他的方面, 也可以将一些请求委托给另一个函数代为执行, 如:\n假如我们需要先创建100的 div 节点, 然后把它们隐藏掉\n\n```javascript\n// count 默认值为100\nconst appendDiv = count = 100, callback => {\n\tif (count && typeof count === 'number') {\n\t\tfor(let i = 0; i < count; i++){\n\t\t\tlet div = document.createElement('div')\n\t\t\tdiv.innerHTML = i\n\t\t\tdocument.body.appendChild(div)\n\t\t\t// 将业务代码委托执行\n\t\t\tcallback && callback(div)\n\t\t}\n\t}\n} \n// 把改变样式的业务逻辑分离出来\nappendDiv(function (el) {\n\tel.style.cssText = `display: none`\n})\n```\n这样我们就将业务逻辑分离出来了, 以后可能我们想改颜色啦或者位置什么的也方便维护.\n\n#### 函数作为返回值 \n相比把函数作为参数传递, 可能函数当做返回值返回运用场景更多一些, 让函数返回另一个可执行函数就意味着运算过程可延续.直接来看一些例子吧.\n\n- 检查类型\n\n```javascript\nconst Type = {}\nfor (let i = 0, type; type = ['Array', 'String', 'Number'][i++];) {\n\tType['is' + type] = function (obj) {\n\t\treturn Object.prototype.toString.call(obj) === '[object '+ type +']'\n\t}\n}\n\nconsole.log(Type.isArray([])) // true\nconsole.log(Type.isString('123')) // true\nconsole.log(Type.isNumber(123)) // true\n```\n\n- 单例模式\n\t这里先不讨论单例模式, 只看代码实现\n\n```javascript\n// fn 函数作为参数传递\nconst getSingle = function (fn) {\n\tlet ret;\n\treturn function () {\n\t\t// 如果 ret 不存在, ret 等于 fn 函数\n\t\treturn ret || (ret = fn.apply(this, arguments))\n\t}\n} \n// 调用这个高阶函数\nlet getDiv = getSingle(function () {\n\t// 参数也会一起传过来, 这里返回['123']\n\tconsole.log(arguments);\n\treturn document.createElement('div');\n\t\n})\ngetDiv('123')\n```\ngetSingle 这个高阶函数既将函数作为参数传递, 又让函数执行后返回另一个函数.\n\n> JavaScript 设计模式与开发实践还有个例子也很有意思\n> 叫做 AOP(面向切面编程), 作用是把与业务逻辑不相关的部分抽离出来再通过动态植入的方式加入业务逻辑的模块中.\n\n```javascript\n// 在原函数之前\nFunction.prototype.before = function (beforeFn) {\n\tlet that = this; // 保存原函数的引用\n\treturn function () { // A\n\t\t// 执行新函数并修正 this\n\t\tbeforeFn.apply(this, arguments)\n\t\t// 执行原函数\n\t\treturn that.apply(this, arguments)\n\t}\n}\n// 在原函数之后\nFunction.prototype.after = function (afterFn) {\n\tlet that = this\n\treturn function () { // B\n\t\t// 先执行 before 函数\n\t\tthat.apply(this, arguments)\n\t\t// 再执行新函数\n\t\treturn afterFn.apply(this, arguments)\n\t}\n}\n\nlet fn = function () {\n\tconsole.log(2)\n}\nfn = fn.before(function() {\n\tconsole.log(1)\n}).after(function() {\n\tconsole.log(3)\n})\n\nfn() // 按顺序输出 1 2 3\n```\n上面的执行顺序是这样的:\n\n1. After中的回调函数 B\n因为在最后执行 fn 函数时, fn 已经是 after 函数了, 因此在 fn() 执行时调用的是 after 中返回的匿名函数B.\n2. B 中的 that.apply(this, arguments)\n此时的 that 指向 before 函数\n3.  执行Before中的回调函数 A\n4. A 中的 beforeFn.apply(this, arguments)\n执行 console.log(1)\n5. return that.apply(this, arguments)\n执行 console.log(2)\n6. 回到 after 函数中执行return afterFn.apply(this, arguments)\n执行 console.log(3)\n\n\n#### 函数柯里化\n函数柯里化可以说是高阶函数经典中的经典了, 说到高阶函数应该很快就会想到他了. 我理解的函数柯里化是: 先将参数依次缓存, 在真正需要计算结果时, 才进行计算这样可以减少运算次数.\n\n```js\n// 通用 curring\nconst curring = fn => {\n    let argsArr = []\n    return (...args) => {\n        return [...args].length === 0\n            ? fn.apply(null, argsArr)\n            : [].push.apply(argsArr, [...args])\n    }\n}\n\n// 需要计算的函数\nlet calculate = (() => {\n    let money = 0\n    return (...argsArr) => {\n        argsArr.forEach(item => {\n            money += item\n        })\n        return money\n    }\n})()\n\n// 柯里化\ncalculate = curring(calculate)\n\n// 缓存参数, 其实并没有计算\ncalculate(20)\ncalculate(40)\ncalculate(20)\n\n// 真正计算的时候\ncalculate()\n```\n\n#### 函数节流\n在某些场景下函数有可能会被非常频繁地调用, 从而造成很大的性能问题. 例如: window.resize事件、mousemove 事件, 它们触发的频率太高了, 而用户并不需要如此高频率的使用. 因此函数节流就是为了限制函数出发的频率.\n\n```js\n// 节流\nconst throttle = (fn, interval = 800) => {\n    let isFirst = true, timer\n    // ...args => event\n    return (...args) => {\n        let that = this\n        if (isFirst) {\n            fn.apply(that, [...args])\n            return isFirst = false\n        }\n        if (timer) return false\n        timer = setTimeout(() => {\n            clearTimeout(timer)\n            timer = null\n            fn.apply(that, [...args])\n        }, interval)\n    }\n}\n\n// 传入需要节流的函数和间隔时间\nwindow.onresize = throttle(function () {\n    console.log(1)\n}, 800)\n```\n#### 分时函数\n上面我们提供了一种限制函数调用频率的解决方案, 现在是另一个问题: 某些函数是由用户主动唤起的, 但是因为一些原因导致函数严重影响页面的性能. 分时函数可以为我们解决这个问题, 我理解的分时函数: 将请求分批处理, 在一定的时间内执行一部分请求, 直到请求全部完成.\n\n```js\n// 分时函数\nconst timeChunk = (data, fn, count = 1) => {\n    let timer, obj\n    const start = () => {\n        for (let i = 0; i < Math.min(count, data.length); i++) {\n            obj = data.shift()\n            fn.apply(null, obj)\n        }\n    }\n    return () => {\n        if (data.length === 0) {\n            clearTimeout(timer)\n            return\n        }\n        timer = setInterval(() => {\n            start()\n        }, 200)\n    }\n}\n\n// 模拟数据\nlet ary = []\nfor (let i = 0; i < 1000; i++) {\n    ary.push(i)\n}\n\n// 分时化\nlet renderfriendList = timeChunk(ary, function (n) {\n    let div = document.createElement('div')\n    div.innerHTML = n\n    document.body.appendChild(div)\n}, 10)\n\n// 渲染\nrenderfriendList()\n```\n\n#### 惰性加载\n举个例子, 在 web 中为了满足各浏览器之间的差异, 我们会做一些嗅探工作. 异于常规方案, 惰性加载在真正需要时才使用且进入条件分支后在内部重写该函数, 这样重写后的函数就是我们需要的函数.\n\n```js\nlet addEvent = (el, type, handler) => {\n    if (window.addEventListener) {\n        // 重写函数\n        addEvent = (el, type, handler) => {\n            el.addEventListener(type, handler, false)\n        }\n    } else if (window.attachEvent) {\n        addEvent = (el, type, handler) => {\n            el.attachEvent('on' + type, handler)\n        }\n    }\n    addEvent(el, type, handler)\n}\n\n// 使用\naddEvent(btn, 'click', function () {\n    console.log('click!')\n})\n```\n\nCreated on 2017-10-26 by Cara","slug":"闭包和高阶函数","published":1,"updated":"2018-05-05T09:23:03.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgurolt40020klu0xmy4iinz","content":"<p>这一篇笔记是为正式开始学习 javadcript 设计模式做铺垫，由于许多设计模式都用到了闭包和高阶函数来实现, 所以了解这两个知识点也是必要的.</p>\n<blockquote>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包简单的来说是函数与函数之间的桥梁, 让一个函数有权访问另一个函数作用域里的变量. 定义说起来还是很生涩的, 要理解闭包我们需要先知道变量的作用域以及变量的生命周期才行.</p>\n</blockquote>\n<ul>\n<li>变量的作用域<br>变量的作用域指的是变量的有效范围. 在函数中生命变量时, 如果没有关键字 var、let及const那么这个变量就会变成全局变量; 如果有这个时候的变量就是局部变量, 只有在函数内部才能够访问到.<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fun = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\talert(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun()</span><br><span class=\"line\">alert(a) <span class=\"comment\">// a is not defined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>函数这个时候就像一块单面镜, 里面可以看见外面, 外面不能看到里面. 因为函数在搜索一个变量的时候, 如果函数内没有这个变量, 那么这个搜索过程会随着代码的执行环境创建的作用域链向外搜索直至全局对象.</p>\n<ul>\n<li>变量生命周期<br>对于全局变量来说, 它的生命周期自然是永久的除非我们手动销毁这个变量; 对于局部变量, 一般来说当函数执行完毕之后该变量就会跟着被销毁. 而闭包则可以延续局部变量的生命周期, 举个栗子:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\ta++;</span><br><span class=\"line\">\t\talert(a);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = func();</span><br><span class=\"line\">fn(); <span class=\"comment\">// 1</span></span><br><span class=\"line\">fn(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">fn(); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里我们可以看到 a 变量不仅在外部可以被访问到而且还一直在递增, 这是因为 <code>fn = func()</code>执行时, fn 保存了 func 返回的匿名函数, 而这个匿名函数是有权 func() 被调用时产生的环境. a 变量就在这个环境中, 所以既然局部变量所在换的环境没有被销毁那么 a 变量也不会被销毁掉, 这个例子就产生了一个闭包结构.</p>\n<blockquote>\n<h4 id=\"闭包的作用\"><a href=\"#闭包的作用\" class=\"headerlink\" title=\"闭包的作用\"></a>闭包的作用</h4></blockquote>\n<ul>\n<li>封装变量<br>众所周知全局变量是非常容易引起命名冲突的, 所以我们可以利用闭包把一些不需要暴露在全局的变量封装成私有变量.</li>\n</ul>\n<p>假设有一个计算乘积的函数:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mult = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 缓存(封装起来)</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> cache = &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> arg = [].join.call(<span class=\"built_in\">arguments</span>, <span class=\"string\">','</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 封装计算方法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> calulate = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = <span class=\"built_in\">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\t\t\ta = a * <span class=\"built_in\">arguments</span>[i]</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 存在缓存则不计算</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arg <span class=\"keyword\">in</span> cache) <span class=\"keyword\">return</span> cache[arg]</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cache[arg] = calulate.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mult(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>)); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure></p>\n<p>将变量 cache 封装在 mult 函数中来缓存已经计算过的参数, 以减少重复计算. 这个缓存机制本来是可以扔在全局环境中的.</p>\n<ul>\n<li>延续局部变量生命周期<br>平常做埋点会用到的 image 对象来上报数据, 如下:</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> report = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">\timg.src = src</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">report(<span class=\"string\">'http://xxxxx.com/xxx'</span>)</span><br></pre></td></tr></table></figure>\n<p>这种写法会造成数据丢失, 因为在 HTTP 还未结束时, report 函数已经执行完毕而 img 为 report 函数中的局部变量, 在函数执行完毕后就会随之销毁造成数据丢失的情况. 下面用闭包把变量封装起来, 来解决这一问题:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> report = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> imgs = []</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">\t\timgs.push(img);</span><br><span class=\"line\">\t\timg.src = src</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">report(<span class=\"string\">'http://xxxxx.com/xxx'</span>)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<h4 id=\"闭包实现命令模式\"><a href=\"#闭包实现命令模式\" class=\"headerlink\" title=\"闭包实现命令模式\"></a>闭包实现命令模式</h4><p>说了这么多就来看看关于闭包的运用吧, 这里用闭包简单实现下命令模式, 顺便预先了解一下命令模式.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">'open'</span> <span class=\"attr\">onclick</span>=<span class=\"string\">'execute'</span>&gt;</span>执行命令<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">'close'</span> <span class=\"attr\">onclick</span>=<span class=\"string\">'undo'</span>&gt;</span>撤销命令<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>面向对象版<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> TV = &#123;</span><br><span class=\"line\">\topen () &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'TV is open!'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tclose () &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'TV is close!'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接收命令</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ReceiveCommand = <span class=\"function\"><span class=\"params\">receiver</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.receiver = receiver</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打开电视</span></span><br><span class=\"line\">ReceiveCommand.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.receiver.open()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 关电视</span></span><br><span class=\"line\">ReceiveCommand.prototype.undo = functon () &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.receiver.close()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置命令</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> setCommand = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">command</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'open'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcommand.execute()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'close'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcommand.undo()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将命令告诉执行者, 设置命令传入执行者</span></span><br><span class=\"line\">setCommand(<span class=\"keyword\">new</span> ReceiveCommand(TV))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>命令模式是把请求发起者和执行命令(执行者)分离开来, 以达到解耦的目的. 在执行命令之前, 把命令放入执行者来告诉执行者要执行什么样的命令, 命令模式大概就是这样啦.</p>\n<ul>\n<li>闭包版<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> TV = &#123;</span><br><span class=\"line\">\topen () &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'TV is open!'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tclose () &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'TV is close!'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 执行者</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> receiveCommand = <span class=\"function\"><span class=\"params\">receiver</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> execute = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> receiver.open()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> undo = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> receiver.close()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\texecute: execute,</span><br><span class=\"line\">\t\tundo: undo</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 发起者</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> setCommand = <span class=\"function\"><span class=\"params\">command</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'open'</span>).onclick = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\texecute.open()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'close'</span>).onclick = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\tundo.close()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setCommand(receiveCommand(TV))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>闭包明显清晰更多, 也更简洁.</p>\n<blockquote>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>将函数作为参数传递或让函数执行结果返回另一个函数, 满足这两个条件之一的函数都可以称作为高阶函数.</p>\n</blockquote>\n<h4 id=\"将函数作为参数传递\"><a href=\"#将函数作为参数传递\" class=\"headerlink\" title=\"将函数作为参数传递\"></a>将函数作为参数传递</h4><p>将函数作为参数传递, 就意味着我们可以将与业务相关的逻辑代码分离出来, 解除业务代码和不变逻辑的耦合, 最常见的就是我们的回调函数. 实际运用中 ajax 异步请求, 当我们不知道返回值在什么时候返回值又需要在返回后做一些处理, 就要用到回调函数了.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> getPersonInfo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userId, callback</span>) </span>&#123;</span><br><span class=\"line\">\t$.ajax(<span class=\"string\">`http://xxx/getPersonInfo?<span class=\"subst\">$&#123;userId&#125;</span>`</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\tcallback &amp;&amp; callback(data)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里的匿名函数就是上面的 callback</span></span><br><span class=\"line\">getPersonInfo(<span class=\"string\">\"54332123\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这种是我们比较常见的回调函数, 在其他的方面, 也可以将一些请求委托给另一个函数代为执行, 如:<br>假如我们需要先创建100的 div 节点, 然后把它们隐藏掉</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// count 默认值为100</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> appendDiv = count = <span class=\"number\">100</span>, callback =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (count &amp;&amp; <span class=\"keyword\">typeof</span> count === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; count; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">\t\t\tdiv.innerHTML = i</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.body.appendChild(div)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将业务代码委托执行</span></span><br><span class=\"line\">\t\t\tcallback &amp;&amp; callback(div)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// 把改变样式的业务逻辑分离出来</span></span><br><span class=\"line\">appendDiv(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">\tel.style.cssText = <span class=\"string\">`display: none`</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样我们就将业务逻辑分离出来了, 以后可能我们想改颜色啦或者位置什么的也方便维护.</p>\n<h4 id=\"函数作为返回值\"><a href=\"#函数作为返回值\" class=\"headerlink\" title=\"函数作为返回值\"></a>函数作为返回值</h4><p>相比把函数作为参数传递, 可能函数当做返回值返回运用场景更多一些, 让函数返回另一个可执行函数就意味着运算过程可延续.直接来看一些例子吧.</p>\n<ul>\n<li>检查类型</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Type = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, type; type = [<span class=\"string\">'Array'</span>, <span class=\"string\">'String'</span>, <span class=\"string\">'Number'</span>][i++];) &#123;</span><br><span class=\"line\">\tType[<span class=\"string\">'is'</span> + type] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">'[object '</span>+ type +<span class=\"string\">']'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Type.isArray([])) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Type.isString(<span class=\"string\">'123'</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Type.isNumber(<span class=\"number\">123</span>)) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>单例模式<br>  这里先不讨论单例模式, 只看代码实现</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fn 函数作为参数传递</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getSingle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> ret;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果 ret 不存在, ret 等于 fn 函数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret || (ret = fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// 调用这个高阶函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getDiv = getSingle(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 参数也会一起传过来, 这里返回['123']</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">getDiv(<span class=\"string\">'123'</span>)</span><br></pre></td></tr></table></figure>\n<p>getSingle 这个高阶函数既将函数作为参数传递, 又让函数执行后返回另一个函数.</p>\n<blockquote>\n<p>JavaScript 设计模式与开发实践还有个例子也很有意思<br>叫做 AOP(面向切面编程), 作用是把与业务逻辑不相关的部分抽离出来再通过动态植入的方式加入业务逻辑的模块中.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在原函数之前</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.before = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">beforeFn</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>; <span class=\"comment\">// 保存原函数的引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// A</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行新函数并修正 this</span></span><br><span class=\"line\">\t\tbeforeFn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行原函数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> that.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 在原函数之后</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.after = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">afterFn</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// B</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 先执行 before 函数</span></span><br><span class=\"line\">\t\tthat.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 再执行新函数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> afterFn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn = fn.before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;).after(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fn() <span class=\"comment\">// 按顺序输出 1 2 3</span></span><br></pre></td></tr></table></figure>\n<p>上面的执行顺序是这样的:</p>\n<ol>\n<li>After中的回调函数 B<br>因为在最后执行 fn 函数时, fn 已经是 after 函数了, 因此在 fn() 执行时调用的是 after 中返回的匿名函数B.</li>\n<li>B 中的 that.apply(this, arguments)<br>此时的 that 指向 before 函数</li>\n<li>执行Before中的回调函数 A</li>\n<li>A 中的 beforeFn.apply(this, arguments)<br>执行 console.log(1)</li>\n<li>return that.apply(this, arguments)<br>执行 console.log(2)</li>\n<li>回到 after 函数中执行return afterFn.apply(this, arguments)<br>执行 console.log(3)</li>\n</ol>\n<h4 id=\"函数柯里化\"><a href=\"#函数柯里化\" class=\"headerlink\" title=\"函数柯里化\"></a>函数柯里化</h4><p>函数柯里化可以说是高阶函数经典中的经典了, 说到高阶函数应该很快就会想到他了. 我理解的函数柯里化是: 先将参数依次缓存, 在真正需要计算结果时, 才进行计算这样可以减少运算次数.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通用 curring</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> curring = <span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> argsArr = []</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [...args].length === <span class=\"number\">0</span></span><br><span class=\"line\">            ? fn.apply(<span class=\"literal\">null</span>, argsArr)</span><br><span class=\"line\">            : [].push.apply(argsArr, [...args])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要计算的函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> calculate = <span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> money = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...argsArr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        argsArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            money += item</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> money</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 柯里化</span></span><br><span class=\"line\">calculate = curring(calculate)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 缓存参数, 其实并没有计算</span></span><br><span class=\"line\">calculate(<span class=\"number\">20</span>)</span><br><span class=\"line\">calculate(<span class=\"number\">40</span>)</span><br><span class=\"line\">calculate(<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 真正计算的时候</span></span><br><span class=\"line\">calculate()</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h4><p>在某些场景下函数有可能会被非常频繁地调用, 从而造成很大的性能问题. 例如: window.resize事件、mousemove 事件, 它们触发的频率太高了, 而用户并不需要如此高频率的使用. 因此函数节流就是为了限制函数出发的频率.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节流</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> throttle = <span class=\"function\">(<span class=\"params\">fn, interval = <span class=\"number\">800</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isFirst = <span class=\"literal\">true</span>, timer</span><br><span class=\"line\">    <span class=\"comment\">// ...args =&gt; event</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFirst) &#123;</span><br><span class=\"line\">            fn.apply(that, [...args])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isFirst = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            clearTimeout(timer)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">            fn.apply(that, [...args])</span><br><span class=\"line\">        &#125;, interval)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入需要节流的函数和间隔时间</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onresize = throttle(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">800</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"分时函数\"><a href=\"#分时函数\" class=\"headerlink\" title=\"分时函数\"></a>分时函数</h4><p>上面我们提供了一种限制函数调用频率的解决方案, 现在是另一个问题: 某些函数是由用户主动唤起的, 但是因为一些原因导致函数严重影响页面的性能. 分时函数可以为我们解决这个问题, 我理解的分时函数: 将请求分批处理, 在一定的时间内执行一部分请求, 直到请求全部完成.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 分时函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timeChunk = <span class=\"function\">(<span class=\"params\">data, fn, count = <span class=\"number\">1</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer, obj</span><br><span class=\"line\">    <span class=\"keyword\">const</span> start = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">Math</span>.min(count, data.length); i++) &#123;</span><br><span class=\"line\">            obj = data.shift()</span><br><span class=\"line\">            fn.apply(<span class=\"literal\">null</span>, obj)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            clearTimeout(timer)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            start()</span><br><span class=\"line\">        &#125;, <span class=\"number\">200</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模拟数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">    ary.push(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分时化</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> renderfriendList = timeChunk(ary, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">    div.innerHTML = n</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(div)</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染</span></span><br><span class=\"line\">renderfriendList()</span><br></pre></td></tr></table></figure>\n<h4 id=\"惰性加载\"><a href=\"#惰性加载\" class=\"headerlink\" title=\"惰性加载\"></a>惰性加载</h4><p>举个例子, 在 web 中为了满足各浏览器之间的差异, 我们会做一些嗅探工作. 异于常规方案, 惰性加载在真正需要时才使用且进入条件分支后在内部重写该函数, 这样重写后的函数就是我们需要的函数.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> addEvent = <span class=\"function\">(<span class=\"params\">el, type, handler</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.addEventListener) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 重写函数</span></span><br><span class=\"line\">        addEvent = <span class=\"function\">(<span class=\"params\">el, type, handler</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            el.addEventListener(type, handler, <span class=\"literal\">false</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.attachEvent) &#123;</span><br><span class=\"line\">        addEvent = <span class=\"function\">(<span class=\"params\">el, type, handler</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            el.attachEvent(<span class=\"string\">'on'</span> + type, handler)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addEvent(el, type, handler)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\">addEvent(btn, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'click!'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Created on 2017-10-26 by Cara</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这一篇笔记是为正式开始学习 javadcript 设计模式做铺垫，由于许多设计模式都用到了闭包和高阶函数来实现, 所以了解这两个知识点也是必要的.</p>\n<blockquote>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包简单的来说是函数与函数之间的桥梁, 让一个函数有权访问另一个函数作用域里的变量. 定义说起来还是很生涩的, 要理解闭包我们需要先知道变量的作用域以及变量的生命周期才行.</p>\n</blockquote>\n<ul>\n<li>变量的作用域<br>变量的作用域指的是变量的有效范围. 在函数中生命变量时, 如果没有关键字 var、let及const那么这个变量就会变成全局变量; 如果有这个时候的变量就是局部变量, 只有在函数内部才能够访问到.<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fun = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\talert(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun()</span><br><span class=\"line\">alert(a) <span class=\"comment\">// a is not defined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>函数这个时候就像一块单面镜, 里面可以看见外面, 外面不能看到里面. 因为函数在搜索一个变量的时候, 如果函数内没有这个变量, 那么这个搜索过程会随着代码的执行环境创建的作用域链向外搜索直至全局对象.</p>\n<ul>\n<li>变量生命周期<br>对于全局变量来说, 它的生命周期自然是永久的除非我们手动销毁这个变量; 对于局部变量, 一般来说当函数执行完毕之后该变量就会跟着被销毁. 而闭包则可以延续局部变量的生命周期, 举个栗子:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\ta++;</span><br><span class=\"line\">\t\talert(a);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = func();</span><br><span class=\"line\">fn(); <span class=\"comment\">// 1</span></span><br><span class=\"line\">fn(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">fn(); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里我们可以看到 a 变量不仅在外部可以被访问到而且还一直在递增, 这是因为 <code>fn = func()</code>执行时, fn 保存了 func 返回的匿名函数, 而这个匿名函数是有权 func() 被调用时产生的环境. a 变量就在这个环境中, 所以既然局部变量所在换的环境没有被销毁那么 a 变量也不会被销毁掉, 这个例子就产生了一个闭包结构.</p>\n<blockquote>\n<h4 id=\"闭包的作用\"><a href=\"#闭包的作用\" class=\"headerlink\" title=\"闭包的作用\"></a>闭包的作用</h4></blockquote>\n<ul>\n<li>封装变量<br>众所周知全局变量是非常容易引起命名冲突的, 所以我们可以利用闭包把一些不需要暴露在全局的变量封装成私有变量.</li>\n</ul>\n<p>假设有一个计算乘积的函数:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mult = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 缓存(封装起来)</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> cache = &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> arg = [].join.call(<span class=\"built_in\">arguments</span>, <span class=\"string\">','</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 封装计算方法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> calulate = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = <span class=\"built_in\">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\t\t\ta = a * <span class=\"built_in\">arguments</span>[i]</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 存在缓存则不计算</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arg <span class=\"keyword\">in</span> cache) <span class=\"keyword\">return</span> cache[arg]</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cache[arg] = calulate.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mult(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>)); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure></p>\n<p>将变量 cache 封装在 mult 函数中来缓存已经计算过的参数, 以减少重复计算. 这个缓存机制本来是可以扔在全局环境中的.</p>\n<ul>\n<li>延续局部变量生命周期<br>平常做埋点会用到的 image 对象来上报数据, 如下:</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> report = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">\timg.src = src</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">report(<span class=\"string\">'http://xxxxx.com/xxx'</span>)</span><br></pre></td></tr></table></figure>\n<p>这种写法会造成数据丢失, 因为在 HTTP 还未结束时, report 函数已经执行完毕而 img 为 report 函数中的局部变量, 在函数执行完毕后就会随之销毁造成数据丢失的情况. 下面用闭包把变量封装起来, 来解决这一问题:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> report = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> imgs = []</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">\t\timgs.push(img);</span><br><span class=\"line\">\t\timg.src = src</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">report(<span class=\"string\">'http://xxxxx.com/xxx'</span>)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<h4 id=\"闭包实现命令模式\"><a href=\"#闭包实现命令模式\" class=\"headerlink\" title=\"闭包实现命令模式\"></a>闭包实现命令模式</h4><p>说了这么多就来看看关于闭包的运用吧, 这里用闭包简单实现下命令模式, 顺便预先了解一下命令模式.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">'open'</span> <span class=\"attr\">onclick</span>=<span class=\"string\">'execute'</span>&gt;</span>执行命令<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">'close'</span> <span class=\"attr\">onclick</span>=<span class=\"string\">'undo'</span>&gt;</span>撤销命令<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>面向对象版<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> TV = &#123;</span><br><span class=\"line\">\topen () &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'TV is open!'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tclose () &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'TV is close!'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接收命令</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ReceiveCommand = <span class=\"function\"><span class=\"params\">receiver</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.receiver = receiver</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打开电视</span></span><br><span class=\"line\">ReceiveCommand.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.receiver.open()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 关电视</span></span><br><span class=\"line\">ReceiveCommand.prototype.undo = functon () &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.receiver.close()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置命令</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> setCommand = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">command</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'open'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcommand.execute()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'close'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\tcommand.undo()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将命令告诉执行者, 设置命令传入执行者</span></span><br><span class=\"line\">setCommand(<span class=\"keyword\">new</span> ReceiveCommand(TV))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>命令模式是把请求发起者和执行命令(执行者)分离开来, 以达到解耦的目的. 在执行命令之前, 把命令放入执行者来告诉执行者要执行什么样的命令, 命令模式大概就是这样啦.</p>\n<ul>\n<li>闭包版<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> TV = &#123;</span><br><span class=\"line\">\topen () &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'TV is open!'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tclose () &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'TV is close!'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 执行者</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> receiveCommand = <span class=\"function\"><span class=\"params\">receiver</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> execute = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> receiver.open()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> undo = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> receiver.close()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\texecute: execute,</span><br><span class=\"line\">\t\tundo: undo</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 发起者</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> setCommand = <span class=\"function\"><span class=\"params\">command</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'open'</span>).onclick = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\texecute.open()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'close'</span>).onclick = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\tundo.close()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setCommand(receiveCommand(TV))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>闭包明显清晰更多, 也更简洁.</p>\n<blockquote>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>将函数作为参数传递或让函数执行结果返回另一个函数, 满足这两个条件之一的函数都可以称作为高阶函数.</p>\n</blockquote>\n<h4 id=\"将函数作为参数传递\"><a href=\"#将函数作为参数传递\" class=\"headerlink\" title=\"将函数作为参数传递\"></a>将函数作为参数传递</h4><p>将函数作为参数传递, 就意味着我们可以将与业务相关的逻辑代码分离出来, 解除业务代码和不变逻辑的耦合, 最常见的就是我们的回调函数. 实际运用中 ajax 异步请求, 当我们不知道返回值在什么时候返回值又需要在返回后做一些处理, 就要用到回调函数了.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> getPersonInfo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userId, callback</span>) </span>&#123;</span><br><span class=\"line\">\t$.ajax(<span class=\"string\">`http://xxx/getPersonInfo?<span class=\"subst\">$&#123;userId&#125;</span>`</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\tcallback &amp;&amp; callback(data)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里的匿名函数就是上面的 callback</span></span><br><span class=\"line\">getPersonInfo(<span class=\"string\">\"54332123\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这种是我们比较常见的回调函数, 在其他的方面, 也可以将一些请求委托给另一个函数代为执行, 如:<br>假如我们需要先创建100的 div 节点, 然后把它们隐藏掉</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// count 默认值为100</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> appendDiv = count = <span class=\"number\">100</span>, callback =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (count &amp;&amp; <span class=\"keyword\">typeof</span> count === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; count; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">\t\t\tdiv.innerHTML = i</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.body.appendChild(div)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将业务代码委托执行</span></span><br><span class=\"line\">\t\t\tcallback &amp;&amp; callback(div)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// 把改变样式的业务逻辑分离出来</span></span><br><span class=\"line\">appendDiv(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">\tel.style.cssText = <span class=\"string\">`display: none`</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样我们就将业务逻辑分离出来了, 以后可能我们想改颜色啦或者位置什么的也方便维护.</p>\n<h4 id=\"函数作为返回值\"><a href=\"#函数作为返回值\" class=\"headerlink\" title=\"函数作为返回值\"></a>函数作为返回值</h4><p>相比把函数作为参数传递, 可能函数当做返回值返回运用场景更多一些, 让函数返回另一个可执行函数就意味着运算过程可延续.直接来看一些例子吧.</p>\n<ul>\n<li>检查类型</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Type = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, type; type = [<span class=\"string\">'Array'</span>, <span class=\"string\">'String'</span>, <span class=\"string\">'Number'</span>][i++];) &#123;</span><br><span class=\"line\">\tType[<span class=\"string\">'is'</span> + type] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">'[object '</span>+ type +<span class=\"string\">']'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Type.isArray([])) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Type.isString(<span class=\"string\">'123'</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Type.isNumber(<span class=\"number\">123</span>)) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>单例模式<br>  这里先不讨论单例模式, 只看代码实现</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fn 函数作为参数传递</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getSingle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> ret;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果 ret 不存在, ret 等于 fn 函数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret || (ret = fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// 调用这个高阶函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getDiv = getSingle(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 参数也会一起传过来, 这里返回['123']</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">getDiv(<span class=\"string\">'123'</span>)</span><br></pre></td></tr></table></figure>\n<p>getSingle 这个高阶函数既将函数作为参数传递, 又让函数执行后返回另一个函数.</p>\n<blockquote>\n<p>JavaScript 设计模式与开发实践还有个例子也很有意思<br>叫做 AOP(面向切面编程), 作用是把与业务逻辑不相关的部分抽离出来再通过动态植入的方式加入业务逻辑的模块中.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在原函数之前</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.before = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">beforeFn</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>; <span class=\"comment\">// 保存原函数的引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// A</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行新函数并修正 this</span></span><br><span class=\"line\">\t\tbeforeFn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行原函数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> that.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 在原函数之后</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.after = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">afterFn</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// B</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 先执行 before 函数</span></span><br><span class=\"line\">\t\tthat.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 再执行新函数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> afterFn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn = fn.before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;).after(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fn() <span class=\"comment\">// 按顺序输出 1 2 3</span></span><br></pre></td></tr></table></figure>\n<p>上面的执行顺序是这样的:</p>\n<ol>\n<li>After中的回调函数 B<br>因为在最后执行 fn 函数时, fn 已经是 after 函数了, 因此在 fn() 执行时调用的是 after 中返回的匿名函数B.</li>\n<li>B 中的 that.apply(this, arguments)<br>此时的 that 指向 before 函数</li>\n<li>执行Before中的回调函数 A</li>\n<li>A 中的 beforeFn.apply(this, arguments)<br>执行 console.log(1)</li>\n<li>return that.apply(this, arguments)<br>执行 console.log(2)</li>\n<li>回到 after 函数中执行return afterFn.apply(this, arguments)<br>执行 console.log(3)</li>\n</ol>\n<h4 id=\"函数柯里化\"><a href=\"#函数柯里化\" class=\"headerlink\" title=\"函数柯里化\"></a>函数柯里化</h4><p>函数柯里化可以说是高阶函数经典中的经典了, 说到高阶函数应该很快就会想到他了. 我理解的函数柯里化是: 先将参数依次缓存, 在真正需要计算结果时, 才进行计算这样可以减少运算次数.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通用 curring</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> curring = <span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> argsArr = []</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [...args].length === <span class=\"number\">0</span></span><br><span class=\"line\">            ? fn.apply(<span class=\"literal\">null</span>, argsArr)</span><br><span class=\"line\">            : [].push.apply(argsArr, [...args])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要计算的函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> calculate = <span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> money = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...argsArr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        argsArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            money += item</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> money</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 柯里化</span></span><br><span class=\"line\">calculate = curring(calculate)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 缓存参数, 其实并没有计算</span></span><br><span class=\"line\">calculate(<span class=\"number\">20</span>)</span><br><span class=\"line\">calculate(<span class=\"number\">40</span>)</span><br><span class=\"line\">calculate(<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 真正计算的时候</span></span><br><span class=\"line\">calculate()</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h4><p>在某些场景下函数有可能会被非常频繁地调用, 从而造成很大的性能问题. 例如: window.resize事件、mousemove 事件, 它们触发的频率太高了, 而用户并不需要如此高频率的使用. 因此函数节流就是为了限制函数出发的频率.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节流</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> throttle = <span class=\"function\">(<span class=\"params\">fn, interval = <span class=\"number\">800</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isFirst = <span class=\"literal\">true</span>, timer</span><br><span class=\"line\">    <span class=\"comment\">// ...args =&gt; event</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFirst) &#123;</span><br><span class=\"line\">            fn.apply(that, [...args])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isFirst = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            clearTimeout(timer)</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">            fn.apply(that, [...args])</span><br><span class=\"line\">        &#125;, interval)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入需要节流的函数和间隔时间</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onresize = throttle(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">800</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"分时函数\"><a href=\"#分时函数\" class=\"headerlink\" title=\"分时函数\"></a>分时函数</h4><p>上面我们提供了一种限制函数调用频率的解决方案, 现在是另一个问题: 某些函数是由用户主动唤起的, 但是因为一些原因导致函数严重影响页面的性能. 分时函数可以为我们解决这个问题, 我理解的分时函数: 将请求分批处理, 在一定的时间内执行一部分请求, 直到请求全部完成.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 分时函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timeChunk = <span class=\"function\">(<span class=\"params\">data, fn, count = <span class=\"number\">1</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer, obj</span><br><span class=\"line\">    <span class=\"keyword\">const</span> start = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">Math</span>.min(count, data.length); i++) &#123;</span><br><span class=\"line\">            obj = data.shift()</span><br><span class=\"line\">            fn.apply(<span class=\"literal\">null</span>, obj)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            clearTimeout(timer)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            start()</span><br><span class=\"line\">        &#125;, <span class=\"number\">200</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模拟数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">    ary.push(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分时化</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> renderfriendList = timeChunk(ary, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">    div.innerHTML = n</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(div)</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染</span></span><br><span class=\"line\">renderfriendList()</span><br></pre></td></tr></table></figure>\n<h4 id=\"惰性加载\"><a href=\"#惰性加载\" class=\"headerlink\" title=\"惰性加载\"></a>惰性加载</h4><p>举个例子, 在 web 中为了满足各浏览器之间的差异, 我们会做一些嗅探工作. 异于常规方案, 惰性加载在真正需要时才使用且进入条件分支后在内部重写该函数, 这样重写后的函数就是我们需要的函数.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> addEvent = <span class=\"function\">(<span class=\"params\">el, type, handler</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.addEventListener) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 重写函数</span></span><br><span class=\"line\">        addEvent = <span class=\"function\">(<span class=\"params\">el, type, handler</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            el.addEventListener(type, handler, <span class=\"literal\">false</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.attachEvent) &#123;</span><br><span class=\"line\">        addEvent = <span class=\"function\">(<span class=\"params\">el, type, handler</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            el.attachEvent(<span class=\"string\">'on'</span> + type, handler)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addEvent(el, type, handler)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\">addEvent(btn, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'click!'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Created on 2017-10-26 by Cara</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjgurolrx0000klu0j8v00hdr","category_id":"cjgurols40003klu02o1j9n49","_id":"cjgurolsc000dklu0l57dzqmn"},{"post_id":"cjgurols80007klu051p1vj2i","category_id":"cjgurols40003klu02o1j9n49","_id":"cjgurolsf000iklu005knbc45"},{"post_id":"cjgurols60005klu0q22caaj0","category_id":"cjgurols90008klu0z44o06zl","_id":"cjgurolsi000mklu0x47vj2ya"},{"post_id":"cjgurols70006klu026z6lakf","category_id":"cjgurols90008klu0z44o06zl","_id":"cjgurolsl000sklu0klcoe8nz"},{"post_id":"cjgurolsj000pklu0tofsng0m","category_id":"cjgurols40003klu02o1j9n49","_id":"cjgurolsp000zklu0bkb2h7cp"},{"post_id":"cjgurolsa000bklu0mpcieva2","category_id":"cjgurols40003klu02o1j9n49","_id":"cjgurolsq0013klu0griq0uma"},{"post_id":"cjgurolsa000bklu0mpcieva2","category_id":"cjgurolsi000lklu0kn8vukl0","_id":"cjgurolsr0016klu0ghsinv9f"},{"post_id":"cjgurolsk000rklu0nd1xop63","category_id":"cjgurols40003klu02o1j9n49","_id":"cjgurolst001aklu015jq9sab"},{"post_id":"cjgurolsm000wklu0gz2f09vg","category_id":"cjgurols40003klu02o1j9n49","_id":"cjgurolsu001eklu01f0tfnrh"},{"post_id":"cjgurolsc000cklu0grv9im7h","category_id":"cjgurols40003klu02o1j9n49","_id":"cjgurolsv001iklu0zvzvqu4z"},{"post_id":"cjgurolsc000cklu0grv9im7h","category_id":"cjgurolsi000lklu0kn8vukl0","_id":"cjgurolsx001lklu04qdhcequ"},{"post_id":"cjgurolsq0012klu08ssdd3n3","category_id":"cjgurols90008klu0z44o06zl","_id":"cjgurolsy001oklu0app45axy"},{"post_id":"cjgurolse000hklu0ne588sj0","category_id":"cjgurols90008klu0z44o06zl","_id":"cjgurolt0001sklu0ef4g61yn"},{"post_id":"cjgurolse000hklu0ne588sj0","category_id":"cjgurolsp0010klu0ba4jc3og","_id":"cjgurolt1001vklu0n8yrp3gk"},{"post_id":"cjgurolsr0015klu00d8fgzcq","category_id":"cjgurols40003klu02o1j9n49","_id":"cjgurolt3001yklu0ti07qyol"},{"post_id":"cjgurolsg000kklu03dfn3foi","category_id":"cjgurols40003klu02o1j9n49","_id":"cjgurolt40021klu06s68o02a"},{"post_id":"cjgurolsg000kklu03dfn3foi","category_id":"cjgurolsi000lklu0kn8vukl0","_id":"cjgurolt50024klu0t5kvnzw7"},{"post_id":"cjgurolst001dklu09raid2so","category_id":"cjgurols90008klu0z44o06zl","_id":"cjgurolt50026klu0hmb4nq0z"},{"post_id":"cjgurolsv001gklu0jygctjsd","category_id":"cjgurols40003klu02o1j9n49","_id":"cjgurolt50028klu0ljflytyb"},{"post_id":"cjgurolsw001kklu0bqcj0dcd","category_id":"cjgurols40003klu02o1j9n49","_id":"cjgurolt6002aklu0fjaw5mdy"},{"post_id":"cjgurolss0019klu0mnha4373","category_id":"cjgurols40003klu02o1j9n49","_id":"cjgurolt6002cklu07iptbrnw"},{"post_id":"cjgurolss0019klu0mnha4373","category_id":"cjgurolsv001hklu0d8gvjlqo","_id":"cjgurolt6002eklu0rmbtne0x"},{"post_id":"cjgurolsx001nklu0joal8sv0","category_id":"cjgurols40003klu02o1j9n49","_id":"cjgurolt6002gklu056hhcnd7"},{"post_id":"cjgurolsz001rklu0ub6gw88t","category_id":"cjgurols90008klu0z44o06zl","_id":"cjgurolt6002iklu0t0bz3e04"},{"post_id":"cjgurolt0001uklu0ol9onrig","category_id":"cjgurols90008klu0z44o06zl","_id":"cjgurolt7002kklu0oe4s52i4"},{"post_id":"cjgurolt2001xklu07cne2y1m","category_id":"cjgurols40003klu02o1j9n49","_id":"cjgurolt7002lklu0zcswbe8t"},{"post_id":"cjgurolt40020klu0xmy4iinz","category_id":"cjgurols40003klu02o1j9n49","_id":"cjgurolt7002mklu04r51rnkw"},{"post_id":"cjgurolt40020klu0xmy4iinz","category_id":"cjgurolsv001hklu0d8gvjlqo","_id":"cjgurolt7002nklu0ec2ow5bf"}],"PostTag":[{"post_id":"cjgurolrx0000klu0j8v00hdr","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolsa000aklu0isu2hl1u"},{"post_id":"cjgurolsa000bklu0mpcieva2","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolse000gklu0axwg7eb6"},{"post_id":"cjgurols20002klu0u8rvtunj","tag_id":"cjgurols90009klu0jvr3ft08","_id":"cjgurolsg000jklu0uel4uhls"},{"post_id":"cjgurolsc000cklu0grv9im7h","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolsj000oklu0q0roh85z"},{"post_id":"cjgurolse000hklu0ne588sj0","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolsk000qklu0dfsy4755"},{"post_id":"cjgurols60005klu0q22caaj0","tag_id":"cjgurolsd000fklu0ly8pxjnk","_id":"cjgurolsm000vklu0uh8dtgz5"},{"post_id":"cjgurolsg000kklu03dfn3foi","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolso000xklu0c9xy4b0w"},{"post_id":"cjgurolsj000pklu0tofsng0m","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolsp0011klu00loree0m"},{"post_id":"cjgurols70006klu026z6lakf","tag_id":"cjgurolsd000fklu0ly8pxjnk","_id":"cjgurolsr0014klu0gxkfk7v4"},{"post_id":"cjgurolsk000rklu0nd1xop63","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolss0017klu0vly6t84a"},{"post_id":"cjgurolsm000wklu0gz2f09vg","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolst001cklu0445qft7b"},{"post_id":"cjgurols80007klu051p1vj2i","tag_id":"cjgurolsm000uklu0xzwh9xfl","_id":"cjgurolsv001fklu0uhoojqi5"},{"post_id":"cjgurolso000yklu0hc7a26bu","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolsw001jklu0y8whqnrj"},{"post_id":"cjgurolsq0012klu08ssdd3n3","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolsx001mklu01h2eus60"},{"post_id":"cjgurolss0019klu0mnha4373","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolsz001qklu0f112gdlz"},{"post_id":"cjgurolst001dklu09raid2so","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolt0001tklu0k3cdc6j7"},{"post_id":"cjgurolsv001gklu0jygctjsd","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolt1001wklu0cbon1agm"},{"post_id":"cjgurolsr0015klu00d8fgzcq","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolt3001zklu0vj958ii2"},{"post_id":"cjgurolsr0015klu00d8fgzcq","tag_id":"cjgurolst001bklu07cgfjhdc","_id":"cjgurolt50023klu0fnf7xtob"},{"post_id":"cjgurolsx001nklu0joal8sv0","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolt50025klu0cfx8nu9o"},{"post_id":"cjgurolsz001rklu0ub6gw88t","tag_id":"cjgurolsd000fklu0ly8pxjnk","_id":"cjgurolt50027klu04u2dpg41"},{"post_id":"cjgurolt0001uklu0ol9onrig","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolt60029klu00ehgdaj3"},{"post_id":"cjgurolsw001kklu0bqcj0dcd","tag_id":"cjgurolsz001pklu06bbmvlt8","_id":"cjgurolt6002bklu0hjw4ekhi"},{"post_id":"cjgurolt40020klu0xmy4iinz","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolt6002dklu06jhdae89"},{"post_id":"cjgurolt2001xklu07cne2y1m","tag_id":"cjgurols50004klu00koggbr8","_id":"cjgurolt6002fklu0mg9d3wac"},{"post_id":"cjgurolt2001xklu07cne2y1m","tag_id":"cjgurolst001bklu07cgfjhdc","_id":"cjgurolt6002hklu00k3j2tde"},{"post_id":"cjgurolt2001xklu07cne2y1m","tag_id":"cjgurolt40022klu07vffuqj4","_id":"cjgurolt7002jklu04b83phe1"}],"Tag":[{"name":"JavaScript","_id":"cjgurols50004klu00koggbr8"},{"name":"Babel","_id":"cjgurols90009klu0jvr3ft08"},{"name":"CSS","_id":"cjgurolsd000fklu0ly8pxjnk"},{"name":"HTTP","_id":"cjgurolsm000uklu0xzwh9xfl"},{"name":"Node.js","_id":"cjgurolst001bklu07cgfjhdc"},{"name":"hexo","_id":"cjgurolsz001pklu06bbmvlt8"},{"name":"FFmpeg","_id":"cjgurolt40022klu07vffuqj4"}]}}